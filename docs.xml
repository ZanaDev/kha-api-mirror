<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<class path="Array" params="T" file="C:\HaxeLibraries\Kha\Tools\haxe\std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, an empty Array [] is
		returned and `this` Array is unchanged.

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use `Std.string()` to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed accordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurrence of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurrence of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<map public="1" params="S" get="inline" set="null" line="277">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" get="inline" set="null" line="295">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<resize public="1" set="method">
			<f a="len">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the length of the Array.

		If `len` is shorter than the array's current size, the last
		`length - len` elements will be removed. If `len` is longer, the Array
		will be extended, with new elements set to a target-specific default
		value:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets</haxe_doc>
		</resize>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.

	@see https://haxe.org/manual/std-Array.html
	@see https://haxe.org/manual/lf-array-comprehension.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="Class" params="T" file="C:\HaxeLibraries\Kha\Tools\haxe\std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/_std/Date.hx">
		<fromTime public="1" set="method" line="105" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the timestamp (in milliseconds) `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" line="111" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the formatted string `s`. The following formats are
		accepted by the function:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats expressed a date in local time. The third is a time
		relative to the UTC epoch.</haxe_doc>
		</fromString>
		<mSeconds><x path="Float"/></mSeconds>
		<new public="1" set="method" line="25">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11 (note that this is zero-based)
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970 UTC.

	## Supported range

	Due to platform limitations, only dates in the range 1970 through 2038 are
	supported consistently. Some targets may support dates outside this range,
	depending on the OS at runtime. The `Date.fromTime` method will not work with
	timestamps outside the range on any target.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Enum" params="T" file="C:\HaxeLibraries\Kha\Tools\haxe\std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/EnumValue.hx" private="1" module="EnumValue"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="Lambda" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/Lambda.hx">
		<array public="1" params="A" set="method" line="45" static="1">
			<f a="it">
				<t path="Iterable"><c path="array.A"/></t>
				<c path="Array"><c path="array.A"/></c>
			</f>
			<haxe_doc>Creates an Array from Iterable `it`.

		If `it` is an Array, this function returns a copy of it.</haxe_doc>
		</array>
		<haxe_doc>The `Lambda` class is a collection of methods to support functional
	programming. It is ideally used with `using Lambda` and then acts as an
	extension to Iterable types.

	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.

	If the first argument to any of the methods is null, the result is
	unspecified.

	@see https://haxe.org/manual/std-Lambda.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="Main" params="" file="c:\Users\Zanarias\Desktop\Programming Projects\KhaTest1\Sources/Main.hx">
		<update set="method" line="18" static="1"><f a=""><x path="Void"/></f></update>
		<render set="method" line="21" static="1"><f a="frames">
	<c path="Array"><c path="kha.Framebuffer"/></c>
	<x path="Void"/>
</f></render>
		<main public="1" set="method" line="61" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</main>
	</class>
	<typedef path="Map" params="K:V" file="C:\HaxeLibraries\Kha\Tools\haxe\std/Map.hx"><x path="haxe.ds.Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></typedef>
	<typedef path="IMap" params="K:V" file="C:\HaxeLibraries\Kha\Tools\haxe\std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="Math" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately 3.141592653589793.</haxe_doc>
		</PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of -1.0 / 0.0.

		Operations with `NEGATIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes positive infinity.

		For example, this is the result of 1.0 / 0.0.

		Operations with `POSITIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes an invalid number.

		NaN stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: Math.sqrt(-1).

		All further operations with `NaN` as an operand will result in `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.

		In order to test if a value is `NaN`, you should use `Math.isNaN()` function.</haxe_doc>
		</NaN>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		If `v` is positive or 0, the result is unchanged. Otherwise the result
		is -`v`.

		If `v` is `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is
		`POSITIVE_INFINITY`.

		If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		If `a` or `b` are `NaN`, the result is `NaN`.
		If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.
		If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		If `a` or `b` are `NaN`, the result is `NaN`.
		If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</tan>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</acos>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</atan>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of
		two specified numbers, in radians.

		If parameter `x` or `y`  is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is `NaN`.</haxe_doc>
		</atan2>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		exp(1.0) is approximately 2.718281828459.

		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `NEGATIVE_INFINITY`, the result is `0.0`.
		If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.

		This is the mathematical inverse operation of exp,
		i.e. `log(exp(v)) == v` always holds.

		If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result
		is `NaN`.
		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `0.0`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.

		If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result
		is `NaN`.
		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `0.0`, the result is `0.0`.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</ceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to 0.0,
		and less than 1.0.</haxe_doc>
		</random>
		<ffloor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`, as a `Float`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</ffloor>
		<fceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`, as a `Float`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</fceil>
		<fround public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value, as a Float.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is unspecified.</haxe_doc>
		</fround>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result
		is `false`, otherwise the result is `true`.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is `NaN`, the result is `true`, otherwise the result is `false`.
		In particular, both `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are
		not considered `NaN`.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.

	@see https://haxe.org/manual/std-math.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":include"><e>"hxMath.h"</e></m>
		</meta>
	</class>
	<class path="Reflect" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/_std/Reflect.hx">
		<hasField public="1" set="method" line="28" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" line="33" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.

		(As3) If used on a property field, the getter will be invoked. It is
		not possible to obtain the value directly.</haxe_doc>
		</field>
		<setField public="1" set="method" line="38" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`.

		If `o` has no field named `field`, this function is only guaranteed to
		work for anonymous structures.

		If `o` or `field` are null, the result is unspecified.

		(As3) If used on a property field, the setter will be invoked. It is
		not possible to set the value directly.</haxe_doc>
		</setField>
		<callMethod public="1" set="method" line="53" static="1">
			<f a="o:func:args">
				<d/>
				<x path="haxe.Function"/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Call a method `func` with the given arguments `args`.

		The object `o` is ignored in most cases. It serves as the `this`-context in the following
		situations:

		* (neko) Allows switching the context to `o` in all cases.
		* (macro) Same as neko for Haxe 3. No context switching in Haxe 4.
		* (js, lua) Require the `o` argument if `func` does not, but should have a context.
			This can occur by accessing a function field natively, e.g. through `Reflect.field`
			or by using `(object : Dynamic).field`. However, if `func` has a context, `o` is
			ignored like on other targets.</haxe_doc>
		</callMethod>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.

	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
			<m n=":analyzer"><e>ignore</e></m>
		</meta>
	</class>
	<class path="Std" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/_std/Std.hx">
		<is public="1" set="method" line="24" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</is>
		<downcast public="1" params="T:S" set="method" line="28" static="1">
			<f a="value:c">
				<c path="downcast.T"/>
				<x path="Class"><c path="downcast.S"/></x>
				<c path="downcast.S"/>
			</f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Checks if object `value` is an instance of class or interface `c`.

		Compiles only if the type specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the type specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with core types such as `String`,
		`Array` and `Date`.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</downcast>
		<instance public="1" params="T:S" set="method" line="33" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<meta>
				<m n=":deprecated"><e>"Std.instance() is deprecated. Use Std.downcast() instead."</e></m>
				<m n=":keep"/>
			</meta>
		</instance>
		<string public="1" set="method" line="37" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" line="41" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="45" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If `x` is null, the result is unspecified.
		If `x` cannot be parsed as integer, the result is `null`.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="49" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a `NaN` value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="53" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":headerClassCode"><e><![CDATA["\t\tstatic inline String string(String &s) { return s; }"]]></e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Single" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/StdTypes.hx" module="StdTypes">
		<from><icast><x path="Float"/></icast></from>
		<this><x path="Single"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc>Single-precision IEEE 32bit float (4-byte).</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="C:\HaxeLibraries\Kha\Tools\haxe\std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="C:\HaxeLibraries\Kha\Tools\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="C:\HaxeLibraries\Kha\Tools\haxe\std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="C:\HaxeLibraries\Kha\Tools\haxe\std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="C:\HaxeLibraries\Kha\Tools\haxe\std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="C:\HaxeLibraries\Kha\Tools\haxe\std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="C:\HaxeLibraries\Kha\Tools\haxe\std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="String" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex` (if `startIndex` is posivite
		or 0) or `max(this.length + startIndex, 0)` (if `startIndex` is negative).

		If `startIndex` exceeds `this.length`, -1 is returned.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="StringTools" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/StringTools.hx">
		<urlDecode public="1" set="method" line="110" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Decode an URL using the standard format.</haxe_doc>
		</urlDecode>
		<endsWith public="1" set="method" line="252" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` ends with the string `end`.

		If `end` is `null`, the result is unspecified.

		If `end` is the empty String `""`, the result is true.</haxe_doc>
		</endsWith>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="Type" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/_std/Type.hx">
		<resolveClass public="1" set="method" line="71" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="79" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createEmptyInstance public="1" params="T" set="method" line="94" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="99" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<getInstanceFields public="1" set="method" line="110" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a list of the instance fields of class `c`, including
		inherited fields.

		This only includes fields which are known at compile-time. In
		particular, using `getInstanceFields(getClass(obj))` will not include
		any fields which were added to `obj` at runtime.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns instance fields that are public.</haxe_doc>
		</getInstanceFields>
		<getEnumConstructs public="1" set="method" line="118" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<haxe_doc>The Haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.

	@see https://haxe.org/manual/types.html
	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="UInt" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/UInt.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>The unsigned `Int` type is only defined for Flash and C#.
	Simulate it for other platforms.

	@see https://haxe.org/manual/types-basic-types.html</haxe_doc>
		<impl><class path="_UInt.UInt_Impl_" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/UInt.hx" private="1" module="UInt"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="cpp.ArrayBase" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/ArrayBase.hx" extern="1">
		<length public="1" set="null"><x path="Int"/></length>
		<getElementSize public="1" set="method"><f a=""><x path="Int"/></f></getElementSize>
		<getByteCount public="1" set="method"><f a=""><x path="Int"/></f></getByteCount>
		<getBase public="1" set="method"><f a=""><c path="cpp.RawPointer"><x path="cpp.Char"/></c></f></getBase>
	</class>
	<class path="cpp.AutoCast" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/AutoCast.hx" extern="1"/>
	<typedef path="cpp.CallableData" params="T" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/Callable.hx" module="cpp.Callable">
		<c path="cpp.CallableData.T"/>
		<meta>
			<m n=":noPackageRestrict"/>
			<m n=":callable"/>
		</meta>
	</typedef>
	<abstract path="cpp.Callable" params="T" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/Callable.hx">
		<from><icast field="fromFunction"><x path="cpp.Function">
	<c path="fromFunction.F"/>
	<c path="cpp.abi.Abi"/>
</x></icast></from>
		<this><t path="cpp.CallableData"><c path="cpp.Callable.T"/></t></this>
		<to><icast field="toFunction"><x path="cpp.Function">
	<c path="cpp.Callable.T"/>
	<c path="cpp.abi.Abi"/>
</x></icast></to>
		<haxe_doc><![CDATA[The generator intercepts this type and converts it to a cpp.Function<T> on cpp.]]></haxe_doc>
		<meta>
			<m n=":noPackageRestrict"/>
			<m n=":callable"/>
		</meta>
		<impl><class path="cpp._Callable.Callable_Impl_" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/Callable.hx" private="1" module="cpp.Callable" extern="1">
	<_new public="1" get="inline" set="null" line="37" static="1">
		<f a="inValue">
			<c path="cpp.Callable.T"/>
			<x path="cpp.Callable"><c path="cpp.Callable.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<call public="1" get="accessor" set="null" static="1">
		<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
		<meta><m n=":impl"/></meta>
	</call>
	<get_call public="1" get="inline" set="null" line="42" static="1">
		<f a="this">
			<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
			<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</get_call>
	<fromFunction public="1" params="F" get="inline" set="null" line="47" static="1">
		<f a="func">
			<x path="cpp.Function">
				<c path="fromFunction.F"/>
				<c path="cpp.abi.Abi"/>
			</x>
			<x path="cpp.Callable"><c path="fromFunction.F"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromFunction>
	<toFunction public="1" get="inline" set="null" line="51" static="1">
		<f a="this">
			<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
			<x path="cpp.Function">
				<c path="cpp.Callable.T"/>
				<c path="cpp.abi.Abi"/>
			</x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toFunction>
	<getProcAddress public="1" params="T:ABI" get="inline" set="null" line="54" static="1"><f a="inModule:inFunction">
	<c path="String"/>
	<c path="String"/>
	<x path="cpp.Function">
		<c path="getProcAddress.T"/>
		<c path="getProcAddress.ABI"/>
	</x>
</f></getProcAddress>
	<fromStaticFunction public="1" params="T" get="inline" set="null" line="57" static="1"><f a="inStaticFunction">
	<c path="fromStaticFunction.T"/>
	<x path="cpp.Callable"><c path="fromStaticFunction.T"/></x>
</f></fromStaticFunction>
	<lt public="1" get="inline" set="null" line="60" static="1">
		<f a="this:inOther">
			<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
			<x path="cpp.Callable"><c path="cpp.Callable.T"/></x>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</lt>
	<leq public="1" get="inline" set="null" line="63" static="1">
		<f a="this:inOther">
			<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
			<x path="cpp.Callable"><c path="cpp.Callable.T"/></x>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</leq>
	<gt public="1" get="inline" set="null" line="66" static="1">
		<f a="this:inOther">
			<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
			<x path="cpp.Callable"><c path="cpp.Callable.T"/></x>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</gt>
	<geq public="1" get="inline" set="null" line="69" static="1">
		<f a="this:inOther">
			<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
			<x path="cpp.Callable"><c path="cpp.Callable.T"/></x>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</geq>
</class></impl>
	</abstract>
	<class path="cpp._Callable.Callable_Impl_" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/Callable.hx" private="1" module="cpp.Callable" extern="1">
		<_new public="1" get="inline" set="null" line="37" static="1">
			<f a="inValue">
				<c path="cpp.Callable.T"/>
				<x path="cpp.Callable"><c path="cpp.Callable.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<call public="1" get="accessor" set="null" static="1">
			<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
			<meta><m n=":impl"/></meta>
		</call>
		<get_call public="1" get="inline" set="null" line="42" static="1">
			<f a="this">
				<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
				<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</get_call>
		<fromFunction public="1" params="F" get="inline" set="null" line="47" static="1">
			<f a="func">
				<x path="cpp.Function">
					<c path="fromFunction.F"/>
					<c path="cpp.abi.Abi"/>
				</x>
				<x path="cpp.Callable"><c path="fromFunction.F"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromFunction>
		<toFunction public="1" get="inline" set="null" line="51" static="1">
			<f a="this">
				<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
				<x path="cpp.Function">
					<c path="cpp.Callable.T"/>
					<c path="cpp.abi.Abi"/>
				</x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toFunction>
		<getProcAddress public="1" params="T:ABI" get="inline" set="null" line="54" static="1"><f a="inModule:inFunction">
	<c path="String"/>
	<c path="String"/>
	<x path="cpp.Function">
		<c path="getProcAddress.T"/>
		<c path="getProcAddress.ABI"/>
	</x>
</f></getProcAddress>
		<fromStaticFunction public="1" params="T" get="inline" set="null" line="57" static="1"><f a="inStaticFunction">
	<c path="fromStaticFunction.T"/>
	<x path="cpp.Callable"><c path="fromStaticFunction.T"/></x>
</f></fromStaticFunction>
		<lt public="1" get="inline" set="null" line="60" static="1">
			<f a="this:inOther">
				<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
				<x path="cpp.Callable"><c path="cpp.Callable.T"/></x>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</lt>
		<leq public="1" get="inline" set="null" line="63" static="1">
			<f a="this:inOther">
				<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
				<x path="cpp.Callable"><c path="cpp.Callable.T"/></x>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</leq>
		<gt public="1" get="inline" set="null" line="66" static="1">
			<f a="this:inOther">
				<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
				<x path="cpp.Callable"><c path="cpp.Callable.T"/></x>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</gt>
		<geq public="1" get="inline" set="null" line="69" static="1">
			<f a="this:inOther">
				<t path="cpp.CallableData"><c path="cpp.Callable.T"/></t>
				<x path="cpp.Callable"><c path="cpp.Callable.T"/></x>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</geq>
	</class>
	<abstract path="cpp.Char" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/Char.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="cpp.Char"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="cpp.ConstPointer" params="T" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/ConstPointer.hx" extern="1">
		<fromRaw public="1" params="T" set="method" static="1"><f a="ptr">
	<c path="cpp.RawConstPointer"><c path="fromRaw.T"/></c>
	<c path="cpp.ConstPointer"><c path="fromRaw.T"/></c>
</f></fromRaw>
		<fromStar public="1" params="T" set="method" static="1">
			<f a="star">
				<t path="cpp.Star"><c path="fromStar.T"/></t>
				<c path="cpp.ConstPointer"><c path="fromStar.T"/></c>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::fromRaw"</e></m></meta>
		</fromStar>
		<fromPointer public="1" params="T" set="method" static="1"><f a="inNativePointer">
	<d/>
	<c path="cpp.ConstPointer"><c path="fromPointer.T"/></c>
</f></fromPointer>
		<ptr public="1"><t path="cpp.Star"><c path="cpp.ConstPointer.T"/></t></ptr>
		<value public="1" get="accessor" set="null"><c path="cpp.ConstPointer.T"/></value>
		<raw public="1" get="accessor" set="null"><c path="cpp.RawPointer"><c path="cpp.ConstPointer.T"/></c></raw>
		<constRaw public="1" get="accessor" set="null"><c path="cpp.RawConstPointer"><c path="cpp.ConstPointer.T"/></c></constRaw>
		<get_value public="1" set="method"><f a=""><t path="cpp.Reference"><c path="cpp.ConstPointer.T"/></t></f></get_value>
		<get_constRaw public="1" set="method"><f a=""><c path="cpp.RawConstPointer"><c path="cpp.ConstPointer.T"/></c></f></get_constRaw>
		<get_raw public="1" set="method"><f a=""><c path="cpp.RawPointer"><c path="cpp.ConstPointer.T"/></c></f></get_raw>
		<lt public="1" set="method"><f a="inOther">
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
	<x path="Bool"/>
</f></lt>
		<leq public="1" set="method"><f a="inOther">
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
	<x path="Bool"/>
</f></leq>
		<gt public="1" set="method"><f a="inOther">
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
	<x path="Bool"/>
</f></gt>
		<geq public="1" set="method"><f a="inOther">
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
	<x path="Bool"/>
</f></geq>
		<setRaw public="1" params="O" set="method"><f a="ptr">
	<c path="cpp.RawPointer"><c path="setRaw.O"/></c>
	<x path="Void"/>
</f></setRaw>
		<reinterpret public="1" params="Other" set="method"><f a=""><c path="cpp.Pointer"><c path="reinterpret.Other"/></c></f></reinterpret>
		<rawCast public="1" params="Other" set="method"><f a=""><c path="cpp.RawPointer"><c path="rawCast.Other"/></c></f></rawCast>
		<at public="1" set="method"><f a="inIndex">
	<x path="Int"/>
	<t path="cpp.Reference"><c path="cpp.ConstPointer.T"/></t>
</f></at>
		<inc public="1" set="method"><f a=""><c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c></f></inc>
		<dec public="1" set="method"><f a=""><c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c></f></dec>
		<incBy public="1" set="method"><f a="inT">
	<x path="Int"/>
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
</f></incBy>
		<decBy public="1" set="method"><f a="inT">
	<x path="Int"/>
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
</f></decBy>
		<add public="1" set="method"><f a="inT">
	<x path="Int"/>
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
</f></add>
		<sub public="1" set="method"><f a="inT">
	<x path="Int"/>
	<c path="cpp.ConstPointer"><c path="cpp.ConstPointer.T"/></c>
</f></sub>
		<postIncVal public="1" set="method"><f a=""><t path="cpp.Reference"><c path="cpp.ConstPointer.T"/></t></f></postIncVal>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreType"/>
			<m n=":include"><e>"cpp/Pointer.h"</e></m>
			<m n=":native"><e>"cpp.Pointer"</e></m>
			<m n=":semantics"><e>variable</e></m>
		</meta>
	</class>
	<class path="cpp.EnumBase" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/EnumBase.hx" extern="1">
		<_hx_getIndex public="1" set="method"><f a=""><x path="Int"/></f></_hx_getIndex>
		<_hx_getTag public="1" set="method"><f a=""><c path="String"/></f></_hx_getTag>
		<_hx_getParamCount public="1" set="method"><f a=""><x path="Int"/></f></_hx_getParamCount>
		<_hx_getParamI public="1" set="method"><f a="inIndex">
	<x path="Int"/>
	<d/>
</f></_hx_getParamI>
		<_hx_getParameters public="1" set="method"><f a=""><c path="Array"><d/></c></f></_hx_getParameters>
		<getIndex public="1" get="inline" set="null" line="34"><f a=""><x path="Int"/></f></getIndex>
		<getTag public="1" get="inline" set="null" line="36"><f a=""><c path="String"/></f></getTag>
		<getParamCount public="1" get="inline" set="null" line="38"><f a=""><x path="Int"/></f></getParamCount>
		<getParamI public="1" get="inline" set="null" line="40"><f a="inIndex">
	<x path="Int"/>
	<d/>
</f></getParamI>
		<getParameters public="1" get="inline" set="null" line="42"><f a=""><c path="Array"><d/></c></f></getParameters>
		<meta><m n=":native"><e>"hx.EnumBase"</e></m></meta>
	</class>
	<class path="cpp.ErrorConstants" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/ErrorConstants.hx" extern="1">
		<invalidCast public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_INVALID_CAST"</e></m></meta>
		</invalidCast>
		<indexOutOfBounds public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_INDEX_OUT_OF_BOUNDS"</e></m></meta>
		</indexOutOfBounds>
		<invalidObject public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_INVALID_OBJECT"</e></m></meta>
		</invalidObject>
		<invalidArgCount public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_INVALID_ARG_COUNT"</e></m></meta>
		</invalidArgCount>
		<nullFunctionPointer public="1" static="1">
			<d/>
			<meta><m n=":native"><e>"HX_NULL_FUNCTION_POINTER"</e></m></meta>
		</nullFunctionPointer>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="cpp.Float32" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/Float32.hx">
		<from><icast><x path="Float"/></icast></from>
		<this><x path="cpp.Float32"/></this>
		<to><icast><x path="Float"/></icast></to>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="cpp.FunctionData" params="T:ABI" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/Function.hx" module="cpp.Function">
		<c path="cpp.FunctionData.T"/>
		<meta><m n=":callable"/></meta>
	</typedef>
	<abstract path="cpp.Function" params="T:ABI" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/Function.hx">
		<this><t path="cpp.FunctionData">
	<c path="cpp.Function.T"/>
	<c path="cpp.Function.ABI"/>
</t></this>
		<meta>
			<m n=":include"><e>"cpp/Pointer.h"</e></m>
			<m n=":callable"/>
		</meta>
		<impl><class path="cpp._Function.Function_Impl_" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/Function.hx" private="1" module="cpp.Function" extern="1">
	<_new public="1" get="inline" set="null" line="30" static="1">
		<f a="inValue">
			<c path="cpp.Function.T"/>
			<x path="cpp.Function">
				<c path="cpp.Function.T"/>
				<c path="cpp.Function.ABI"/>
			</x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<call public="1" get="accessor" set="null" static="1">
		<t path="cpp.FunctionData">
			<c path="cpp.Function.T"/>
			<c path="cpp.Function.ABI"/>
		</t>
		<meta><m n=":impl"/></meta>
	</call>
	<get_call public="1" get="inline" set="null" line="36" static="1">
		<f a="this">
			<t path="cpp.FunctionData">
				<c path="cpp.Function.T"/>
				<c path="cpp.Function.ABI"/>
			</t>
			<t path="cpp.FunctionData">
				<c path="cpp.Function.T"/>
				<c path="cpp.Function.ABI"/>
			</t>
		</f>
		<meta><m n=":impl"/></meta>
	</get_call>
	<nativeGetProcAddress public="1" params="T:ABI" set="method" static="1">
		<f a="inModule:inFunction">
			<c path="String"/>
			<c path="String"/>
			<c path="cpp.AutoCast"/>
		</f>
		<meta><m n=":native"><e>"::cpp::Function_obj::getProcAddress"</e></m></meta>
	</nativeGetProcAddress>
	<getProcAddress public="1" params="T:ABI" get="inline" set="null" line="42" static="1"><f a="inModule:inFunction">
	<c path="String"/>
	<c path="String"/>
	<x path="cpp.Function">
		<c path="getProcAddress.T"/>
		<c path="getProcAddress.ABI"/>
	</x>
</f></getProcAddress>
	<nativeFromStaticFunction public="1" params="T" set="method" static="1">
		<f a="inStaticFunction">
			<c path="nativeFromStaticFunction.T"/>
			<c path="cpp.AutoCast"/>
		</f>
		<meta><m n=":native"><e>"::cpp::Function_obj::fromStaticFunction"</e></m></meta>
	</nativeFromStaticFunction>
	<fromStaticFunction public="1" params="T" get="inline" set="null" line="49" static="1"><f a="inStaticFunction">
	<c path="fromStaticFunction.T"/>
	<x path="cpp.Callable"><c path="fromStaticFunction.T"/></x>
</f></fromStaticFunction>
	<lt public="1" set="method" static="1">
		<f a="this:inOther">
			<t path="cpp.FunctionData">
				<c path="cpp.Function.T"/>
				<c path="cpp.Function.ABI"/>
			</t>
			<x path="cpp.Function">
				<c path="cpp.Function.T"/>
				<c path="cpp.Function.ABI"/>
			</x>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</lt>
	<leq public="1" set="method" static="1">
		<f a="this:inOther">
			<t path="cpp.FunctionData">
				<c path="cpp.Function.T"/>
				<c path="cpp.Function.ABI"/>
			</t>
			<x path="cpp.Function">
				<c path="cpp.Function.T"/>
				<c path="cpp.Function.ABI"/>
			</x>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</leq>
	<gt public="1" set="method" static="1">
		<f a="this:inOther">
			<t path="cpp.FunctionData">
				<c path="cpp.Function.T"/>
				<c path="cpp.Function.ABI"/>
			</t>
			<x path="cpp.Function">
				<c path="cpp.Function.T"/>
				<c path="cpp.Function.ABI"/>
			</x>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</gt>
	<geq public="1" set="method" static="1">
		<f a="this:inOther">
			<t path="cpp.FunctionData">
				<c path="cpp.Function.T"/>
				<c path="cpp.Function.ABI"/>
			</t>
			<x path="cpp.Function">
				<c path="cpp.Function.T"/>
				<c path="cpp.Function.ABI"/>
			</x>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</geq>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="cpp._Function.Function_Impl_" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/Function.hx" private="1" module="cpp.Function" extern="1">
		<_new public="1" get="inline" set="null" line="30" static="1">
			<f a="inValue">
				<c path="cpp.Function.T"/>
				<x path="cpp.Function">
					<c path="cpp.Function.T"/>
					<c path="cpp.Function.ABI"/>
				</x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<call public="1" get="accessor" set="null" static="1">
			<t path="cpp.FunctionData">
				<c path="cpp.Function.T"/>
				<c path="cpp.Function.ABI"/>
			</t>
			<meta><m n=":impl"/></meta>
		</call>
		<get_call public="1" get="inline" set="null" line="36" static="1">
			<f a="this">
				<t path="cpp.FunctionData">
					<c path="cpp.Function.T"/>
					<c path="cpp.Function.ABI"/>
				</t>
				<t path="cpp.FunctionData">
					<c path="cpp.Function.T"/>
					<c path="cpp.Function.ABI"/>
				</t>
			</f>
			<meta><m n=":impl"/></meta>
		</get_call>
		<nativeGetProcAddress public="1" params="T:ABI" set="method" static="1">
			<f a="inModule:inFunction">
				<c path="String"/>
				<c path="String"/>
				<c path="cpp.AutoCast"/>
			</f>
			<meta><m n=":native"><e>"::cpp::Function_obj::getProcAddress"</e></m></meta>
		</nativeGetProcAddress>
		<getProcAddress public="1" params="T:ABI" get="inline" set="null" line="42" static="1"><f a="inModule:inFunction">
	<c path="String"/>
	<c path="String"/>
	<x path="cpp.Function">
		<c path="getProcAddress.T"/>
		<c path="getProcAddress.ABI"/>
	</x>
</f></getProcAddress>
		<nativeFromStaticFunction public="1" params="T" set="method" static="1">
			<f a="inStaticFunction">
				<c path="nativeFromStaticFunction.T"/>
				<c path="cpp.AutoCast"/>
			</f>
			<meta><m n=":native"><e>"::cpp::Function_obj::fromStaticFunction"</e></m></meta>
		</nativeFromStaticFunction>
		<fromStaticFunction public="1" params="T" get="inline" set="null" line="49" static="1"><f a="inStaticFunction">
	<c path="fromStaticFunction.T"/>
	<x path="cpp.Callable"><c path="fromStaticFunction.T"/></x>
</f></fromStaticFunction>
		<lt public="1" set="method" static="1">
			<f a="this:inOther">
				<t path="cpp.FunctionData">
					<c path="cpp.Function.T"/>
					<c path="cpp.Function.ABI"/>
				</t>
				<x path="cpp.Function">
					<c path="cpp.Function.T"/>
					<c path="cpp.Function.ABI"/>
				</x>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</lt>
		<leq public="1" set="method" static="1">
			<f a="this:inOther">
				<t path="cpp.FunctionData">
					<c path="cpp.Function.T"/>
					<c path="cpp.Function.ABI"/>
				</t>
				<x path="cpp.Function">
					<c path="cpp.Function.T"/>
					<c path="cpp.Function.ABI"/>
				</x>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</leq>
		<gt public="1" set="method" static="1">
			<f a="this:inOther">
				<t path="cpp.FunctionData">
					<c path="cpp.Function.T"/>
					<c path="cpp.Function.ABI"/>
				</t>
				<x path="cpp.Function">
					<c path="cpp.Function.T"/>
					<c path="cpp.Function.ABI"/>
				</x>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</gt>
		<geq public="1" set="method" static="1">
			<f a="this:inOther">
				<t path="cpp.FunctionData">
					<c path="cpp.Function.T"/>
					<c path="cpp.Function.ABI"/>
				</t>
				<x path="cpp.Function">
					<c path="cpp.Function.T"/>
					<c path="cpp.Function.ABI"/>
				</x>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</geq>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="cpp.Int64" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/Int64.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="cpp.Int64"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="cpp.NativeArray" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/NativeArray.hx" extern="1">
		<create public="1" params="T" set="method" static="1">
			<f a="length">
				<x path="Int"/>
				<c path="Array"><c path="create.T"/></c>
			</f>
			<meta><m n=":native"><e>"_hx_create_array_length"</e></m></meta>
		</create>
		<blit public="1" params="T" get="inline" set="null" line="37" static="1">
			<f a="ioDestArray:inDestElement:inSourceArray:inSourceElement:inElementCount">
				<c path="Array"><c path="blit.T"/></c>
				<x path="Int"/>
				<c path="Array"><c path="blit.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</blit>
		<getBase public="1" get="inline" set="null" line="41" static="1">
			<f a="inArray">
				<c path="Array"><d/></c>
				<c path="cpp.ArrayBase"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</getBase>
		<reserve public="1" params="T" set="method" static="1">
			<f a="inArray:inElements">
				<c path="Array"><c path="reserve.T"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</reserve>
		<capacity public="1" params="T" set="method" static="1">
			<f a="inArray">
				<c path="Array"><c path="capacity.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</capacity>
		<getElementSize public="1" params="T" set="method" static="1">
			<f a="inArray">
				<c path="Array"><c path="getElementSize.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</getElementSize>
		<address public="1" params="T" get="inline" set="null" line="54" static="1"><f a="inArray:inIndex">
	<c path="Array"><c path="address.T"/></c>
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="address.T"/></c>
</f></address>
		<setData public="1" params="T" set="method" static="1">
			<f a="inArray:inData:inElementCount">
				<c path="Array"><c path="setData.T"/></c>
				<c path="cpp.Pointer"><c path="setData.T"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</setData>
		<setUnmanagedData public="1" params="T" set="method" static="1">
			<f a="inArray:inData:inElementCount">
				<c path="Array"><c path="setUnmanagedData.T"/></c>
				<c path="cpp.ConstPointer"><c path="setUnmanagedData.T"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</setUnmanagedData>
		<zero public="1" params="T" set="method" static="1">
			<f a="ioDestArray:?inFirst:?inElements">
				<c path="Array"><c path="zero.T"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</zero>
		<memcmp public="1" params="T" set="method" static="1">
			<f a="inArrayA:inArrayB">
				<c path="Array"><c path="memcmp.T"/></c>
				<c path="Array"><c path="memcmp.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":nativeStaticExtension"/></meta>
		</memcmp>
		<resolveVirtualArray public="1" set="method" static="1">
			<f a="inArray">
				<c path="Array"><d/></c>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_reslove_virtual_array"</e></m></meta>
		</resolveVirtualArray>
		<unsafeGet public="1" params="T" set="method" static="1">
			<f a="inDestArray:inIndex">
				<c path="Array"><c path="unsafeGet.T"/></c>
				<x path="Int"/>
				<c path="unsafeGet.T"/>
			</f>
			<meta><m n=":native"><e>"_hx_array_unsafe_get"</e></m></meta>
		</unsafeGet>
		<unsafeSet public="1" params="T" get="inline" set="null" line="90" static="1">
			<f a="ioDestArray:inIndex:inValue">
				<c path="Array"><c path="unsafeSet.T"/></c>
				<x path="Int"/>
				<c path="unsafeSet.T"/>
				<c path="unsafeSet.T"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":native"><e>"_hx_array_unsafe_set"</e></m>
			</meta>
		</unsafeSet>
		<setSize public="1" params="T" set="method" static="1">
			<f a="ioArray:inSize">
				<c path="Array"><c path="setSize.T"/></c>
				<x path="Int"/>
				<c path="Array"><c path="setSize.T"/></c>
			</f>
			<meta><m n=":native"><e>"_hx_array_set_size_exact"</e></m></meta>
		</setSize>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="cpp.NativeFile" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/NativeFile.hx" extern="1">
		<file_open public="1" set="method" static="1">
			<f a="fname:r">
				<c path="String"/>
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_open"</e></m></meta>
		</file_open>
		<file_close public="1" set="method" static="1">
			<f a="handle">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_close"</e></m></meta>
		</file_close>
		<file_write public="1" set="method" static="1">
			<f a="handle:s:p:n">
				<d/>
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_write"</e></m></meta>
		</file_write>
		<file_write_char public="1" set="method" static="1">
			<f a="handle:c">
				<d/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_write_char"</e></m></meta>
		</file_write_char>
		<file_read public="1" set="method" static="1">
			<f a="handle:s:p:n">
				<d/>
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_read"</e></m></meta>
		</file_read>
		<file_read_char public="1" set="method" static="1">
			<f a="handle">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_read_char"</e></m></meta>
		</file_read_char>
		<file_seek public="1" set="method" static="1">
			<f a="handle:pos:kind">
				<d/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_seek"</e></m></meta>
		</file_seek>
		<file_tell public="1" set="method" static="1">
			<f a="handle">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_tell"</e></m></meta>
		</file_tell>
		<file_eof public="1" set="method" static="1">
			<f a="handle">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_eof"</e></m></meta>
		</file_eof>
		<file_flush public="1" set="method" static="1">
			<f a="handle">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_flush"</e></m></meta>
		</file_flush>
		<file_contents_string public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_contents_string"</e></m></meta>
		</file_contents_string>
		<file_contents_bytes public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<t path="haxe.io.BytesData"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_contents_bytes"</e></m></meta>
		</file_contents_bytes>
		<file_stdin public="1" set="method" static="1">
			<f a=""><d/></f>
			<meta><m n=":native"><e>"_hx_std_file_stdin"</e></m></meta>
		</file_stdin>
		<file_stdout public="1" set="method" static="1">
			<f a=""><d/></f>
			<meta><m n=":native"><e>"_hx_std_file_stdout"</e></m></meta>
		</file_stdout>
		<file_stderr public="1" set="method" static="1">
			<f a=""><d/></f>
			<meta><m n=":native"><e>"_hx_std_file_stderr"</e></m></meta>
		</file_stderr>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":buildXml"><e><![CDATA["<include name=\"${HXCPP}/src/hx/libs/std/Build.xml\"/>"]]></e></m>
		</meta>
	</class>
	<class path="cpp.NativeGc" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/NativeGc.hx" extern="1">
		<memInfo public="1" set="method" static="1">
			<f a="inWhatInfo">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_gc_mem_info"</e></m></meta>
		</memInfo>
		<allocateExtended public="1" params="T" set="method" static="1">
			<f a="cls:size">
				<x path="Class"><c path="allocateExtended.T"/></x>
				<x path="Int"/>
				<c path="allocateExtended.T"/>
			</f>
			<meta>
				<m n=":native"><e>"_hx_allocate_extended"</e></m>
				<m n=":templatedCall"/>
			</meta>
		</allocateExtended>
		<addFinalizable public="1" set="method" static="1">
			<f a="instance:inPin">
				<a><finalize set="method"><f a=""><x path="Void"/></f></finalize></a>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_add_finalizable"</e></m></meta>
		</addFinalizable>
		<allocGcBytesRaw public="1" set="method" static="1">
			<f a="inBytes:isContainer">
				<x path="Int"/>
				<x path="Bool"/>
				<c path="cpp.RawPointer"><c path="cpp.Void"/></c>
			</f>
			<meta><m n=":native"><e>"hx::InternalNew"</e></m></meta>
		</allocGcBytesRaw>
		<allocGcBytes public="1" get="inline" set="null" line="38" static="1"><f a="inBytes">
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="cpp.Void"/></c>
</f></allocGcBytes>
		<enable public="1" set="method" static="1">
			<f a="inEnable">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_enable"</e></m></meta>
		</enable>
		<run public="1" set="method" static="1">
			<f a="major">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_collect"</e></m></meta>
		</run>
		<compact public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":native"><e>"__hxcpp_gc_compact"</e></m></meta>
		</compact>
		<nativeTrace public="1" set="method" static="1">
			<f a="sought:printInstances">
				<x path="Class"><d/></x>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_gc_trace"</e></m></meta>
		</nativeTrace>
		<doNotKill public="1" set="method" static="1">
			<f a="inObject">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_gc_do_not_kill"</e></m></meta>
		</doNotKill>
		<getNextZombie public="1" set="method" static="1">
			<f a=""><d/></f>
			<meta><m n=":native"><e>"__hxcpp_get_next_zombie"</e></m></meta>
		</getNextZombie>
		<safePoint public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":native"><e>"__hxcpp_gc_safe_point"</e></m></meta>
		</safePoint>
		<enterGCFreeZone public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":native"><e>"__hxcpp_enter_gc_free_zone"</e></m></meta>
		</enterGCFreeZone>
		<exitGCFreeZone public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":native"><e>"__hxcpp_exit_gc_free_zone"</e></m></meta>
		</exitGCFreeZone>
		<setMinimumFreeSpace public="1" set="method" static="1">
			<f a="inBytes">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_set_minimum_free_space"</e></m></meta>
		</setMinimumFreeSpace>
		<setTargetFreeSpacePercentage public="1" set="method" static="1">
			<f a="inPercentage">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_set_target_free_space_percentage"</e></m></meta>
		</setTargetFreeSpacePercentage>
		<setMinimumWorkingMemory public="1" set="method" static="1">
			<f a="inBytes">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_set_minimum_working_memory"</e></m></meta>
		</setMinimumWorkingMemory>
	</class>
	<class path="cpp.NativeString" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/NativeString.hx" extern="1">
		<raw public="1" get="inline" set="null" line="26" static="1">
			<f a="inString">
				<c path="String"/>
				<c path="cpp.RawConstPointer"><x path="cpp.Char"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</raw>
		<c_str public="1" get="inline" set="null" line="29" static="1">
			<f a="inString">
				<c path="String"/>
				<c path="cpp.ConstPointer"><x path="cpp.Char"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</c_str>
		<fromPointer public="1" get="inline" set="null" line="32" static="1">
			<f a="inPtr">
				<c path="cpp.ConstPointer"><x path="cpp.Char"/></c>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</fromPointer>
		<fromGcPointer public="1" get="inline" set="null" line="35" static="1">
			<f a="inPtr:inLen">
				<c path="cpp.ConstPointer"><x path="cpp.Char"/></c>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</fromGcPointer>
		<compare public="1" set="method" static="1">
			<f a="inString0:inString1">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_string_compare"</e></m></meta>
		</compare>
		<utf8CharCodeAt public="1" set="method" static="1">
			<f a="inString:inIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_char_code_at"</e></m></meta>
		</utf8CharCodeAt>
		<utf8Length public="1" set="method" static="1">
			<f a="inString">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_length"</e></m></meta>
		</utf8Length>
		<utf8IsValid public="1" set="method" static="1">
			<f a="inString">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_is_valid"</e></m></meta>
		</utf8IsValid>
		<utf8Sub public="1" set="method" static="1">
			<f a="inString:charStart:inLen">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_sub"</e></m></meta>
		</utf8Sub>
		<fromPointerLen public="1" set="method" static="1">
			<f a="inPtr:len">
				<c path="cpp.ConstPointer"><x path="cpp.Char"/></c>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_string_create"</e></m></meta>
		</fromPointerLen>
		<utf8DecodeAdvance public="1" set="method" static="1">
			<f a="reference">
				<x path="cpp.Char"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_utf8_decode_advance"</e></m></meta>
		</utf8DecodeAdvance>
	</class>
	<class path="cpp.NativeSys" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/NativeSys.hx" extern="1">
		<print public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_print"</e></m></meta>
		</print>
		<println public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_println"</e></m></meta>
		</println>
		<get_env public="1" set="method" static="1">
			<f a="v">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_get_env"</e></m></meta>
		</get_env>
		<put_env public="1" set="method" static="1">
			<f a="e:v">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_put_env"</e></m></meta>
		</put_env>
		<sys_sleep public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_sleep"</e></m></meta>
		</sys_sleep>
		<set_time_locale public="1" set="method" static="1">
			<f a="l">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_set_time_locale"</e></m></meta>
		</set_time_locale>
		<get_cwd public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":native"><e>"_hx_std_get_cwd"</e></m></meta>
		</get_cwd>
		<set_cwd public="1" set="method" static="1">
			<f a="d">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_set_cwd"</e></m></meta>
		</set_cwd>
		<sys_string public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":native"><e>"_hx_std_sys_string"</e></m></meta>
		</sys_string>
		<sys_is64 public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":native"><e>"_hx_std_sys_is64"</e></m></meta>
		</sys_is64>
		<sys_command public="1" set="method" static="1">
			<f a="cmd">
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_command"</e></m></meta>
		</sys_command>
		<sys_exit public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_exit"</e></m></meta>
		</sys_exit>
		<sys_exists public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_exists"</e></m></meta>
		</sys_exists>
		<file_delete public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_delete"</e></m></meta>
		</file_delete>
		<sys_rename public="1" set="method" static="1">
			<f a="path:newname">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_rename"</e></m></meta>
		</sys_rename>
		<sys_stat public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_stat"</e></m></meta>
		</sys_stat>
		<sys_file_type public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_file_type"</e></m></meta>
		</sys_file_type>
		<sys_create_dir public="1" set="method" static="1">
			<f a="path:mode">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_create_dir"</e></m></meta>
		</sys_create_dir>
		<sys_remove_dir public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_remove_dir"</e></m></meta>
		</sys_remove_dir>
		<sys_time public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":native"><e>"_hx_std_sys_time"</e></m></meta>
		</sys_time>
		<sys_cpu_time public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":native"><e>"_hx_std_sys_cpu_time"</e></m></meta>
		</sys_cpu_time>
		<sys_read_dir public="1" set="method" static="1">
			<f a="p">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_read_dir"</e></m></meta>
		</sys_read_dir>
		<file_full_path public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_file_full_path"</e></m></meta>
		</file_full_path>
		<sys_exe_path public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":native"><e>"_hx_std_sys_exe_path"</e></m></meta>
		</sys_exe_path>
		<sys_env public="1" set="method" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<meta><m n=":native"><e>"_hx_std_sys_env"</e></m></meta>
		</sys_env>
		<sys_getch public="1" set="method" static="1">
			<f a="b">
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_std_sys_getch"</e></m></meta>
		</sys_getch>
		<sys_get_pid public="1" set="method" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":native"><e>"_hx_std_sys_get_pid"</e></m></meta>
		</sys_get_pid>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":buildXml"><e><![CDATA["<include name=\"${HXCPP}/src/hx/libs/std/Build.xml\"/>"]]></e></m>
		</meta>
	</class>
	<class path="cpp.ObjectType" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/ObjectType.hx" extern="1">
		<vtUnknown public="1" get="inline" set="null" expr="-1" line="26" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</vtUnknown>
		<vtInt public="1" get="inline" set="null" expr="0xff" line="27" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0xff</e></m></meta>
		</vtInt>
		<vtNull public="1" get="inline" set="null" expr="0" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</vtNull>
		<vtFloat public="1" get="inline" set="null" expr="1" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</vtFloat>
		<vtBool public="1" get="inline" set="null" expr="2" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</vtBool>
		<vtString public="1" get="inline" set="null" expr="3" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</vtString>
		<vtObject public="1" get="inline" set="null" expr="4" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</vtObject>
		<vtArray public="1" get="inline" set="null" expr="5" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</vtArray>
		<vtFunction public="1" get="inline" set="null" expr="6" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</vtFunction>
		<vtEnum public="1" get="inline" set="null" expr="7" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</vtEnum>
		<vtClass public="1" get="inline" set="null" expr="8" line="36" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</vtClass>
		<vtInt64 public="1" get="inline" set="null" expr="9" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</vtInt64>
		<vtAbstractBase public="1" get="inline" set="null" expr="0x100" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x100</e></m></meta>
		</vtAbstractBase>
	</class>
	<class path="cpp.Pointer" params="T" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/Pointer.hx" extern="1">
		<extends path="cpp.ConstPointer"><c path="cpp.Pointer.T"/></extends>
		<fromRaw public="1" params="T" set="method" static="1"><f a="ptr">
	<c path="cpp.RawPointer"><c path="fromRaw.T"/></c>
	<c path="cpp.Pointer"><c path="fromRaw.T"/></c>
</f></fromRaw>
		<fromStar public="1" params="T" set="method" static="1">
			<f a="star">
				<t path="cpp.Star"><c path="fromStar.T"/></t>
				<c path="cpp.Pointer"><c path="fromStar.T"/></c>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::fromRaw"</e></m></meta>
		</fromStar>
		<nativeFromHandle public="1" params="T" set="method" static="1">
			<f a="inHandle:?inKind">
				<d/>
				<c path="String"/>
				<c path="cpp.AutoCast"/>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::fromHandle"</e></m></meta>
		</nativeFromHandle>
		<fromHandle public="1" params="T" get="inline" set="null" line="44" static="1"><f a="inHandle:?inKind">
	<d/>
	<c path="String"/>
	<c path="cpp.Pointer"><c path="fromHandle.T"/></c>
</f></fromHandle>
		<fromPointer public="1" params="T" set="method" static="1"><f a="inNativePointer">
	<d/>
	<c path="cpp.Pointer"><c path="fromPointer.T"/></c>
</f></fromPointer>
		<addressOf public="1" params="T" set="method" static="1"><f a="inVariable">
	<t path="cpp.Reference"><c path="addressOf.T"/></t>
	<c path="cpp.Pointer"><c path="addressOf.T"/></c>
</f></addressOf>
		<endOf public="1" params="T" set="method" static="1"><f a="inVariable">
	<c path="endOf.T"/>
	<c path="cpp.Pointer"><c path="cpp.Void"/></c>
</f></endOf>
		<nativeArrayElem public="1" params="T" set="method" static="1">
			<f a="array:inElem">
				<c path="Array"><c path="nativeArrayElem.T"/></c>
				<x path="Int"/>
				<c path="cpp.AutoCast"/>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::arrayElem"</e></m></meta>
		</nativeArrayElem>
		<arrayElem public="1" params="T" get="inline" set="null" line="56" static="1"><f a="array:inElem">
	<c path="Array"><c path="arrayElem.T"/></c>
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="arrayElem.T"/></c>
</f></arrayElem>
		<nativeOfArray public="1" params="T" set="method" static="1">
			<f a="array">
				<c path="Array"><c path="nativeOfArray.T"/></c>
				<c path="cpp.AutoCast"/>
			</f>
			<meta><m n=":native"><e>"::cpp::Pointer_obj::ofArray"</e></m></meta>
		</nativeOfArray>
		<ofArray public="1" params="T" get="inline" set="null" line="62" static="1"><f a="array">
	<c path="Array"><c path="ofArray.T"/></c>
	<c path="cpp.Pointer"><c path="ofArray.T"/></c>
</f></ofArray>
		<ref public="1" get="accessor" set="accessor"><t path="cpp.Reference"><c path="cpp.Pointer.T"/></t></ref>
		<get_ref public="1" set="method"><f a=""><t path="cpp.Reference"><c path="cpp.Pointer.T"/></t></f></get_ref>
		<set_ref public="1" set="method"><f a="t">
	<c path="cpp.Pointer.T"/>
	<t path="cpp.Reference"><c path="cpp.Pointer.T"/></t>
</f></set_ref>
		<setAt public="1" set="method"><f a="inIndex:value">
	<x path="Int"/>
	<c path="cpp.Pointer.T"/>
	<x path="Void"/>
</f></setAt>
		<toUnmanagedArray public="1" get="inline" set="null" line="66"><f a="elementCount">
	<x path="Int"/>
	<c path="Array"><c path="cpp.Pointer.T"/></c>
</f></toUnmanagedArray>
		<toUnmanagedVector public="1" get="inline" set="null" line="72"><f a="elementCount">
	<x path="Int"/>
	<x path="haxe.ds.Vector"><c path="cpp.Pointer.T"/></x>
</f></toUnmanagedVector>
		<inc public="1" set="method" override="1"><f a=""><c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c></f></inc>
		<dec public="1" set="method" override="1"><f a=""><c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c></f></dec>
		<incBy public="1" set="method" override="1"><f a="inT">
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c>
</f></incBy>
		<decBy public="1" set="method" override="1"><f a="inT">
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c>
</f></decBy>
		<add public="1" set="method" override="1"><f a="inT">
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c>
</f></add>
		<sub public="1" set="method" override="1"><f a="inT">
	<x path="Int"/>
	<c path="cpp.Pointer"><c path="cpp.Pointer.T"/></c>
</f></sub>
		<postIncRef public="1" set="method"><f a=""><t path="cpp.Reference"><c path="cpp.Pointer.T"/></t></f></postIncRef>
		<destroy public="1" set="method"><f a=""><x path="Void"/></f></destroy>
		<destroyArray public="1" set="method"><f a=""><x path="Void"/></f></destroyArray>
		<meta>
			<m n=":coreType"/>
			<m n=":semantics"><e>variable</e></m>
		</meta>
	</class>
	<class path="cpp.RawConstPointer" params="T" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/RawConstPointer.hx" extern="1">
		<addressOf public="1" params="T" set="method" static="1">
			<f a="t">
				<c path="addressOf.T"/>
				<c path="cpp.RawConstPointer"><c path="addressOf.T"/></c>
			</f>
			<meta><m n=":native"><e>"hx::AddressOf"</e></m></meta>
		</addressOf>
		<meta><m n=":unreflective"/></meta>
	</class>
	<class path="cpp.RawPointer" params="T" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/RawPointer.hx" extern="1">
		<extends path="cpp.RawConstPointer"><c path="cpp.RawPointer.T"/></extends>
		<addressOf public="1" params="T" set="method" static="1">
			<f a="t">
				<c path="addressOf.T"/>
				<c path="cpp.RawPointer"><c path="addressOf.T"/></c>
			</f>
			<meta><m n=":native"><e>"hx::AddressOf"</e></m></meta>
		</addressOf>
		<meta><m n=":unreflective"/></meta>
	</class>
	<typedef path="cpp.Reference" params="T" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/Reference.hx">
		<c path="cpp.Reference.T"/>
		<haxe_doc>Allows haxe to type result correctly, and hxcpp can recognise this and
	prevent unwanted casting.</haxe_doc>
		<meta><m n=":semantics"><e>reference</e></m></meta>
	</typedef>
	<typedef path="cpp.Star" params="T" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/Star.hx">
		<x path="Null"><c path="cpp.Star.T"/></x>
		<haxe_doc>Allows haxe to type result correctly, and hxcpp can recognise this use the
	correct type.</haxe_doc>
	</typedef>
	<abstract path="cpp.UInt64" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/UInt64.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="cpp.UInt64"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="cpp.UInt8" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/UInt8.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="cpp.UInt8"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="cpp.Void" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/Void.hx" extern="1"><meta><m n=":native"><e>"void"</e></m></meta></class>
	<class path="cpp.abi.Abi" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/abi/Abi.hx" extern="1"/>
	<class path="cpp.vm.Gc" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/vm/Gc.hx">
		<setFinalizer public="1" params="T" set="method" static="1">
			<f a="inObject:inFinalizer">
				<c path="setFinalizer.T"/>
				<x path="cpp.Callable"><f a="">
	<c path="setFinalizer.T"/>
	<x path="Void"/>
</f></x>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"__hxcpp_set_finalizer"</e></m></meta>
		</setFinalizer>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.Function" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Constructible" params="T" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.IMap" params="K:V" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/Constraints.hx" module="haxe.Constraints" interface="1"><meta><m n=":keep"/></meta></class>
	<class path="haxe.EnumTools" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		
			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="133" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="144" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="158" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="170" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<abstract path="haxe.Int32" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
	all platforms.</haxe_doc>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/Int32.hx" private="1" module="haxe.Int32"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe._Int64.___Int64" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/_std/haxe/Int64.hx" private="1" module="haxe.Int64" extern="1">
		<make public="1" set="method" static="1">
			<f a="high:low">
				<x path="haxe.Int32"/>
				<x path="haxe.Int32"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_make"</e></m></meta>
		</make>
		<ofInt public="1" set="method" static="1">
			<f a="value">
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>" ::cpp::Int64Struct"</e></m></meta>
		</ofInt>
		<is public="1" set="method" static="1">
			<f a="d">
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>" ::cpp::Int64Struct::is"</e></m></meta>
		</is>
		<isNeg public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_is_neg"</e></m></meta>
		</isNeg>
		<isZero public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_is_zero"</e></m></meta>
		</isZero>
		<compare public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_compare"</e></m></meta>
		</compare>
		<ucompare public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_ucompare"</e></m></meta>
		</ucompare>
		<toString public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<c path="String"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_to_string"</e></m></meta>
		</toString>
		<neg public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_neg"</e></m></meta>
		</neg>
		<preIncrement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_pre_increment"</e></m></meta>
		</preIncrement>
		<postIncrement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_post_increment"</e></m></meta>
		</postIncrement>
		<preDecrement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_pre_decrement"</e></m></meta>
		</preDecrement>
		<postDecrement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_post_decrement"</e></m></meta>
		</postDecrement>
		<add public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_add"</e></m></meta>
		</add>
		<addInt public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_add"</e></m></meta>
		</addInt>
		<sub public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_sub"</e></m></meta>
		</sub>
		<subInt public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_sub"</e></m></meta>
		</subInt>
		<intSub public="1" set="method" static="1">
			<f a="a:b">
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_sub"</e></m></meta>
		</intSub>
		<mul public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_mul"</e></m></meta>
		</mul>
		<div public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_div"</e></m></meta>
		</div>
		<mod public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_mod"</e></m></meta>
		</mod>
		<eq public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_eq"</e></m></meta>
		</eq>
		<eqInt public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_eq"</e></m></meta>
		</eqInt>
		<neq public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_neq"</e></m></meta>
		</neq>
		<neqInt public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_neq"</e></m></meta>
		</neqInt>
		<complement public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_complement"</e></m></meta>
		</complement>
		<bitAnd public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_and"</e></m></meta>
		</bitAnd>
		<bitOr public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_or"</e></m></meta>
		</bitOr>
		<bitXor public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_xor"</e></m></meta>
		</bitXor>
		<shl public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_shl"</e></m></meta>
		</shl>
		<shr public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_shr"</e></m></meta>
		</shr>
		<ushr public="1" set="method" static="1">
			<f a="a:b">
				<t path="haxe._Int64.__Int64"/>
				<x path="Int"/>
				<t path="haxe._Int64.__Int64"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_ushr"</e></m></meta>
		</ushr>
		<high public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_high"</e></m></meta>
		</high>
		<low public="1" set="method" static="1">
			<f a="a">
				<t path="haxe._Int64.__Int64"/>
				<x path="haxe.Int32"/>
			</f>
			<meta><m n=":native"><e>"_hx_int64_low"</e></m></meta>
		</low>
		<get public="1" set="method"><f a=""><x path="cpp.Int64"/></f></get>
		<meta>
			<m n=":notNull"/>
			<m n=":include"><e>"cpp/Int64.h"</e></m>
			<m n=":native"><e>"cpp::Int64Struct"</e></m>
		</meta>
	</class>
	<typedef path="haxe._Int64.__Int64" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/_std/haxe/Int64.hx" private="1" module="haxe.Int64"><c path="haxe._Int64.___Int64"/></typedef>
	<abstract path="haxe.Int64" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/_std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/_std/haxe/Int64.hx" private="1" module="haxe.Int64">
	<high public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</high>
	<low public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</low>
	<meta>
		<m n=":keep"/>
		<m n=":coreApi"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.Log" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/_std/haxe/Log.hx">
		<nativeTrace set="method" static="1">
			<f a="message:posInfo">
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":native"><e>"__trace"</e></m></meta>
		</nativeTrace>
		<trace public="1" set="dynamic" line="29" static="1">
			<f a="v:?infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the `trace()` call was made.

		This method can be rebound to a custom function:

			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v, ?infos) {
			  // handle trace
			}
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to `trace()` will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the `trace()` method, which is invoked upon a call to
	`trace()` in Haxe code.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<x path="Null"><c path="Array"><d/></c></x>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>`PosInfos` is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	`(..., ?pos:haxe.PosInfos)`, each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.Timer" params="" file="C:\HaxeLibraries\Kha\Sources/haxe/Timer.hx">
		<delay public="1" set="method" line="117" static="1">
			<f a="f:time_ms">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<c path="haxe.Timer"/>
			</f>
			<haxe_doc>Invokes `f` after `time_ms` milliseconds.

		This is a convenience function for creating a new Timer instance with
		`time_ms` as argument, binding its run() method to `f` and then stopping
		`this` Timer upon the first invocation.

		If `f` is null, the result is unspecified.</haxe_doc>
		</delay>
		<measure public="1" params="T" set="method" line="137" static="1">
			<f a="f:?pos">
				<f a=""><c path="measure.T"/></f>
				<t path="haxe.PosInfos"/>
				<c path="measure.T"/>
			</f>
			<haxe_doc>Measures the time it takes to execute `f`, in seconds with fractions.

		This is a convenience function for calculating the difference between
		Timer.stamp() before and after the invocation of `f`.

		The difference is passed as argument to Log.trace(), with "s" appended
		to denote the unit. The optional `pos` argument is passed through.

		If `f` is null, the result is unspecified.</haxe_doc>
		</measure>
		<stamp public="1" get="inline" set="null" line="150" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a timestamp, in seconds with fractions.

		The value itself might differ depending on platforms, only differences
		between two values make sense.</haxe_doc>
		</stamp>
		<id><x path="Null"><x path="Int"/></x></id>
		<stop public="1" set="method" line="79">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops `this` Timer.

		After calling this method, no additional invocations of `this.run`
		will occur.

		It is not possible to restart `this` Timer once stopped.</haxe_doc>
		</stop>
		<run public="1" set="dynamic" line="104">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This method is invoked repeatedly on `this` Timer.

		It can be overridden in a subclass, or rebound directly to a custom
		function:
			var timer = new haxe.Timer(1000); // 1000ms delay
			timer.run = function() { ... }

		Once bound, it can still be rebound to different functions until `this`
		Timer is stopped through a call to `this.stop`.</haxe_doc>
		</run>
		<new public="1" set="method" line="57">
			<f a="time_ms">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new timer that will run every `time_ms` milliseconds.

		After creating the Timer instance, it calls `this.run` repeatedly,
		with delays of `time_ms` milliseconds, until `this.stop` is called.

		The first invocation occurs after `time_ms` milliseconds, not
		immediately.

		The accuracy of this may be platform-dependent.</haxe_doc>
		</new>
		<haxe_doc>The Timer class allows you to create asynchronous timers on platforms that
	support events.

	The intended usage is to create an instance of the Timer class with a given
	interval, set its run() method to a custom function to be invoked and
	eventually call stop() to stop the Timer.

	Note that a running Timer may or may not prevent the program to exit
	automatically when main() returns.

	It is also possible to extend this class and override its run() method in
	the child class.</haxe_doc>
	</class>
	<class path="haxe._Unserializer.DefaultResolver" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/Unserializer.hx" private="1" module="haxe.Unserializer">
		<resolveClass public="1" get="inline" set="null" line="476"><f a="name">
	<c path="String"/>
	<x path="Class"><d/></x>
</f></resolveClass>
		<resolveEnum public="1" get="inline" set="null" line="479"><f a="name">
	<c path="String"/>
	<x path="Enum"><d/></x>
</f></resolveEnum>
		<new public="1" set="method" line="474"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.Unserializer" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/Unserializer.hx">
		<DEFAULT_RESOLVER public="1" expr="new DefaultResolver()" line="65" static="1">
			<t path="haxe.TypeResolver"/>
			<meta><m n=":value"><e>new DefaultResolver()</e></m></meta>
			<haxe_doc><![CDATA[This value can be set to use custom type resolvers.

		A type resolver finds a `Class` or `Enum` instance from a given `String`.
		By default, the Haxe `Type` Api is used.

		A type resolver must provide two methods:

		1. `resolveClass(name:String):Class<Dynamic>` is called to determine a
				`Class` from a class name
		2. `resolveEnum(name:String):Enum<Dynamic>` is called to determine an
				`Enum` from an enum name

		This value is applied when a new `Unserializer` instance is created.
		Changing it afterwards has no effect on previously created instances.]]></haxe_doc>
		</DEFAULT_RESOLVER>
		<BASE64 expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:&quot;" line="67" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"</e></m></meta>
		</BASE64>
		<CODES expr="null" line="70" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>null</e></m></meta>
		</CODES>
		<initCodes set="method" line="72" static="1"><f a=""><c path="Array"><x path="Int"/></c></f></initCodes>
		<run public="1" set="method" line="464" static="1">
			<f a="v">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Unserializes `v` and returns the according value.

		This is a convenience function for creating a new instance of
		Unserializer with `v` as buffer and calling its `unserialize()` method
		once.</haxe_doc>
		</run>
		<buf><c path="String"/></buf>
		<pos><x path="Int"/></pos>
		<length><x path="Int"/></length>
		<cache><c path="Array"><d/></c></cache>
		<scache><c path="Array"><c path="String"/></c></scache>
		<resolver><t path="haxe.TypeResolver"/></resolver>
		<readDigits set="method" line="144"><f a=""><x path="Int"/></f></readDigits>
		<readFloat set="method" line="169"><f a=""><x path="Float"/></f></readFloat>
		<unserializeObject set="method" line="184"><f a="o">
	<a/>
	<x path="Void"/>
</f></unserializeObject>
		<unserializeEnum params="T" set="method" line="199"><f a="edecl:tag">
	<x path="Enum"><c path="unserializeEnum.T"/></x>
	<c path="String"/>
	<c path="unserializeEnum.T"/>
</f></unserializeEnum>
		<unserialize public="1" set="method" line="231">
			<f a=""><d/></f>
			<haxe_doc>Unserializes the next part of `this` Unserializer instance and returns
		the according value.

		This function may call `this.resolver.resolveClass` to determine a
		Class from a String, and `this.resolver.resolveEnum` to determine an
		Enum from a String.

		If `this` Unserializer instance contains no more or invalid data, an
		exception is thrown.

		This operation may fail on structurally valid data if a type cannot be
		resolved or if a field cannot be set. This can happen when unserializing
		Strings that were serialized on a different Haxe target, in which the
		serialization side has to make sure not to include platform-specific
		data.

		Classes are created from `Type.createEmptyInstance`, which means their
		constructors are not called.</haxe_doc>
		</unserialize>
		<new public="1" set="method" line="99">
			<f a="buf">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Unserializer instance, with its internal buffer
		initialized to `buf`.

		This does not parse `buf` immediately. It is parsed only when calls to
		`this.unserialize` are made.

		Each Unserializer instance maintains its own cache.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Unserializer` class is the complement to the `Serializer` class. It parses
	a serialization `String` and creates objects from the contained data.

	This class can be used in two ways:

	- create a `new Unserializer()` instance with a given serialization
		String, then call its `unserialize()` method until all values are
		extracted
	- call `Unserializer.run()`  to unserialize a single value from a given
		String

	The specification of the serialization format can be found here:
	<https://haxe.org/manual/serialization/format>]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<haxe_doc>HashMap allows mapping of hashable objects to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.IntMap" params="T" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/_std/haxe/ds/IntMap.hx">
		<implements path="haxe.IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<h>
			<d/>
			<meta><m n=":ifFeature"><e>"haxe.ds.IntMap.*"</e></m></meta>
		</h>
		<set public="1" set="method" line="60">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method" line="64">
			<f a="key">
				<x path="Int"/>
				<x path="Null"><c path="haxe.ds.IntMap.T"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method" line="68">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<iterator public="1" set="method" line="81">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<new public="1" set="method" line="58">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":headerClassCode"><e><![CDATA["\r\n  inline void set(int key, ::null value) { __int_hash_set(HX_MAP_THIS,key,value); }\r\n  inline void set(int key, bool value) { __int_hash_set(HX_MAP_THIS,key,value); }\r\n  inline void set(int key, char value) { __int_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(int key, unsigned char value) { __int_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(int key, signed char value) { __int_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(int key, short value) { __int_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(int key, unsigned short value) { __int_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(int key, int value) { __int_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(int key, unsigned int value) { __int_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(int key, float value) { __int_hash_set_float(HX_MAP_THIS,key,value); }\r\n  inline void set(int key, double value) { __int_hash_set_float(HX_MAP_THIS,key,value); }\r\n  inline void set(int key, ::String value) { __int_hash_set_string(HX_MAP_THIS,key,value); }\r\n\r\n  template<typename V, typename H>\r\n  inline void set(int key, const ::cpp::Struct<V,H> &value) {__int_hash_set(HX_MAP_THIS,key,value); }\r\n  template<typename F>\r\n  inline void set(int key, const ::cpp::Function<F> &value) {__int_hash_set(HX_MAP_THIS,key,value); }\r\n  template<typename V>\r\n  inline void set(int key, const ::cpp::Pointer<V> &value) {__int_hash_set(HX_MAP_THIS,key,(Dynamic)value ); }\r\n\r\n  template<typename VALUE>\r\n  inline void set(Dynamic &key, const VALUE &value) { set( (int)key, value ); }\r\n\r\n  inline bool get_bool(int key) { return __int_hash_get_bool(h,key); }\r\n  inline int get_int(int key) { return __int_hash_get_int(h,key); }\r\n  inline Float get_float(int key) { return __int_hash_get_float(h,key); }\r\n  inline String get_string(int key) { return __int_hash_get_string(h,key); }\r\n"]]></e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.ds.List" params="T" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/ds/List.hx">
		<h><c path="haxe.ds._List.ListNode"><c path="haxe.ds.List.T"/></c></h>
		<q><c path="haxe.ds._List.ListNode"><c path="haxe.ds.List.T"/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<add public="1" set="method" line="53">
			<f a="item">
				<c path="haxe.ds.List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the end of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</add>
		<new public="1" set="method" line="44">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of element container objects
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole list content every time.

	@see https://haxe.org/manual/std-List.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.ds._List.ListNode" params="T" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<item public="1"><c path="haxe.ds._List.ListNode.T"/></item>
		<next public="1"><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c></next>
		<new public="1" set="method" line="266"><f a="item:next">
	<c path="haxe.ds._List.ListNode.T"/>
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.ds.Map" params="K:V" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/ds/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="haxe.IMap">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `[key1 => value1, key2 => value2]` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta><m n=":multiType"><e>@:followWithAbstracts K</e></m></meta>
		<impl><class path="haxe.ds._Map.Map_Impl_" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.ObjectMap" params="K:V" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/_std/haxe/ds/ObjectMap.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<h>
			<d/>
			<meta><m n=":ifFeature"><e>"haxe.ds.ObjectMap.*"</e></m></meta>
		</h>
		<set public="1" set="method" line="60">
			<f a="key:value">
				<c path="haxe.ds.ObjectMap.K"/>
				<c path="haxe.ds.ObjectMap.V"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method" line="64">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Null"><c path="haxe.ds.ObjectMap.V"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<new public="1" set="method" line="58">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":headerClassCode"><e><![CDATA["\r\n  inline void set(Dynamic key, ::null value) { __object_hash_set(HX_MAP_THIS,key,value); }\r\n  inline void set(Dynamic key, bool value) { __object_hash_set(HX_MAP_THIS,key,value); }\r\n  inline void set(Dynamic key, char value) { __object_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(Dynamic key, unsigned char value) { __object_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(Dynamic key, signed char value) { __object_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(Dynamic key, short value) { __object_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(Dynamic key, unsigned short value) { __object_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(Dynamic key, int value) { __object_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(Dynamic key, unsigned int value) { __object_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(Dynamic key, float value) { __object_hash_set_float(HX_MAP_THIS,key,value); }\r\n  inline void set(Dynamic key, double value) { __object_hash_set_float(HX_MAP_THIS,key,value); }\r\n  inline void set(Dynamic key, ::String value) { __object_hash_set_string(HX_MAP_THIS,key,value); }\r\n\r\n\r\n  template<typename V, typename H>\r\n  inline void set(Dynamic key, const ::cpp::Struct<V,H> &value) {__object_hash_set(HX_MAP_THIS,key,value); }\r\n  template<typename V>\r\n  inline void set(Dynamic key, const ::cpp::Function<V> &value) {__object_hash_set(HX_MAP_THIS,key,(Dynamic)value ); }\r\n  template<typename V>\r\n  inline void set(Dynamic key, const ::cpp::Pointer<V> &value) {__object_hash_set(HX_MAP_THIS,key,(Dynamic)value ); }\r\n\r\n  inline bool get_bool(Dynamic key) { return __object_hash_get_bool(h,key); }\r\n  inline int get_int(Dynamic key) { return __object_hash_get_int(h,key); }\r\n  inline Float get_float(Dynamic key) { return __object_hash_get_float(h,key); }\r\n  inline String get_string(Dynamic key) { return __object_hash_get_string(h,key); }\r\n\r\n"]]></e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>concat</e>
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The length of `this` Array.</haxe_doc>
	</length>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds.StringMap" params="T" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/_std/haxe/ds/StringMap.hx">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<h>
			<d/>
			<meta><m n=":ifFeature"><e>"haxe.ds.StringMap.*"</e></m></meta>
		</h>
		<set public="1" set="method" line="60">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method" line="64">
			<f a="key">
				<c path="String"/>
				<x path="Null"><c path="haxe.ds.StringMap.T"/></x>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method" line="68">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<new public="1" set="method" line="58">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":headerClassCode"><e><![CDATA["\r\n  inline void set(String key, ::null value) { __string_hash_set(HX_MAP_THIS,key,value); }\r\n  inline void set(String key, bool value) { __string_hash_set(HX_MAP_THIS,key,value); }\r\n  inline void set(String key, char value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(String key, unsigned char value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(String key, signed char value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(String key, short value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(String key, unsigned short value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(String key, int value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(String key, unsigned int value) { __string_hash_set_int(HX_MAP_THIS,key,value); }\r\n  inline void set(String key, float value) { __string_hash_set_float(HX_MAP_THIS,key,value); }\r\n  inline void set(String key, double value) { __string_hash_set_float(HX_MAP_THIS,key,value); }\r\n  inline void set(String key, ::String value) { __string_hash_set_string(HX_MAP_THIS,key,value); }\r\n\r\n  template<typename V, typename H>\r\n  inline void set(String key, const ::cpp::Struct<V,H> &value) {__string_hash_set(HX_MAP_THIS,key,value); }\r\n  template<typename V>\r\n  inline void set(String key, const ::cpp::Function<V> &value) {__string_hash_set(HX_MAP_THIS,key,(Dynamic)value ); }\r\n  template<typename V>\r\n  inline void set(String key, const ::cpp::Pointer<V> &value) {__string_hash_set(HX_MAP_THIS,key,(Dynamic)value ); }\r\n\r\n  template<typename VALUE>\r\n  inline void set(Dynamic &key, const VALUE &value) { set( (String)key, value ); }\r\n\r\n  inline bool get_bool(String key) { return __string_hash_get_bool(h,key); }\r\n  inline int get_int(String key) { return __string_hash_get_int(h,key); }\r\n  inline Float get_float(String key) { return __string_hash_get_float(h,key); }\r\n  inline String get_string(String key) { return __string_hash_get_string(h,key); }\r\n"]]></e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="Array"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.

	@see https://haxe.org/manual/std-vector.html</haxe_doc>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
	</length>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<abstract path="haxe.extern.AsVar" params="T" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/extern/AsVar.hx">
		<from><icast><c path="haxe.extern.AsVar.T"/></icast></from>
		<this><c path="haxe.extern.AsVar.T"/></this>
		<to><icast><c path="haxe.extern.AsVar.T"/></icast></to>
		<haxe_doc>If this type is used as an argument type, the compiler ensures that
	argument expressions are bound to a local variable.</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":semantics"><e>variable</e></m>
		</meta>
		<impl><class path="haxe.extern._AsVar.AsVar_Impl_" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/extern/AsVar.hx" private="1" module="haxe.extern.AsVar"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.io.Bytes" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="549" static="1">
			<f a="length">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns a new `Bytes` instance with the given `length`. The values of the
		bytes are not initialized and may not be zero.</haxe_doc>
		</alloc>
		<ofString public="1" set="method" line="580" static="1">
			<f a="s:?encoding">
				<c path="String"/>
				<e path="haxe.io.Encoding"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the `Bytes` representation of the given `String`, using the
		specified encoding (UTF-8 by default).</haxe_doc>
		</ofString>
		<ofData public="1" set="method" line="656" static="1">
			<f a="b">
				<t path="haxe.io.BytesData"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns the `Bytes` representation of the given `BytesData`.</haxe_doc>
		</ofData>
		<length public="1" set="null"><x path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<blit public="1" set="method" line="90">
			<f a="pos:src:srcpos:len">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies `len` bytes from `src` into this instance.
		@param pos Zero-based location in `this` instance at which to start writing
			bytes.
		@param src Source `Bytes` instance from which to copy bytes.
		@param srcpos Zero-based location at `src` from which bytes will be copied.
		@param len Number of bytes to be copied.</haxe_doc>
		</blit>
		<sub public="1" set="method" line="155">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns a new `Bytes` instance that contains a copy of `len` bytes of
		`this` instance, starting at index `pos`.</haxe_doc>
		</sub>
		<setDouble public="1" set="method" line="292">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Stores the given IEEE double-precision value `v` at the given position
		`pos` in little-endian encoding. Result is unspecified if writing outside
		of bounds.</haxe_doc>
		</setDouble>
		<setFloat public="1" set="method" line="319">
			<f a="pos:v">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Stores the given IEEE single-precision value `v` at the given position
		`pos` in little-endian encoding. Result is unspecified if writing outside
		of bounds.</haxe_doc>
		</setFloat>
		<getString public="1" set="method" line="415">
			<f a="pos:len:?encoding">
				<x path="Int"/>
				<x path="Int"/>
				<e path="haxe.io.Encoding"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the `len`-bytes long string stored at the given position `pos`,
		interpreted with the given `encoding` (UTF-8 by default).</haxe_doc>
		</getString>
		<toString public="1" set="method" line="502">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a `String` representation of the bytes interpreted as UTF-8.</haxe_doc>
		</toString>
		<new set="method" line="34"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.io.BytesBuffer" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/io/BytesBuffer.hx">
		<b><t path="haxe.io.BytesData"/></b>
		<length public="1" get="null" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the buffer in bytes.</haxe_doc>
		</length>
		<getBytes public="1" set="method" line="201">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns either a copy or a reference of the current bytes.
		Once called, the buffer should no longer be used.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="45"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/io/BytesData.hx"><c path="Array"><x path="cpp.UInt8"/></c></typedef>
	<class path="haxe.io.Input" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/io/Input.hx">
		<bigEndian public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when reading numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<readByte public="1" set="method" line="49">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read and return one byte.</haxe_doc>
		</readByte>
		<readBytes public="1" set="method" line="64">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Returns the actual length of read data that can be smaller than `len`.

		See `readFullBytes` that tries to read the exact amount of specified bytes.</haxe_doc>
		</readBytes>
		<readFullBytes public="1" set="method" line="132">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Unlike `readBytes`, this method tries to read the exact `len` amount of bytes.</haxe_doc>
		</readFullBytes>
		<read public="1" set="method" line="145">
			<f a="nbytes">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return `nbytes` bytes.</haxe_doc>
		</read>
		<readInt32 public="1" set="method" line="281">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt32>
		<readString public="1" set="method" line="304">
			<f a="len:?encoding">
				<x path="Int"/>
				<e path="haxe.io.Encoding"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read and `len` bytes as a string.</haxe_doc>
		</readString>
		<haxe_doc>An Input is an abstract reader. See other classes in the `haxe.io` package
	for several possible implementations.

	All functions which read data throw `Eof` when the end of the stream
	is reached.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.BytesInput" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/io/BytesInput.hx">
		<extends path="haxe.io.Input"/>
		<b><t path="haxe.io.BytesData"/></b>
		<pos><x path="Int"/></pos>
		<len><x path="Int"/></len>
		<totlen><x path="Int"/></totlen>
		<position public="1" get="null" set="accessor">
			<x path="Int"/>
			<haxe_doc>The current position in the stream in bytes.</haxe_doc>
		</position>
		<length public="1" get="null" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<set_position set="method" line="83"><f a="p">
	<x path="Int"/>
	<x path="Int"/>
</f></set_position>
		<readByte public="1" set="method" line="96" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
		</readByte>
		<readBytes public="1" set="method" line="119" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="39"><f a="b:?pos:?len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.io.Output" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/io/Output.hx">
		<bigEndian public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when writing numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<writeByte public="1" set="method" line="46">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write one byte.</haxe_doc>
		</writeByte>
		<writeBytes public="1" set="method" line="57">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Returns the actual length of written data that can differ from `len`.

		See `writeFullBytes` that tries to write the exact amount of specified bytes.</haxe_doc>
		</writeBytes>
		<write public="1" set="method" line="103">
			<f a="s">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write all bytes stored in `s`.</haxe_doc>
		</write>
		<writeFloat public="1" set="method" line="133">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeFloat>
		<writeInt32 public="1" set="method" line="225">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt32>
		<haxe_doc>An Output is an abstract write. A specific output implementation will only
	have to override the `writeByte` and maybe the `write`, `flush` and `close`
	methods. See `File.write` and `String.write` for two ways of creating an
	Output.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.BytesOutput" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/io/BytesOutput.hx">
		<extends path="haxe.io.Output"/>
		<b><c path="haxe.io.BytesBuffer"/></b>
		<length public="1" get="null" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<writeByte public="1" set="method" line="51" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="59" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<getBytes public="1" set="method" line="137">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>Returns the `Bytes` of this output.

		This function should not be called more than once on a given
		`BytesOutput` instance.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<enum path="haxe.io.Encoding" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/io/Encoding.hx">
		<UTF8/>
		<RawNative><haxe_doc>Output the string the way the platform represent it in memory. This is the most efficient but is platform-specific</haxe_doc></RawNative>
		<haxe_doc>String binary encoding supported by Haxe I/O</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="haxe.io.Eof" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/io/Eof.hx">
		<toString set="method" line="32">
			<f a=""><c path="String"/></f>
			<meta><m n=":ifFeature"><e>"haxe.io.Eof.*"</e></m></meta>
		</toString>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This exception is raised when reading while data is no longer available in the `haxe.io.Input`.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<enum path="haxe.io.Error" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="haxe.io.FPHelper" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/io/FPHelper.hx">
		<floatToI32 public="1" set="method" line="177" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</floatToI32>
		<haxe_doc>Helper that converts between floating point and binary representation.
	Always works in low-endian encoding.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.io.Path" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/io/Path.hx">
		<addTrailingSlash public="1" set="method" line="271" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Adds a trailing slash to `path`, if it does not have one already.

		If the last slash in `path` is a backslash, a backslash is appended to
		`path`.

		If the last slash in `path` is a slash, or if no slash is found, a slash
		is appended to `path`. In particular, this applies to the empty String
		`""`.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</addTrailingSlash>
		<removeTrailingSlashes public="1" set="method" line="299" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing slashes from `path`.

		If `path` does not end with a `/` or `\`, `path` is returned unchanged.

		Otherwise the substring of `path` excluding the trailing slashes or
		backslashes is returned.

		If `path` is `null`, the result is unspecified.</haxe_doc>
		</removeTrailingSlashes>
		<haxe_doc>This class provides a convenient way of working with paths. It supports the
	common path formats:

	- `directory1/directory2/filename.extension`
	- `directory1\directory2\filename.extension`</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="haxe.macro.Position" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<min>
				<x path="Int"/>
				<haxe_doc>Position of the first character.</haxe_doc>
			</min>
			<max>
				<x path="Int"/>
				<haxe_doc>Position of the last character.</haxe_doc>
			</max>
			<file>
				<c path="String"/>
				<haxe_doc>Reference to the filename.</haxe_doc>
			</file>
		</a>
		<haxe_doc>Represents a position in a file.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Expr" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Expr.hx">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.ExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a node in the AST.
	@see https://haxe.org/manual/macro-reification-expression.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<t path="haxe.macro.Expr"/>
		<haxe_doc>Represents a AST node identical to `Expr`, but it allows constraining the
	type of accepted expressions.
	@see https://haxe.org/manual/macro-ExprOf.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Case" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<values>
				<c path="Array"><t path="haxe.macro.Expr"/></c>
				<haxe_doc>The value expressions of the case.</haxe_doc>
			</values>
			<guard>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional guard expressions of the case, if available.</haxe_doc>
			</guard>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<haxe_doc>The expression of the case, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a switch case.
	@see https://haxe.org/manual/expression-switch.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Var" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<haxe_doc>The type-hint of the variable, if available.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<isFinal>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the variable can be assigned to.</haxe_doc>
			</isFinal>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<haxe_doc>The expression of the variable, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a variable in the AST.
	@see https://haxe.org/manual/expression-var.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Catch" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<e path="haxe.macro.ComplexType"/>
				<haxe_doc>The type of the catch.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the catch variable.</haxe_doc>
			</name>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The expression of the catch.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a catch in the AST.
	@https://haxe.org/manual/expression-try-catch.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ObjectField" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<quotes>
				<x path="Null"><e path="haxe.macro.QuoteStatus"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>How the field name is quoted.</haxe_doc>
			</quotes>
			<field>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</field>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The field expression.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents the field of an object declaration.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypePath" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<sub>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sub is set on module sub-type access:
		`pack.Module.Type` has name = Module, sub = Type, if available.</haxe_doc>
			</sub>
			<params>
				<x path="Null"><c path="Array"><e path="haxe.macro.TypeParam"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Optional parameters of the type path.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>Represents the package of the type path.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type path.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a type path in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the type parameter.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the type parameter.</haxe_doc>
			</meta>
			<constraints>
				<x path="Null"><c path="Array"><e path="haxe.macro.ComplexType"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional constraints of the type parameter.</haxe_doc>
			</constraints>
		</a>
		<haxe_doc>Represents a type parameter declaration in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Function" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<ret>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<haxe_doc>The return type-hint of the function, if available.</haxe_doc>
			</ret>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An optional list of function parameter type declarations.</haxe_doc>
			</params>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<haxe_doc>The expression of the function body, if available.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><t path="haxe.macro.FunctionArg"/></c>
				<haxe_doc>A list of function arguments.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<value>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional value of the function argument, if available.</haxe_doc>
			</value>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<haxe_doc>The type-hint of the function argument, if available.</haxe_doc>
			</type>
			<opt>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the function argument is optional.</haxe_doc>
			</opt>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the function argument.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the function argument.</haxe_doc>
			</meta>
		</a>
		<haxe_doc>Represents a function argument in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the metadata entry.</haxe_doc>
			</pos>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.Expr"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the metadata entry.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the metadata entry.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a metadata entry in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Metadata" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
		<haxe_doc>Represents metadata in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Field" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the field.</haxe_doc>
			</pos>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldType"/>
				<haxe_doc>The kind of the field.</haxe_doc>
			</kind>
			<doc>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the field, if available. If the field has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
			<access>
				<x path="Null"><c path="Array"><e path="haxe.macro.Access"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The access modifiers of the field. By default fields have private access.
		@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
			</access>
		</a>
		<haxe_doc>Represents a field in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypeDefinition" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position to the type definition.</haxe_doc>
			</pos>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The parameter type declarations of the type definition.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type definition.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type definition.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the type definition.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.TypeDefKind"/>
				<haxe_doc>The kind of the type definition.</haxe_doc>
			</kind>
			<isExtern>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<fields>
				<c path="Array"><t path="haxe.macro.Field"/></c>
				<haxe_doc>The fields of the type definition.</haxe_doc>
			</fields>
			<doc>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the type, if available. If the type has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a type definition.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ImportExpr" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<path>
				<c path="Array"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
</a></c>
				<haxe_doc>The path to the import expression.</haxe_doc>
			</path>
			<mode>
				<e path="haxe.macro.ImportMode"/>
				<haxe_doc>The mode of the import expression.</haxe_doc>
			</mode>
		</a>
		<haxe_doc>Represents the import expression.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Ref" params="T" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<toString set="method"><f a=""><c path="String"/></f></toString>
			<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
		</a>
		<haxe_doc>Represents a reference to internal compiler structure. It exists to avoid
	expensive encoding if it is not required and to ensure that physical
	equality remains intact.

	A structure is only encoded when user requests it through `ref.get()`.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.AnonType" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<status>
				<e path="haxe.macro.AnonStatus"/>
				<haxe_doc>The status/kind of the structure.</haxe_doc>
			</status>
			<fields>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The class fields of the structure.</haxe_doc>
			</fields>
		</a>
		<haxe_doc>Represents information for anonymous structure types.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypeParameter" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the type parameter. It is guaranteed to be a `TInst` with a
		`KTypeParameter` kind.</haxe_doc>
			</t>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents the declaration of type parameters.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassField" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the class field.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the class field.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the class field.</haxe_doc>
			</params>
			<overloads>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The overload fields of the class field.</haxe_doc>
			</overloads>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the class field.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the class field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldKind"/>
				<haxe_doc>The class field kind.</haxe_doc>
			</kind>
			<isPublic>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is public.</haxe_doc>
			</isPublic>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is final.</haxe_doc>
			</isFinal>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the class field is extern.</haxe_doc>
			</isExtern>
			<expr set="method">
				<f a=""><x path="Null"><t path="haxe.macro.TypedExpr"/></x></f>
				<haxe_doc>Returns the typed expression of the class field.</haxe_doc>
			</expr>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a class field.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumField" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the enum constructor.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the enum constructor.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the enum constructor.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the enum constructor.</haxe_doc>
			</name>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the enum constructor.</haxe_doc>
			</meta>
			<index>
				<x path="Int"/>
				<haxe_doc>The index of the enum constructor, i.e. in which position it appears
		in the syntax.</haxe_doc>
			</index>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the enum constructor.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents an enum constructor.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.BaseType" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>The information that all types (`ClassType`, `EnumType`, `DefType`,
	`AbstractType`) have in common.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ClassType" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<superClass>
				<x path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></x>
				<haxe_doc>The parent class and its type parameters, if available.</haxe_doc>
			</superClass>
			<statics>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The static fields of the class.</haxe_doc>
			</statics>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<overrides>
				<c path="Array"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></c>
				<haxe_doc>The list of fields that have override status.</haxe_doc>
			</overrides>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.ClassKind"/>
				<haxe_doc>The kind of the class.</haxe_doc>
			</kind>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isInterface>
				<x path="Bool"/>
				<haxe_doc>If true the type is an interface, otherwise it is a class.</haxe_doc>
			</isInterface>
			<isFinal>
				<x path="Bool"/>
				<haxe_doc>If true the class is final and cannot be extended.</haxe_doc>
			</isFinal>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<interfaces>
				<c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c>
				<haxe_doc>The implemented interfaces and their type parameters.</haxe_doc>
			</interfaces>
			<init>
				<x path="Null"><t path="haxe.macro.TypedExpr"/></x>
				<haxe_doc>The `__init__` expression of the class, if available.</haxe_doc>
			</init>
			<fields>
				<t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t>
				<haxe_doc>The member fields of the class.</haxe_doc>
			</fields>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructor>
				<x path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></x>
				<haxe_doc>The constructor of the class, if available.</haxe_doc>
			</constructor>
		</a>
		<haxe_doc>Represents a class type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.EnumType" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<names>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>An ordered list of enum constructor names.</haxe_doc>
			</names>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<constructs>
				<t path="Map">
					<c path="String"/>
					<t path="haxe.macro.EnumField"/>
				</t>
				<haxe_doc>The available enum constructors.</haxe_doc>
			</constructs>
		</a>
		<haxe_doc>Represents an enum type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.DefType" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The target type of the typedef.</haxe_doc>
			</type>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a typedef.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<unops>
				<c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined unary operators of the abstract.</haxe_doc>
			</unops>
			<type>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The underlying type of the abstract.</haxe_doc>
			</type>
			<to>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><x path="Null"><t path="haxe.macro.ClassField"/></x></field>
</a></c>
				<haxe_doc>The available implicit to-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</to>
			<resolveWrite>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolveWrite>
			<resolve>
				<x path="Null"><t path="haxe.macro.ClassField"/></x>
				<haxe_doc>The method used for resolving unknown field access, if available.</haxe_doc>
			</resolve>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the type.</haxe_doc>
			</pos>
			<params>
				<c path="Array"><t path="haxe.macro.TypeParameter"/></c>
				<haxe_doc>The type parameters of the type.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type.</haxe_doc>
			</name>
			<module>
				<c path="String"/>
				<haxe_doc>The module name of the type, which might be different.</haxe_doc>
			</module>
			<meta>
				<t path="haxe.macro.MetaAccess"/>
				<haxe_doc>The metadata of the type.</haxe_doc>
			</meta>
			<isPrivate>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is private.</haxe_doc>
			</isPrivate>
			<isExtern>
				<x path="Bool"/>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<impl>
				<x path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></x>
				<haxe_doc>The implementation class of the abstract, if available.</haxe_doc>
			</impl>
			<from>
				<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><x path="Null"><t path="haxe.macro.ClassField"/></x></field>
</a></c>
				<haxe_doc>The available implicit from-casts of the abstract.

		@see https://haxe.org/manual/types-abstract-implicit-casts.html</haxe_doc>
			</from>
			<exclude set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>Allows excluding the type from compilation.</haxe_doc>
			</exclude>
			<doc>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>The associated documentation of the class field.</haxe_doc>
			</doc>
			<binops>
				<c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c>
				<haxe_doc>The defined binary operators of the abstract.</haxe_doc>
			</binops>
			<array>
				<c path="Array"><t path="haxe.macro.ClassField"/></c>
				<haxe_doc>The defined array-access fields of the abstract.</haxe_doc>
			</array>
		</a>
		<haxe_doc>Represents an abstract type.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<remove set="method">
				<f a="name">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes all `name` metadata entries from the origin of `this`
		MetaAccess.

		This method might clear several metadata entries of the same name.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `remove` has no effect on that array.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</remove>
			<has set="method">
				<f a="name">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>Tells if the origin of `this` MetaAccess has a `name` metadata entry.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</has>
			<get set="method">
				<f a=""><t path="haxe.macro.Metadata"/></f>
				<haxe_doc>Return the wrapped `Metadata` array.

		Modifying this array has no effect on the origin of `this` MetaAccess.
		The `add` and `remove` methods can be used for that.</haxe_doc>
			</get>
			<extract set="method">
				<f a="name">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
				</f>
				<haxe_doc>Extract metadata entries by given `name`.

		If there's no metadata with such name, empty array `[]` is returned.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</extract>
			<add set="method">
				<f a="name:params:pos">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.Expr"/></c>
					<t path="haxe.macro.Position"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Adds the metadata specified by `name`, `params` and `pos` to the origin
		of `this` MetaAccess.

		Metadata names are not unique during compilation, so this method never
		overwrites a previous metadata.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `add` has no effect on that array.

		If any argument is null, compilation fails with an error.</haxe_doc>
			</add>
		</a>
		<haxe_doc>MetaAccess is a wrapper for the `Metadata` array. It can be used to add
	metadata to and remove metadata from its origin.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TVar" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t set="null">
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the variable.</haxe_doc>
			</t>
			<name set="null">
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<meta set="null">
				<x path="Null"><t path="haxe.macro.MetaAccess"/></x>
				<haxe_doc>The metadata of the variable.</haxe_doc>
			</meta>
			<id set="null">
				<x path="Int"/>
				<haxe_doc>The unique ID of the variable.</haxe_doc>
			</id>
			<extra set="null">
				<x path="Null"><a>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<expr><x path="Null"><t path="haxe.macro.TypedExpr"/></x></expr>
</a></x>
				<haxe_doc>Special information which is internally used to keep track of closure.
		information</haxe_doc>
			</extra>
			<capture set="null">
				<x path="Bool"/>
				<haxe_doc>Whether or not the variable has been captured by a closure.</haxe_doc>
			</capture>
		</a>
		<haxe_doc>Represents a variable in the typed AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TFunc" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The return type of the function.</haxe_doc>
			</t>
			<expr>
				<t path="haxe.macro.TypedExpr"/>
				<haxe_doc>The expression of the function body.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><a>
	<value><x path="Null"><t path="haxe.macro.TypedExpr"/></x></value>
	<v><t path="haxe.macro.TVar"/></v>
</a></c>
				<haxe_doc>A list of function arguments identified by an argument variable `v` and
		an optional initialization `value`.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the typed AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypedExpr" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<t>
				<e path="haxe.macro.Type"/>
				<haxe_doc>The type of the expression.</haxe_doc>
			</t>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.TypedExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a typed AST node.</haxe_doc>
	</typedef>
	<typedef path="kha.AssetError" params="" file="C:\HaxeLibraries\Kha\Sources/kha/AssetError.hx"><a>
	<url><c path="String"/></url>
	<error>
		<x path="Null"><d/></x>
		<meta><m n=":optional"/></meta>
	</error>
</a></typedef>
	<class path="kha._Assets.ImageList" params="" file="C:\HaxeLibraries\Kha\Sources/kha/Assets.hx" private="1" module="kha.Assets">
		<get public="1" set="method" line="14"><f a="name">
	<c path="String"/>
	<c path="kha.Image"/>
</f></get>
		<names public="1" expr="[]">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</names>
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":build"><e>kha.internal.AssetsBuilder.build("image")</e></m>
		</meta>
	</class>
	<class path="kha._Assets.SoundList" params="" file="C:\HaxeLibraries\Kha\Sources/kha/Assets.hx" private="1" module="kha.Assets">
		<get public="1" set="method" line="25"><f a="name">
	<c path="String"/>
	<c path="kha.Sound"/>
</f></get>
		<names public="1" expr="[]">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</names>
		<new public="1" set="method" line="21"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":build"><e>kha.internal.AssetsBuilder.build("sound")</e></m>
		</meta>
	</class>
	<class path="kha._Assets.BlobList" params="" file="C:\HaxeLibraries\Kha\Sources/kha/Assets.hx" private="1" module="kha.Assets">
		<get public="1" set="method" line="36"><f a="name">
	<c path="String"/>
	<t path="kha.Blob"/>
</f></get>
		<names public="1" expr="[]">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</names>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":build"><e>kha.internal.AssetsBuilder.build("blob")</e></m>
		</meta>
	</class>
	<class path="kha._Assets.FontList" params="" file="C:\HaxeLibraries\Kha\Sources/kha/Assets.hx" private="1" module="kha.Assets">
		<get public="1" set="method" line="47"><f a="name">
	<c path="String"/>
	<t path="kha.Font"/>
</f></get>
		<names public="1" expr="[]">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</names>
		<new public="1" set="method" line="43"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":build"><e>kha.internal.AssetsBuilder.build("font")</e></m>
		</meta>
	</class>
	<class path="kha._Assets.VideoList" params="" file="C:\HaxeLibraries\Kha\Sources/kha/Assets.hx" private="1" module="kha.Assets">
		<get public="1" set="method" line="58"><f a="name">
	<c path="String"/>
	<c path="kha.Video"/>
</f></get>
		<names public="1" expr="[]">
			<c path="Array"><c path="String"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</names>
		<new public="1" set="method" line="54"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":build"><e>kha.internal.AssetsBuilder.build("video")</e></m>
		</meta>
	</class>
	<class path="kha.Assets" params="" file="C:\HaxeLibraries\Kha\Sources/kha/Assets.hx">
		<images public="1" expr="new ImageList()" line="64" static="1">
			<c path="kha._Assets.ImageList"/>
			<meta><m n=":value"><e>new ImageList()</e></m></meta>
		</images>
		<sounds public="1" expr="new SoundList()" line="65" static="1">
			<c path="kha._Assets.SoundList"/>
			<meta><m n=":value"><e>new SoundList()</e></m></meta>
		</sounds>
		<blobs public="1" expr="new BlobList()" line="66" static="1">
			<c path="kha._Assets.BlobList"/>
			<meta><m n=":value"><e>new BlobList()</e></m></meta>
		</blobs>
		<fonts public="1" expr="new FontList()" line="67" static="1">
			<c path="kha._Assets.FontList"/>
			<meta><m n=":value"><e>new FontList()</e></m></meta>
		</fonts>
		<videos public="1" expr="new VideoList()" line="68" static="1">
			<c path="kha._Assets.VideoList"/>
			<meta><m n=":value"><e>new VideoList()</e></m></meta>
		</videos>
		<progress public="1" static="1">
			<x path="Float"/>
			<haxe_doc>* Moves from 0 to 1. Use for loading screens.</haxe_doc>
		</progress>
		<loadEverything public="1" set="method" line="89" static="1">
			<f a="callback:?filter:?uncompressSoundsFilter:?failed" v=":null:null:">
				<f a=""><x path="Void"/></f>
				<f a="">
					<d/>
					<x path="Bool"/>
				</f>
				<f a="">
					<d/>
					<x path="Bool"/>
				</f>
				<f a="">
					<t path="kha.AssetError"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ uncompressSoundsFilter : null, filter : null }</e></m></meta>
			<haxe_doc>Loads all assets which were detected by khamake. When running khamake (doing so is Kha's standard build behavior)
	it creates a files.json in the build/{target}-resources directoy which contains information about all assets which were found.

	The `callback` parameter is always called after loading, even when some or all assets had failures.

	An optional callback parameter `failed` is called for each asset that failed to load.

	The filter parameter can be used to load assets selectively. The Dynamic parameter describes the asset,
	it contains the very same objects which are listed in files.json.

	Additionally by default all sounds are decompressed. The uncompressSoundsFilter can be used to avoid that.
	Uncompressed sounds can still be played using Audio.stream which is recommended for music.</haxe_doc>
		</loadEverything>
		<loadImage public="1" set="method" line="163" static="1">
			<f a="name:done:?failed:?pos">
				<c path="String"/>
				<f a="">
					<c path="kha.Image"/>
					<x path="Void"/>
				</f>
				<f a="">
					<t path="kha.AssetError"/>
					<x path="Void"/>
				</f>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Loads an image by name which was preprocessed by khamake.
	 *
	 * @param	name The name as defined by the khafile.
	 * @param	done A callback.</haxe_doc>
		</loadImage>
		<loadImageFromPath public="1" set="method" line="178" static="1">
			<f a="path:readable:done:?failed:?pos">
				<c path="String"/>
				<x path="Bool"/>
				<f a="">
					<c path="kha.Image"/>
					<x path="Void"/>
				</f>
				<f a="">
					<t path="kha.AssetError"/>
					<x path="Void"/>
				</f>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Loads an image from a path. Most targets support PNG and JPEG formats.
	 *
	 * @param	path The path to the image file.
	 * @param   readable If true, a copy of the image will be kept in main memory for image read operations.
	 * @param	done A callback.</haxe_doc>
		</loadImageFromPath>
		<imageFormats public="1" get="accessor" set="null" static="1"><c path="Array"><c path="String"/></c></imageFormats>
		<get_imageFormats set="method" line="185" static="1"><f a=""><c path="Array"><c path="String"/></c></f></get_imageFormats>
		<loadBlob public="1" set="method" line="189" static="1"><f a="name:done:?failed:?pos">
	<c path="String"/>
	<f a="">
		<t path="kha.Blob"/>
		<x path="Void"/>
	</f>
	<f a="">
		<t path="kha.AssetError"/>
		<x path="Void"/>
	</f>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></loadBlob>
		<loadBlobFromPath public="1" set="method" line="197" static="1"><f a="path:done:?failed:?pos">
	<c path="String"/>
	<f a="">
		<t path="kha.Blob"/>
		<x path="Void"/>
	</f>
	<f a="">
		<t path="kha.AssetError"/>
		<x path="Void"/>
	</f>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></loadBlobFromPath>
		<loadSound public="1" set="method" line="202" static="1"><f a="name:done:?failed:?pos">
	<c path="String"/>
	<f a="">
		<c path="kha.Sound"/>
		<x path="Void"/>
	</f>
	<f a="">
		<t path="kha.AssetError"/>
		<x path="Void"/>
	</f>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></loadSound>
		<loadSoundFromPath public="1" set="method" line="210" static="1"><f a="path:done:?failed:?pos">
	<c path="String"/>
	<f a="">
		<c path="kha.Sound"/>
		<x path="Void"/>
	</f>
	<f a="">
		<t path="kha.AssetError"/>
		<x path="Void"/>
	</f>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></loadSoundFromPath>
		<soundFormats public="1" get="accessor" set="null" static="1"><c path="Array"><c path="String"/></c></soundFormats>
		<get_soundFormats set="method" line="217" static="1"><f a=""><c path="Array"><c path="String"/></c></f></get_soundFormats>
		<loadFont public="1" set="method" line="221" static="1"><f a="name:done:?failed:?pos">
	<c path="String"/>
	<f a="">
		<t path="kha.Font"/>
		<x path="Void"/>
	</f>
	<f a="">
		<t path="kha.AssetError"/>
		<x path="Void"/>
	</f>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></loadFont>
		<loadFontFromPath public="1" set="method" line="229" static="1"><f a="path:done:?failed:?pos">
	<c path="String"/>
	<f a="">
		<t path="kha.Font"/>
		<x path="Void"/>
	</f>
	<f a="">
		<t path="kha.AssetError"/>
		<x path="Void"/>
	</f>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></loadFontFromPath>
		<fontFormats public="1" get="accessor" set="null" static="1"><c path="Array"><c path="String"/></c></fontFormats>
		<get_fontFormats set="method" line="236" static="1"><f a=""><c path="Array"><c path="String"/></c></f></get_fontFormats>
		<loadVideo public="1" set="method" line="240" static="1"><f a="name:done:?failed:?pos">
	<c path="String"/>
	<f a="">
		<c path="kha.Video"/>
		<x path="Void"/>
	</f>
	<f a="">
		<t path="kha.AssetError"/>
		<x path="Void"/>
	</f>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></loadVideo>
		<loadVideoFromPath public="1" set="method" line="248" static="1"><f a="path:done:?failed:?pos">
	<c path="String"/>
	<f a="">
		<c path="kha.Video"/>
		<x path="Void"/>
	</f>
	<f a="">
		<t path="kha.AssetError"/>
		<x path="Void"/>
	</f>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></loadVideoFromPath>
		<videoFormats public="1" get="accessor" set="null" static="1"><c path="Array"><c path="String"/></c></videoFormats>
		<get_videoFormats set="method" line="255" static="1"><f a=""><c path="Array"><c path="String"/></c></f></get_videoFormats>
		<reporter public="1" set="method" line="259" static="1"><f a="custom:?pos">
	<f a="">
		<t path="kha.AssetError"/>
		<x path="Void"/>
	</f>
	<t path="haxe.PosInfos"/>
	<f a="">
		<t path="kha.AssetError"/>
		<x path="Void"/>
	</f>
</f></reporter>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="kha.Blob" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/Blob.hx"><c path="kha.internal.BytesBlob"/></typedef>
	<class path="kha.Canvas" params="" file="C:\HaxeLibraries\Kha\Sources/kha/Canvas.hx" interface="1">
		<get_width public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</get_width>
		<get_height public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</get_height>
		<get_g1 public="1" set="method">
			<f a=""><c path="kha.graphics1.Graphics"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</get_g1>
		<get_g2 public="1" set="method">
			<f a=""><c path="kha.graphics2.Graphics"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</get_g2>
		<get_g4 public="1" set="method">
			<f a=""><c path="kha.graphics4.Graphics"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</get_g4>
		<width public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>* The width of the canvas in pixels.</haxe_doc>
		</width>
		<height public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>* The height of the canvas in pixels.</haxe_doc>
		</height>
		<g1 public="1" get="accessor" set="null">
			<c path="kha.graphics1.Graphics"/>
			<haxe_doc><![CDATA[* The Graphics1 interface object.<br>
	 * Basic setPixel operation.]]></haxe_doc>
		</g1>
		<g2 public="1" get="accessor" set="null">
			<c path="kha.graphics2.Graphics"/>
			<haxe_doc><![CDATA[* The Graphics2 interface object.<br>
	 * Use this for 2D operations.]]></haxe_doc>
		</g2>
		<g4 public="1" get="accessor" set="null">
			<c path="kha.graphics4.Graphics"/>
			<haxe_doc><![CDATA[* The Graphics4 interface object.<br>
	 * Use this for 3D operations.]]></haxe_doc>
		</g4>
		<haxe_doc><![CDATA[* Interface for a generic Canvas with different APIs,<br>
 * that can be used to draw graphics.]]></haxe_doc>
	</class>
	<abstract path="kha.Color" params="" file="C:\HaxeLibraries\Kha\Sources/kha/Color.hx">
		<from>
			<icast><x path="UInt"/></icast>
			<icast><x path="Int"/></icast>
		</from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="UInt"/></icast>
			<icast><x path="Int"/></icast>
		</to>
		<haxe_doc>* A 32 bit ARGB color value which is represented as an Integer.</haxe_doc>
		<impl><class path="kha._Color.Color_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/Color.hx" private="1" module="kha.Color">
	<Black public="1" get="inline" set="null" expr="0xff000000" line="7" static="1">
		<x path="kha.Color"/>
		<meta><m n=":value"><e>0xff000000</e></m></meta>
	</Black>
	<White public="1" get="inline" set="null" expr="0xffffffff" line="8" static="1">
		<x path="kha.Color"/>
		<meta><m n=":value"><e>0xffffffff</e></m></meta>
	</White>
	<Red public="1" get="inline" set="null" expr="0xffff0000" line="9" static="1">
		<x path="kha.Color"/>
		<meta><m n=":value"><e>0xffff0000</e></m></meta>
	</Red>
	<Blue public="1" get="inline" set="null" expr="0xff0000ff" line="10" static="1">
		<x path="kha.Color"/>
		<meta><m n=":value"><e>0xff0000ff</e></m></meta>
	</Blue>
	<Green public="1" get="inline" set="null" expr="0xff00ff00" line="11" static="1">
		<x path="kha.Color"/>
		<meta><m n=":value"><e>0xff00ff00</e></m></meta>
	</Green>
	<Magenta public="1" get="inline" set="null" expr="0xffff00ff" line="12" static="1">
		<x path="kha.Color"/>
		<meta><m n=":value"><e>0xffff00ff</e></m></meta>
	</Magenta>
	<Yellow public="1" get="inline" set="null" expr="0xffffff00" line="13" static="1">
		<x path="kha.Color"/>
		<meta><m n=":value"><e>0xffffff00</e></m></meta>
	</Yellow>
	<Cyan public="1" get="inline" set="null" expr="0xff00ffff" line="14" static="1">
		<x path="kha.Color"/>
		<meta><m n=":value"><e>0xff00ffff</e></m></meta>
	</Cyan>
	<Purple public="1" get="inline" set="null" expr="0xff800080" line="15" static="1">
		<x path="kha.Color"/>
		<meta><m n=":value"><e>0xff800080</e></m></meta>
	</Purple>
	<Pink public="1" get="inline" set="null" expr="0xffffc0cb" line="16" static="1">
		<x path="kha.Color"/>
		<meta><m n=":value"><e>0xffffc0cb</e></m></meta>
	</Pink>
	<Orange public="1" get="inline" set="null" expr="0xffffa500" line="17" static="1">
		<x path="kha.Color"/>
		<meta><m n=":value"><e>0xffffa500</e></m></meta>
	</Orange>
	<Transparent public="1" get="inline" set="null" expr="0x00000000" line="19" static="1">
		<x path="kha.Color"/>
		<meta><m n=":value"><e>0x00000000</e></m></meta>
	</Transparent>
	<invMaxChannelValue get="inline" set="null" expr="1 / 255" line="21" static="1">
		<t path="kha.FastFloat"/>
		<meta><m n=":value"><e>1 / 255</e></m></meta>
	</invMaxChannelValue>
	<fromValue public="1" get="inline" set="null" line="26" static="1">
		<f a="value">
			<x path="Int"/>
			<x path="kha.Color"/>
		</f>
		<haxe_doc>* Creates a new Color object from a packed 32 bit ARGB value.</haxe_doc>
	</fromValue>
	<fromBytes public="1" set="method" line="33" static="1">
		<f a="r:g:b:?a" v=":::255">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="kha.Color"/>
		</f>
		<meta><m n=":value"><e>{ a : 255 }</e></m></meta>
		<haxe_doc>* Creates a new Color object from components in the range 0 - 255.</haxe_doc>
	</fromBytes>
	<fromFloats public="1" set="method" line="40" static="1">
		<f a="r:g:b:?a" v=":::1">
			<t path="kha.FastFloat"/>
			<t path="kha.FastFloat"/>
			<t path="kha.FastFloat"/>
			<t path="kha.FastFloat"/>
			<x path="kha.Color"/>
		</f>
		<meta><m n=":value"><e>{ a : 1 }</e></m></meta>
		<haxe_doc>* Creates a new Color object from components in the range 0 - 1.</haxe_doc>
	</fromFloats>
	<fromString public="1" set="method" line="47" static="1">
		<f a="value">
			<c path="String"/>
			<x path="kha.Color"/>
		</f>
		<haxe_doc>* Creates a new Color object from an HTML style #AARRGGBB string.</haxe_doc>
	</fromString>
	<Rb public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Contains a byte representing the red color component.</haxe_doc>
	</Rb>
	<Gb public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Contains a byte representing the green color component.</haxe_doc>
	</Gb>
	<Bb public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Contains a byte representing the blue color component.</haxe_doc>
	</Bb>
	<Ab public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Contains a byte representing the alpha color component (more exactly the opacity component - a value of 0 is fully transparent).</haxe_doc>
	</Ab>
	<R public="1" get="accessor" set="accessor" static="1">
		<t path="kha.FastFloat"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Contains a float representing the red color component.</haxe_doc>
	</R>
	<G public="1" get="accessor" set="accessor" static="1">
		<t path="kha.FastFloat"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Contains a float representing the green color component.</haxe_doc>
	</G>
	<B public="1" get="accessor" set="accessor" static="1">
		<t path="kha.FastFloat"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Contains a float representing the blue color component.</haxe_doc>
	</B>
	<A public="1" get="accessor" set="accessor" static="1">
		<t path="kha.FastFloat"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Contains a float representing the alpha color component (more exactly the opacity component - a value of 0 is fully transparent).</haxe_doc>
	</A>
	<_new set="method" line="93" static="1">
		<f a="value">
			<x path="Int"/>
			<x path="kha.Color"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<value public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Return this Color instance as Int.</haxe_doc>
	</value>
	<get_value get="inline" set="null" line="102" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_value>
	<set_value get="inline" set="null" line="106" static="1">
		<f a="this:value">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_value>
	<get_Rb get="inline" set="null" line="111" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_Rb>
	<get_Gb get="inline" set="null" line="115" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_Gb>
	<get_Bb get="inline" set="null" line="119" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_Bb>
	<get_Ab get="inline" set="null" line="123" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_Ab>
	<set_Rb get="inline" set="null" line="127" static="1">
		<f a="this:i">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_Rb>
	<set_Gb get="inline" set="null" line="132" static="1">
		<f a="this:i">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_Gb>
	<set_Bb get="inline" set="null" line="137" static="1">
		<f a="this:i">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_Bb>
	<set_Ab get="inline" set="null" line="142" static="1">
		<f a="this:i">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_Ab>
	<get_R get="inline" set="null" line="147" static="1">
		<f a="this">
			<x path="Int"/>
			<t path="kha.FastFloat"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_R>
	<get_G get="inline" set="null" line="151" static="1">
		<f a="this">
			<x path="Int"/>
			<t path="kha.FastFloat"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_G>
	<get_B get="inline" set="null" line="155" static="1">
		<f a="this">
			<x path="Int"/>
			<t path="kha.FastFloat"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_B>
	<get_A get="inline" set="null" line="159" static="1">
		<f a="this">
			<x path="Int"/>
			<t path="kha.FastFloat"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_A>
	<set_R get="inline" set="null" line="163" static="1">
		<f a="this:f">
			<x path="Int"/>
			<t path="kha.FastFloat"/>
			<t path="kha.FastFloat"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_R>
	<set_G get="inline" set="null" line="168" static="1">
		<f a="this:f">
			<x path="Int"/>
			<t path="kha.FastFloat"/>
			<t path="kha.FastFloat"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_G>
	<set_B get="inline" set="null" line="173" static="1">
		<f a="this:f">
			<x path="Int"/>
			<t path="kha.FastFloat"/>
			<t path="kha.FastFloat"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_B>
	<set_A get="inline" set="null" line="178" static="1">
		<f a="this:f">
			<x path="Int"/>
			<t path="kha.FastFloat"/>
			<t path="kha.FastFloat"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_A>
	<meta><m n=":directlyUsed"/></meta>
</class></impl>
	</abstract>
	<class path="kha._Color.Color_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/Color.hx" private="1" module="kha.Color">
		<Black public="1" get="inline" set="null" expr="0xff000000" line="7" static="1">
			<x path="kha.Color"/>
			<meta><m n=":value"><e>0xff000000</e></m></meta>
		</Black>
		<White public="1" get="inline" set="null" expr="0xffffffff" line="8" static="1">
			<x path="kha.Color"/>
			<meta><m n=":value"><e>0xffffffff</e></m></meta>
		</White>
		<Red public="1" get="inline" set="null" expr="0xffff0000" line="9" static="1">
			<x path="kha.Color"/>
			<meta><m n=":value"><e>0xffff0000</e></m></meta>
		</Red>
		<Blue public="1" get="inline" set="null" expr="0xff0000ff" line="10" static="1">
			<x path="kha.Color"/>
			<meta><m n=":value"><e>0xff0000ff</e></m></meta>
		</Blue>
		<Green public="1" get="inline" set="null" expr="0xff00ff00" line="11" static="1">
			<x path="kha.Color"/>
			<meta><m n=":value"><e>0xff00ff00</e></m></meta>
		</Green>
		<Magenta public="1" get="inline" set="null" expr="0xffff00ff" line="12" static="1">
			<x path="kha.Color"/>
			<meta><m n=":value"><e>0xffff00ff</e></m></meta>
		</Magenta>
		<Yellow public="1" get="inline" set="null" expr="0xffffff00" line="13" static="1">
			<x path="kha.Color"/>
			<meta><m n=":value"><e>0xffffff00</e></m></meta>
		</Yellow>
		<Cyan public="1" get="inline" set="null" expr="0xff00ffff" line="14" static="1">
			<x path="kha.Color"/>
			<meta><m n=":value"><e>0xff00ffff</e></m></meta>
		</Cyan>
		<Purple public="1" get="inline" set="null" expr="0xff800080" line="15" static="1">
			<x path="kha.Color"/>
			<meta><m n=":value"><e>0xff800080</e></m></meta>
		</Purple>
		<Pink public="1" get="inline" set="null" expr="0xffffc0cb" line="16" static="1">
			<x path="kha.Color"/>
			<meta><m n=":value"><e>0xffffc0cb</e></m></meta>
		</Pink>
		<Orange public="1" get="inline" set="null" expr="0xffffa500" line="17" static="1">
			<x path="kha.Color"/>
			<meta><m n=":value"><e>0xffffa500</e></m></meta>
		</Orange>
		<Transparent public="1" get="inline" set="null" expr="0x00000000" line="19" static="1">
			<x path="kha.Color"/>
			<meta><m n=":value"><e>0x00000000</e></m></meta>
		</Transparent>
		<invMaxChannelValue get="inline" set="null" expr="1 / 255" line="21" static="1">
			<t path="kha.FastFloat"/>
			<meta><m n=":value"><e>1 / 255</e></m></meta>
		</invMaxChannelValue>
		<fromValue public="1" get="inline" set="null" line="26" static="1">
			<f a="value">
				<x path="Int"/>
				<x path="kha.Color"/>
			</f>
			<haxe_doc>* Creates a new Color object from a packed 32 bit ARGB value.</haxe_doc>
		</fromValue>
		<fromBytes public="1" set="method" line="33" static="1">
			<f a="r:g:b:?a" v=":::255">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="kha.Color"/>
			</f>
			<meta><m n=":value"><e>{ a : 255 }</e></m></meta>
			<haxe_doc>* Creates a new Color object from components in the range 0 - 255.</haxe_doc>
		</fromBytes>
		<fromFloats public="1" set="method" line="40" static="1">
			<f a="r:g:b:?a" v=":::1">
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<x path="kha.Color"/>
			</f>
			<meta><m n=":value"><e>{ a : 1 }</e></m></meta>
			<haxe_doc>* Creates a new Color object from components in the range 0 - 1.</haxe_doc>
		</fromFloats>
		<fromString public="1" set="method" line="47" static="1">
			<f a="value">
				<c path="String"/>
				<x path="kha.Color"/>
			</f>
			<haxe_doc>* Creates a new Color object from an HTML style #AARRGGBB string.</haxe_doc>
		</fromString>
		<Rb public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Contains a byte representing the red color component.</haxe_doc>
		</Rb>
		<Gb public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Contains a byte representing the green color component.</haxe_doc>
		</Gb>
		<Bb public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Contains a byte representing the blue color component.</haxe_doc>
		</Bb>
		<Ab public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Contains a byte representing the alpha color component (more exactly the opacity component - a value of 0 is fully transparent).</haxe_doc>
		</Ab>
		<R public="1" get="accessor" set="accessor" static="1">
			<t path="kha.FastFloat"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Contains a float representing the red color component.</haxe_doc>
		</R>
		<G public="1" get="accessor" set="accessor" static="1">
			<t path="kha.FastFloat"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Contains a float representing the green color component.</haxe_doc>
		</G>
		<B public="1" get="accessor" set="accessor" static="1">
			<t path="kha.FastFloat"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Contains a float representing the blue color component.</haxe_doc>
		</B>
		<A public="1" get="accessor" set="accessor" static="1">
			<t path="kha.FastFloat"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Contains a float representing the alpha color component (more exactly the opacity component - a value of 0 is fully transparent).</haxe_doc>
		</A>
		<_new set="method" line="93" static="1">
			<f a="value">
				<x path="Int"/>
				<x path="kha.Color"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<value public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Return this Color instance as Int.</haxe_doc>
		</value>
		<get_value get="inline" set="null" line="102" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_value>
		<set_value get="inline" set="null" line="106" static="1">
			<f a="this:value">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_value>
		<get_Rb get="inline" set="null" line="111" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_Rb>
		<get_Gb get="inline" set="null" line="115" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_Gb>
		<get_Bb get="inline" set="null" line="119" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_Bb>
		<get_Ab get="inline" set="null" line="123" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_Ab>
		<set_Rb get="inline" set="null" line="127" static="1">
			<f a="this:i">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_Rb>
		<set_Gb get="inline" set="null" line="132" static="1">
			<f a="this:i">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_Gb>
		<set_Bb get="inline" set="null" line="137" static="1">
			<f a="this:i">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_Bb>
		<set_Ab get="inline" set="null" line="142" static="1">
			<f a="this:i">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_Ab>
		<get_R get="inline" set="null" line="147" static="1">
			<f a="this">
				<x path="Int"/>
				<t path="kha.FastFloat"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_R>
		<get_G get="inline" set="null" line="151" static="1">
			<f a="this">
				<x path="Int"/>
				<t path="kha.FastFloat"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_G>
		<get_B get="inline" set="null" line="155" static="1">
			<f a="this">
				<x path="Int"/>
				<t path="kha.FastFloat"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_B>
		<get_A get="inline" set="null" line="159" static="1">
			<f a="this">
				<x path="Int"/>
				<t path="kha.FastFloat"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_A>
		<set_R get="inline" set="null" line="163" static="1">
			<f a="this:f">
				<x path="Int"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_R>
		<set_G get="inline" set="null" line="168" static="1">
			<f a="this:f">
				<x path="Int"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_G>
		<set_B get="inline" set="null" line="173" static="1">
			<f a="this:f">
				<x path="Int"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_B>
		<set_A get="inline" set="null" line="178" static="1">
			<f a="this:f">
				<x path="Int"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_A>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.Display" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/Display.hx">
		<displays expr="null" line="10" static="1">
			<c path="Array"><c path="kha.Display"/></c>
			<meta><m n=":value"><e>null</e></m></meta>
		</displays>
		<count set="method" line="17" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e>"return Kore::Display::count();"</e></m></meta>
		</count>
		<init set="method" line="21" static="1"><f a=""><x path="Void"/></f></init>
		<primaryId set="method" line="36" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\tfor (int i = 0; i < Kore::Display::count(); ++i) {\n\t\t\tif (Kore::Display::get(i) == Kore::Display::primary()) return i;\n\t\t}\n\t\treturn 0;\n\t"]]></e></m></meta>
		</primaryId>
		<primary public="1" get="accessor" set="null" static="1"><c path="kha.Display"/></primary>
		<get_primary set="method" line="42" static="1"><f a=""><c path="kha.Display"/></f></get_primary>
		<all public="1" get="accessor" set="null" static="1"><c path="Array"><c path="kha.Display"/></c></all>
		<get_all set="method" line="49" static="1"><f a=""><c path="Array"><c path="kha.Display"/></c></f></get_all>
		<num><x path="Int"/></num>
		<available public="1" get="accessor" set="null"><x path="Bool"/></available>
		<get_available set="method" line="57">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":functionCode"><e><![CDATA["return Kore::Display::get(num)->available();"]]></e></m></meta>
		</get_available>
		<name public="1" get="accessor" set="null"><c path="String"/></name>
		<get_name set="method" line="64">
			<f a=""><c path="String"/></f>
			<meta><m n=":functionCode"><e><![CDATA["return ::String(Kore::Display::get(num)->name());"]]></e></m></meta>
		</get_name>
		<x public="1" get="accessor" set="null"><x path="Int"/></x>
		<get_x set="method" line="71">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e><![CDATA["return Kore::Display::get(num)->x();"]]></e></m></meta>
		</get_x>
		<y public="1" get="accessor" set="null"><x path="Int"/></y>
		<get_y set="method" line="78">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e><![CDATA["return Kore::Display::get(num)->y();"]]></e></m></meta>
		</get_y>
		<width public="1" get="accessor" set="null"><x path="Int"/></width>
		<get_width set="method" line="85">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e><![CDATA["return Kore::Display::get(num)->width();"]]></e></m></meta>
		</get_width>
		<height public="1" get="accessor" set="null"><x path="Int"/></height>
		<get_height set="method" line="92">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e><![CDATA["return Kore::Display::get(num)->height();"]]></e></m></meta>
		</get_height>
		<frequency public="1" get="accessor" set="null"><x path="Int"/></frequency>
		<get_frequency set="method" line="99">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e><![CDATA["return Kore::Display::get(num)->frequency();"]]></e></m></meta>
		</get_frequency>
		<pixelsPerInch public="1" get="accessor" set="null"><x path="Int"/></pixelsPerInch>
		<get_pixelsPerInch set="method" line="106">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e><![CDATA["return Kore::Display::get(num)->pixelsPerInch();"]]></e></m></meta>
		</get_pixelsPerInch>
		<modes public="1" get="accessor" set="null"><c path="Array"><c path="kha.DisplayMode"/></c></modes>
		<allModes expr="null">
			<c path="Array"><c path="kha.DisplayMode"/></c>
			<meta><m n=":value"><e>null</e></m></meta>
		</allModes>
		<modeCount set="method" line="115">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e><![CDATA["return Kore::Display::get(num)->countAvailableModes();"]]></e></m></meta>
		</modeCount>
		<getModeWidth set="method" line="120">
			<f a="num">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["return Kore::Display::get(num)->availableMode(num).width;"]]></e></m></meta>
		</getModeWidth>
		<getModeHeight set="method" line="125">
			<f a="num">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["return Kore::Display::get(num)->availableMode(num).height;"]]></e></m></meta>
		</getModeHeight>
		<getModeFrequency set="method" line="130">
			<f a="num">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["return Kore::Display::get(num)->availableMode(num).frequency;"]]></e></m></meta>
		</getModeFrequency>
		<getModeBitsPerPixel set="method" line="135">
			<f a="num">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["return Kore::Display::get(num)->availableMode(num).bitsPerPixel;"]]></e></m></meta>
		</getModeBitsPerPixel>
		<initModes set="method" line="139"><f a=""><x path="Void"/></f></initModes>
		<get_modes set="method" line="148"><f a=""><c path="Array"><c path="kha.DisplayMode"/></c></f></get_modes>
		<new set="method" line="12"><f a="num">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":headerCode"><e><![CDATA["\n#include <Kore/pch.h>\n#include <Kore/Display.h>\n"]]></e></m>
		</meta>
	</class>
	<class path="kha.DisplayMode" params="" file="C:\HaxeLibraries\Kha\Sources/kha/DisplayMode.hx">
		<width public="1"><x path="Int"/></width>
		<height public="1"><x path="Int"/></height>
		<frequency public="1"><x path="Int"/></frequency>
		<bitsPerPixel public="1"><x path="Int"/></bitsPerPixel>
		<new public="1" set="method" line="9"><f a="width:height:frequency:bitsPerPixel">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="kha.FastFloat" params="" file="C:\HaxeLibraries\Kha\Sources/kha/FastFloat.hx"><x path="cpp.Float32"/></typedef>
	<typedef path="kha.Font" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/Font.hx"><c path="kha.Kravur"/></typedef>
	<class path="kha.Framebuffer" params="" file="C:\HaxeLibraries\Kha\Sources/kha/Framebuffer.hx">
		<implements path="kha.Canvas"/>
		<window><x path="Int"/></window>
		<graphics1><c path="kha.graphics1.Graphics"/></graphics1>
		<graphics2><c path="kha.graphics2.Graphics"/></graphics2>
		<graphics4><c path="kha.graphics4.Graphics"/></graphics4>
		<init public="1" set="method" line="27">
			<f a="g1:g2:g4">
				<c path="kha.graphics1.Graphics"/>
				<c path="kha.graphics2.Graphics"/>
				<c path="kha.graphics4.Graphics"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":noDoc"/>
			</meta>
		</init>
		<g1 public="1" get="accessor" set="null">
			<c path="kha.graphics1.Graphics"/>
			<haxe_doc>* Returns a kha.graphics1.Graphics interface for the framebuffer.</haxe_doc>
		</g1>
		<get_g1 set="method" line="39"><f a=""><c path="kha.graphics1.Graphics"/></f></get_g1>
		<g2 public="1" get="accessor" set="null">
			<c path="kha.graphics2.Graphics"/>
			<haxe_doc>* Returns a kha.graphics2.Graphics interface for the framebuffer.</haxe_doc>
		</g2>
		<get_g2 set="method" line="48"><f a=""><c path="kha.graphics2.Graphics"/></f></get_g2>
		<g4 public="1" get="accessor" set="null">
			<c path="kha.graphics4.Graphics"/>
			<haxe_doc>* Returns a kha.graphics4.Graphics interface for the framebuffer.</haxe_doc>
		</g4>
		<get_g4 set="method" line="57"><f a=""><c path="kha.graphics4.Graphics"/></f></get_g4>
		<width public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>* Returns a kha.graphics5.Graphics interface for the framebuffer.</haxe_doc>
		</width>
		<get_width set="method" line="75"><f a=""><x path="Int"/></f></get_width>
		<height public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>* Returns the height of the framebuffer in pixels.</haxe_doc>
		</height>
		<get_height set="method" line="84"><f a=""><x path="Int"/></f></get_height>
		<new public="1" set="method" line="17">
			<f a="window:g1:g2:g4">
				<x path="Int"/>
				<c path="kha.graphics1.Graphics"/>
				<c path="kha.graphics2.Graphics"/>
				<c path="kha.graphics4.Graphics"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":noDoc"/>
			</meta>
		</new>
		<haxe_doc>* A Framebuffer object represents the framebuffer of a kha.Window, which
 * typically contains a color, depth and stencil buffer. It is used to
 * query Graphics interfaces for rendering images which are directly visible.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.FramebufferOptions" params="" file="C:\HaxeLibraries\Kha\Sources/kha/FramebufferOptions.hx">
		<frequency public="1" expr="60">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>60</e></m>
				<m n=":optional"/>
			</meta>
		</frequency>
		<verticalSync public="1" expr="true">
			<x path="Bool"/>
			<meta>
				<m n=":value"><e>true</e></m>
				<m n=":optional"/>
			</meta>
		</verticalSync>
		<colorBufferBits public="1" expr="32">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>32</e></m>
				<m n=":optional"/>
			</meta>
		</colorBufferBits>
		<depthBufferBits public="1" expr="16">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>16</e></m>
				<m n=":optional"/>
			</meta>
		</depthBufferBits>
		<stencilBufferBits public="1" expr="8">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>8</e></m>
				<m n=":optional"/>
			</meta>
		</stencilBufferBits>
		<samplesPerPixel public="1" expr="1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>1</e></m>
				<m n=":optional"/>
			</meta>
		</samplesPerPixel>
		<new public="1" set="method" line="12">
			<f a="?frequency:?verticalSync:?colorBufferBits:?depthBufferBits:?stencilBufferBits:?samplesPerPixel" v="60:true:32:16:8:1">
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ samplesPerPixel : 1, stencilBufferBits : 8, depthBufferBits : 16, colorBufferBits : 32, verticalSync : true, frequency : 60 }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="kha.Resource" params="" file="C:\HaxeLibraries\Kha\Sources/kha/Resource.hx" interface="1">
		<unload public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Unload the resource from memory. Normally called by the Loader.</haxe_doc>
		</unload>
		<haxe_doc>* Interface representing a generic application resource.
 * It can go from images, to sound or music, videos or blobs.</haxe_doc>
	</class>
	<class path="kha.Image" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/Image.hx">
		<implements path="kha.Resource"/>
		<implements path="kha.Canvas"/>
		<createFromVideo public="1" set="method" line="25" static="1"><f a="video">
	<c path="kha.Video"/>
	<c path="kha.Image"/>
</f></createFromVideo>
		<create public="1" set="method" line="32" static="1">
			<f a="width:height:?format:?usage" v="::null:null">
				<x path="Int"/>
				<x path="Int"/>
				<x path="kha.graphics4.TextureFormat"/>
				<x path="kha.graphics4.Usage"/>
				<c path="kha.Image"/>
			</f>
			<meta><m n=":value"><e>{ usage : null, format : null }</e></m></meta>
		</create>
		<create3D public="1" set="method" line="36" static="1">
			<f a="width:height:depth:?format:?usage" v=":::null:null">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="kha.graphics4.TextureFormat"/>
				<x path="kha.graphics4.Usage"/>
				<c path="kha.Image"/>
			</f>
			<meta><m n=":value"><e>{ usage : null, format : null }</e></m></meta>
		</create3D>
		<createRenderTarget public="1" set="method" line="40" static="1">
			<f a="width:height:?format:?depthStencil:?antiAliasingSamples:?contextId" v="::null:NoDepthAndStencil:1:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="kha.graphics4.TextureFormat"/>
				<x path="kha.graphics4.DepthStencilFormat"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="kha.Image"/>
			</f>
			<meta><m n=":value"><e>{ contextId : 0, antiAliasingSamples : 1, depthStencil : NoDepthAndStencil, format : null }</e></m></meta>
		</createRenderTarget>
		<createArray public="1" set="method" line="47" static="1">
			<f a="images:?format" v=":null">
				<c path="Array"><c path="kha.Image"/></c>
				<x path="kha.graphics4.TextureFormat"/>
				<c path="kha.Image"/>
			</f>
			<meta><m n=":value"><e>{ format : null }</e></m></meta>
			<haxe_doc>* Textures in array mast be readable!</haxe_doc>
		</createArray>
		<initArrayTexture set="method" line="61" static="1">
			<f a="source:images">
				<c path="kha.Image"/>
				<c path="Array"><c path="kha.Image"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tsource->textureArrayTextures = new Kore::Graphics4::Image*[images->length];\r\n\t\tfor (unsigned i = 0; i < images->length; ++i) {\r\n\t\t\tsource->textureArrayTextures[i] = images->__get(i).StaticCast<  ::kha::Image >()->texture;\r\n\t\t}\r\n\t\tsource->textureArray = new Kore::Graphics4::TextureArray(source->textureArrayTextures, images->length);\r\n\t"]]></e></m></meta>
		</initArrayTexture>
		<fromBytes public="1" set="method" line="65" static="1">
			<f a="bytes:width:height:?format:?usage" v=":::null:null">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="kha.graphics4.TextureFormat"/>
				<x path="kha.graphics4.Usage"/>
				<c path="kha.Image"/>
			</f>
			<meta><m n=":value"><e>{ usage : null, format : null }</e></m></meta>
		</fromBytes>
		<fromBytes3D public="1" set="method" line="78" static="1">
			<f a="bytes:width:height:depth:?format:?usage" v="::::null:null">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="kha.graphics4.TextureFormat"/>
				<x path="kha.graphics4.Usage"/>
				<c path="kha.Image"/>
			</f>
			<meta><m n=":value"><e>{ usage : null, format : null }</e></m></meta>
		</fromBytes3D>
		<fromEncodedBytes public="1" set="method" line="91" static="1">
			<f a="bytes:format:doneCallback:errorCallback:?readable" v="::::false">
				<c path="haxe.io.Bytes"/>
				<c path="String"/>
				<f a="">
					<c path="kha.Image"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ readable : false }</e></m></meta>
		</fromEncodedBytes>
		<finalize set="method" line="115" static="1">
			<f a="image">
				<c path="kha.Image"/>
				<x path="Void"/>
			</f>
			<meta><m n=":void"/></meta>
		</finalize>
		<getRenderTargetFormat set="method" line="119" static="1"><f a="format">
	<x path="kha.graphics4.TextureFormat"/>
	<x path="Int"/>
</f></getRenderTargetFormat>
		<getDepthBufferBits set="method" line="140" static="1"><f a="depthAndStencil">
	<x path="kha.graphics4.DepthStencilFormat"/>
	<x path="Int"/>
</f></getDepthBufferBits>
		<getStencilBufferBits set="method" line="151" static="1"><f a="depthAndStencil">
	<x path="kha.graphics4.DepthStencilFormat"/>
	<x path="Int"/>
</f></getStencilBufferBits>
		<getTextureFormat set="method" line="162" static="1"><f a="format">
	<x path="kha.graphics4.TextureFormat"/>
	<x path="Int"/>
</f></getTextureFormat>
		<_create2 public="1" set="method" line="180" static="1">
			<f a="width:height:format:readable:renderTarget:depthStencil:antiAliasing:contextId">
				<x path="Int"/>
				<x path="Int"/>
				<x path="kha.graphics4.TextureFormat"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="kha.graphics4.DepthStencilFormat"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="kha.Image"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_create2>
		<_create3 public="1" set="method" line="189" static="1">
			<f a="width:height:depth:format:readable:contextId">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="kha.graphics4.TextureFormat"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="kha.Image"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_create3>
		<createEmpty public="1" set="method" line="216" static="1"><f a="readable:floatFormat">
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="kha.Image"/>
</f></createEmpty>
		<maxSize public="1" get="accessor" set="null" static="1"><x path="Int"/></maxSize>
		<get_maxSize public="1" set="method" line="264" static="1"><f a=""><x path="Int"/></f></get_maxSize>
		<nonPow2Supported public="1" get="accessor" set="null" static="1"><x path="Bool"/></nonPow2Supported>
		<get_nonPow2Supported public="1" set="method" line="271" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":functionCode"><e>"return Kore::Graphics4::nonPow2TexturesSupported();"</e></m></meta>
		</get_nonPow2Supported>
		<renderTargetsInvertedY public="1" set="method" line="276" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":functionCode"><e>"return Kore::Graphics4::renderTargetsInvertedY();"</e></m></meta>
		</renderTargetsInvertedY>
		<formatByteSize set="method" line="396" static="1"><f a="format">
	<x path="kha.graphics4.TextureFormat"/>
	<x path="Int"/>
</f></formatByteSize>
		<format><x path="kha.graphics4.TextureFormat"/></format>
		<readable><x path="Bool"/></readable>
		<graphics1><c path="kha.graphics1.Graphics"/></graphics1>
		<graphics2><c path="kha.graphics2.Graphics"/></graphics2>
		<graphics4><c path="kha.graphics4.Graphics"/></graphics4>
		<initFromBytes set="method" line="74">
			<f a="bytes:width:height:format">
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["texture = new Kore::Graphics4::Texture(bytes.GetPtr()->GetBase(), width, height, (Kore::Graphics1::Image::Format)format, readable);"]]></e></m></meta>
		</initFromBytes>
		<initFromBytes3D set="method" line="87">
			<f a="bytes:width:height:depth:format">
				<t path="haxe.io.BytesData"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["texture = new Kore::Graphics4::Texture(bytes.GetPtr()->GetBase(), width, height, depth, (Kore::Graphics1::Image::Format)format, readable);"]]></e></m></meta>
		</initFromBytes3D>
		<initFromEncodedBytes set="method" line="100">
			<f a="bytes:format">
				<t path="haxe.io.BytesData"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["texture = new Kore::Graphics4::Texture(bytes.GetPtr()->GetBase(), bytes.GetPtr()->length, format.c_str(), readable);"]]></e></m></meta>
		</initFromEncodedBytes>
		<nullify set="method" line="111">
			<f a=""><x path="Void"/></f>
			<meta><m n=":functionCode"><e>"texture = nullptr; renderTarget = nullptr; textureArray = nullptr; textureArrayTextures = nullptr;"</e></m></meta>
		</nullify>
		<initRenderTarget set="method" line="197">
			<f a="width:height:depthBufferBits:antiAliasing:format:stencilBufferBits:contextId">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"renderTarget = new Kore::Graphics4::RenderTarget(width, height, depthBufferBits, antiAliasing, (Kore::Graphics4::RenderTargetFormat)format, stencilBufferBits, contextId); texture = nullptr;"</e></m></meta>
		</initRenderTarget>
		<init set="method" line="202">
			<f a="width:height:format">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"texture = new Kore::Graphics4::Texture(width, height, (Kore::Graphics4::Image::Format)format, readable); renderTarget = nullptr;"</e></m></meta>
		</init>
		<init3D set="method" line="207">
			<f a="width:height:depth:format">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"texture = new Kore::Graphics4::Texture(width, height, depth, (Kore::Graphics4::Image::Format)format, readable); renderTarget = nullptr;"</e></m></meta>
		</init3D>
		<initVideo set="method" line="212">
			<f a="video">
				<c path="kha.kore.Video"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["texture = video->video->currentImage(); renderTarget = nullptr;"]]></e></m></meta>
		</initVideo>
		<g1 public="1" get="accessor" set="null"><c path="kha.graphics1.Graphics"/></g1>
		<get_g1 set="method" line="237"><f a=""><c path="kha.graphics1.Graphics"/></f></get_g1>
		<g2 public="1" get="accessor" set="null"><c path="kha.graphics2.Graphics"/></g2>
		<get_g2 set="method" line="246"><f a=""><c path="kha.graphics2.Graphics"/></f></get_g2>
		<g4 public="1" get="accessor" set="null"><c path="kha.graphics4.Graphics"/></g4>
		<get_g4 set="method" line="255"><f a=""><c path="kha.graphics4.Graphics"/></f></get_g4>
		<width public="1" get="accessor" set="null"><x path="Int"/></width>
		<height public="1" get="accessor" set="null"><x path="Int"/></height>
		<depth public="1" get="accessor" set="null"><x path="Int"/></depth>
		<get_width public="1" set="method" line="285">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e><![CDATA["if (texture != nullptr) return texture->width; else return renderTarget->width;"]]></e></m></meta>
		</get_width>
		<get_height public="1" set="method" line="290">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e><![CDATA["if (texture != nullptr) return texture->height; else return renderTarget->height;"]]></e></m></meta>
		</get_height>
		<get_depth public="1" set="method" line="295">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e><![CDATA["if (texture != nullptr) return texture->depth; else return 0;"]]></e></m></meta>
		</get_depth>
		<realWidth public="1" get="accessor" set="null"><x path="Int"/></realWidth>
		<realHeight public="1" get="accessor" set="null"><x path="Int"/></realHeight>
		<get_realWidth public="1" set="method" line="303">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e><![CDATA["if (texture != nullptr) return texture->texWidth; else return renderTarget->texWidth;"]]></e></m></meta>
		</get_realWidth>
		<get_realHeight public="1" set="method" line="308">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e><![CDATA["if (texture != nullptr) return texture->texHeight; else return renderTarget->texHeight;"]]></e></m></meta>
		</get_realHeight>
		<isOpaque public="1" set="method" line="313">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["return (texture->at(x, y) & 0xff) != 0;"]]></e></m></meta>
		</isOpaque>
		<atInternal set="method" line="318">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["return texture->at(x, y);"]]></e></m></meta>
		</atInternal>
		<at public="1" get="inline" set="null" line="322"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="kha.Color"/>
</f></at>
		<unload public="1" set="method" line="327">
			<f a=""><x path="Void"/></f>
			<meta><m n=":functionCode"><e>"delete texture; texture = nullptr; delete renderTarget; renderTarget = nullptr; delete textureArray; textureArray = nullptr; delete[] textureArrayTextures; textureArrayTextures = nullptr;"</e></m></meta>
		</unload>
		<bytes expr="null">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</bytes>
		<lock public="1" set="method" line="338">
			<f a="?level" v="0">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta>
				<m n=":value"><e>{ level : 0 }</e></m>
				<m n=":functionCode"><e><![CDATA["\r\n\t\tint size = texture-> sizeOf(texture->format) * texture->width * texture->height;\r\n\t\tthis->bytes = ::haxe::io::Bytes_obj::alloc(size);\r\n\t\treturn this->bytes;\r\n\t"]]></e></m>
			</meta>
		</lock>
		<unlock public="1" set="method" line="368">
			<f a=""><x path="Void"/></f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tKore::u8* b = bytes->b->Pointer();\r\n\t\tKore::u8* tex = texture->lock();\r\n\t\tint size = texture->sizeOf(texture->format);\r\n\t\tint stride = texture->stride();\r\n\t\tfor (int y = 0; y < texture->height; ++y) {\r\n\t\t\tfor (int x = 0; x < texture->width; ++x) {\r\n#ifdef KORE_DIRECT3D\r\n\t\t\t\tif (texture->format == Kore::Graphics4::Image::RGBA32) {\r\n\t\t\t\t\t//RBGA->BGRA\r\n\t\t\t\t\ttex[y * stride + x * size + 0] = b[(y * texture->width + x) * size + 2];\r\n\t\t\t\t\ttex[y * stride + x * size + 1] = b[(y * texture->width + x) * size + 1];\r\n\t\t\t\t\ttex[y * stride + x * size + 2] = b[(y * texture->width + x) * size + 0];\r\n\t\t\t\t\ttex[y * stride + x * size + 3] = b[(y * texture->width + x) * size + 3];\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n#endif\r\n\t\t\t\t{\r\n\t\t\t\t\tfor (int i = 0; i < size; ++i) {\r\n\t\t\t\t\t\ttex[y * stride + x * size + i] = b[(y * texture->width + x) * size + i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\ttexture->unlock();\r\n\t"]]></e></m></meta>
		</unlock>
		<pixels expr="null">
			<c path="haxe.io.Bytes"/>
			<meta>
				<m n=":value"><e>null</e></m>
				<m n=":ifFeature"><e>"kha.Image.getPixelsInternal"</e></m>
			</meta>
		</pixels>
		<pixelsAllocated expr="false">
			<x path="Bool"/>
			<meta>
				<m n=":value"><e>false</e></m>
				<m n=":ifFeature"><e>"kha.Image.getPixelsInternal"</e></m>
			</meta>
		</pixelsAllocated>
		<getPixelsInternal set="method" line="388">
			<f a="formatSize">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tif (renderTarget == nullptr) return nullptr;\r\n\t\tif (!this->pixelsAllocated) {\r\n\t\t\tint size = formatSize * renderTarget->width * renderTarget->height;\r\n\t\t\tthis->pixels = ::haxe::io::Bytes_obj::alloc(size);\r\n\t\t\tthis->pixelsAllocated = true;\r\n\t\t}\r\n\t\tKore::u8* b = this->pixels->b->Pointer();\r\n\t\trenderTarget->getPixels(b);\r\n\t\treturn this->pixels;\r\n\t"]]></e></m></meta>
		</getPixelsInternal>
		<getPixels public="1" set="method" line="392"><f a=""><c path="haxe.io.Bytes"/></f></getPixels>
		<generateMipmaps public="1" set="method" line="409">
			<f a="levels">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</generateMipmaps>
		<setMipmaps public="1" set="method" line="413">
			<f a="mipmaps">
				<c path="Array"><c path="kha.Image"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setMipmaps>
		<setDepthStencilFrom public="1" set="method" line="421">
			<f a="image">
				<c path="kha.Image"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setDepthStencilFrom>
		<clear public="1" set="method" line="426">
			<f a="x:y:z:width:height:depth:color">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="kha.Color"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["if (texture != nullptr) texture->clear(x, y, z, width, height, depth, color);"]]></e></m></meta>
		</clear>
		<new set="method" line="104"><f a="readable">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":headerCode"><e><![CDATA["\r\n#include <Kore/pch.h>\r\n#include <Kore/Graphics4/Graphics.h>\r\n#include <Kore/Graphics4/TextureArray.h>\r\n"]]></e></m>
			<m n=":headerClassCode"><e>"Kore::Graphics4::Texture* texture; Kore::Graphics4::RenderTarget* renderTarget; Kore::Graphics4::TextureArray* textureArray; Kore::Graphics4::Image** textureArrayTextures;"</e></m>
		</meta>
	</class>
	<class path="kha.AlignedQuad" params="" file="C:\HaxeLibraries\Kha\Sources/kha/Kravur.hx" module="kha.Kravur">
		<x0 public="1"><x path="Float"/></x0>
		<y0 public="1"><x path="Float"/></y0>
		<s0 public="1"><x path="Float"/></s0>
		<t0 public="1"><x path="Float"/></t0>
		<x1 public="1"><x path="Float"/></x1>
		<y1 public="1"><x path="Float"/></y1>
		<s1 public="1"><x path="Float"/></s1>
		<t1 public="1"><x path="Float"/></t1>
		<xadvance public="1"><x path="Float"/></xadvance>
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.KravurImage" params="" file="C:\HaxeLibraries\Kha\Sources/kha/Kravur.hx" module="kha.Kravur">
		<charBlocks public="1" static="1"><c path="Array"><x path="Int"/></c></charBlocks>
		<mySize><x path="Float"/></mySize>
		<chars><x path="haxe.ds.Vector"><c path="kha.graphics2.truetype.Stbtt_bakedchar"/></x></chars>
		<texture><c path="kha.Image"/></texture>
		<width public="1"><x path="Int"/></width>
		<height public="1"><x path="Int"/></height>
		<baseline><x path="Float"/></baseline>
		<getTexture public="1" set="method" line="59"><f a=""><c path="kha.Image"/></f></getTexture>
		<getBakedQuad public="1" set="method" line="63"><f a="q:char_index:xpos:ypos">
	<c path="kha.AlignedQuad"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="kha.AlignedQuad"/>
</f></getBakedQuad>
		<getCharWidth set="method" line="87"><f a="charIndex">
	<x path="Int"/>
	<x path="Float"/>
</f></getCharWidth>
		<getHeight public="1" set="method" line="102"><f a=""><x path="Float"/></f></getHeight>
		<stringWidth public="1" set="method" line="106"><f a="str">
	<c path="String"/>
	<x path="Float"/>
</f></stringWidth>
		<charactersWidth public="1" set="method" line="114"><f a="characters:start:length">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></charactersWidth>
		<getBaselinePosition public="1" set="method" line="122"><f a=""><x path="Float"/></f></getBaselinePosition>
		<new public="1" set="method" line="40"><f a="size:ascent:descent:lineGap:width:height:chars:pixels">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.ds.Vector"><c path="kha.graphics2.truetype.Stbtt_bakedchar"/></x>
	<t path="kha.Blob"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.Kravur" params="" file="C:\HaxeLibraries\Kha\Sources/kha/Kravur.hx">
		<implements path="kha.Resource"/>
		<fromBytes public="1" set="method" line="139" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="kha.Kravur"/>
</f></fromBytes>
		<oldGlyphs><c path="Array"><x path="Int"/></c></oldGlyphs>
		<blob><t path="kha.Blob"/></blob>
		<images expr="new Map()">
			<t path="Map">
				<x path="Int"/>
				<c path="kha.KravurImage"/>
			</t>
			<meta><m n=":value"><e>new Map()</e></m></meta>
		</images>
		<_get public="1" set="method" line="143"><f a="fontSize">
	<x path="Int"/>
	<c path="kha.KravurImage"/>
</f></_get>
		<height public="1" set="method" line="198"><f a="fontSize">
	<x path="Int"/>
	<x path="Float"/>
</f></height>
		<width public="1" set="method" line="202"><f a="fontSize:str">
	<x path="Int"/>
	<c path="String"/>
	<x path="Float"/>
</f></width>
		<widthOfCharacters public="1" set="method" line="206"><f a="fontSize:characters:start:length">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></widthOfCharacters>
		<baseline public="1" set="method" line="210"><f a="fontSize">
	<x path="Int"/>
	<x path="Float"/>
</f></baseline>
		<unload public="1" set="method" line="214"><f a=""><x path="Void"/></f></unload>
		<new public="1" set="method" line="135"><f a="blob">
	<t path="kha.Blob"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.BlobCallback" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/LoaderImpl.hx" module="kha.LoaderImpl">
		<success public="1"><f a="">
	<t path="kha.Blob"/>
	<x path="Void"/>
</f></success>
		<error public="1"><f a="">
	<t path="kha.AssetError"/>
	<x path="Void"/>
</f></error>
		<new public="1" set="method" line="17"><f a="success:error">
	<f a="">
		<t path="kha.Blob"/>
		<x path="Void"/>
	</f>
	<f a="">
		<t path="kha.AssetError"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":headerCode"><e><![CDATA["\r\n#include <Kore/pch.h>\r\n#include <Kore/System.h>\r\n#include <khalib/loader.h>\r\n"]]></e></m>
		</meta>
	</class>
	<class path="kha.ImageCallback" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/LoaderImpl.hx" module="kha.LoaderImpl">
		<success public="1"><f a="">
	<c path="kha.Image"/>
	<x path="Void"/>
</f></success>
		<error public="1"><f a="">
	<t path="kha.AssetError"/>
	<x path="Void"/>
</f></error>
		<new public="1" set="method" line="27"><f a="success:error">
	<f a="">
		<c path="kha.Image"/>
		<x path="Void"/>
	</f>
	<f a="">
		<t path="kha.AssetError"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.SoundCallback" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/LoaderImpl.hx" module="kha.LoaderImpl">
		<success public="1"><f a="">
	<c path="kha.Sound"/>
	<x path="Void"/>
</f></success>
		<error public="1"><f a="">
	<t path="kha.AssetError"/>
	<x path="Void"/>
</f></error>
		<new public="1" set="method" line="37"><f a="success:error">
	<f a="">
		<c path="kha.Sound"/>
		<x path="Void"/>
	</f>
	<f a="">
		<t path="kha.AssetError"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.LoaderImpl" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/LoaderImpl.hx">
		<blobCallbacks expr="new Map&lt;cpp.UInt64,BlobCallback&gt;()" line="44" static="1">
			<x path="haxe.ds.Map">
				<x path="cpp.UInt64"/>
				<c path="kha.BlobCallback"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new Map<cpp.UInt64,BlobCallback>()]]></e></m></meta>
		</blobCallbacks>
		<imageCallbacks expr="new Map&lt;cpp.UInt64,ImageCallback&gt;()" line="45" static="1">
			<x path="haxe.ds.Map">
				<x path="cpp.UInt64"/>
				<c path="kha.ImageCallback"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new Map<cpp.UInt64,ImageCallback>()]]></e></m></meta>
		</imageCallbacks>
		<soundCallbacks expr="new Map&lt;cpp.UInt64,SoundCallback&gt;()" line="46" static="1">
			<x path="haxe.ds.Map">
				<x path="cpp.UInt64"/>
				<c path="kha.SoundCallback"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new Map<cpp.UInt64,SoundCallback>()]]></e></m></meta>
		</soundCallbacks>
		<loadSoundFromDescription public="1" set="method" line="48" static="1"><f a="desc:done:failed">
	<d/>
	<f a="">
		<c path="kha.Sound"/>
		<x path="Void"/>
	</f>
	<f a="">
		<t path="kha.AssetError"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></loadSoundFromDescription>
		<loadSound set="method" line="53" static="1">
			<f a="filename">
				<c path="String"/>
				<x path="cpp.UInt64"/>
			</f>
			<meta><m n=":functionCode"><e>"return kha_loader_load_sound(filename);"</e></m></meta>
		</loadSound>
		<getSoundFormats public="1" set="method" line="57" static="1"><f a=""><c path="Array"><c path="String"/></c></f></getSoundFormats>
		<loadImageFromDescription public="1" set="method" line="61" static="1"><f a="desc:done:failed">
	<d/>
	<f a="">
		<c path="kha.Image"/>
		<x path="Void"/>
	</f>
	<f a="">
		<t path="kha.AssetError"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></loadImageFromDescription>
		<loadImage set="method" line="68" static="1">
			<f a="filename:readable">
				<c path="String"/>
				<x path="Bool"/>
				<x path="cpp.UInt64"/>
			</f>
			<meta><m n=":functionCode"><e>"return kha_loader_load_image(filename, readable);"</e></m></meta>
		</loadImage>
		<getImageFormats public="1" set="method" line="72" static="1"><f a=""><c path="Array"><c path="String"/></c></f></getImageFormats>
		<loadBlobFromDescription public="1" set="method" line="76" static="1"><f a="desc:done:failed">
	<d/>
	<f a="">
		<t path="kha.Blob"/>
		<x path="Void"/>
	</f>
	<f a="">
		<t path="kha.AssetError"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></loadBlobFromDescription>
		<loadBlob set="method" line="81" static="1">
			<f a="filename">
				<c path="String"/>
				<x path="cpp.UInt64"/>
			</f>
			<meta><m n=":functionCode"><e>"return kha_loader_load_blob(filename);"</e></m></meta>
		</loadBlob>
		<loadFontFromDescription public="1" set="method" line="85" static="1"><f a="desc:done:failed">
	<d/>
	<f a="">
		<t path="kha.Font"/>
		<x path="Void"/>
	</f>
	<f a="">
		<t path="kha.AssetError"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></loadFontFromDescription>
		<loadVideoFromDescription public="1" set="method" line="91" static="1"><f a="desc:done:failed">
	<d/>
	<f a="">
		<c path="kha.Video"/>
		<x path="Void"/>
	</f>
	<f a="">
		<t path="kha.AssetError"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></loadVideoFromDescription>
		<videoFormat set="method" line="96" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":functionCode"><e>"return ::String(Kore::System::videoFormats()[0]);"</e></m></meta>
		</videoFormat>
		<getVideoFormats public="1" set="method" line="100" static="1"><f a=""><c path="Array"><c path="String"/></c></f></getVideoFormats>
		<showKeyboard public="1" set="method" line="105" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":functionCode"><e>"Kore::System::showKeyboard();"</e></m></meta>
		</showKeyboard>
		<hideKeyboard public="1" set="method" line="110" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":functionCode"><e>"Kore::System::hideKeyboard();"</e></m></meta>
		</hideKeyboard>
		<loadURL public="1" set="method" line="115" static="1">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"Kore::System::loadURL(url);"</e></m></meta>
		</loadURL>
		<blobLoaded set="method" line="119" static="1">
			<f a="index:bytes">
				<x path="cpp.UInt64"/>
				<t path="haxe.io.BytesData"/>
				<x path="Void"/>
			</f>
			<meta><m n=":keep"/></meta>
		</blobLoaded>
		<blobErrored set="method" line="123" static="1">
			<f a="index:filename">
				<x path="cpp.UInt64"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":keep"/></meta>
		</blobErrored>
		<soundLoadedCompressed set="method" line="127" static="1">
			<f a="index:bytes">
				<x path="cpp.UInt64"/>
				<t path="haxe.io.BytesData"/>
				<x path="Void"/>
			</f>
			<meta><m n=":keep"/></meta>
		</soundLoadedCompressed>
		<soundLoadedUncompressed set="method" line="137" static="1">
			<f a="index:samples:channels:sampleRate:length">
				<x path="cpp.UInt64"/>
				<x path="kha.arrays.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":keep"/></meta>
		</soundLoadedUncompressed>
		<soundErrored set="method" line="147" static="1">
			<f a="index:filename">
				<x path="cpp.UInt64"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":keep"/></meta>
		</soundErrored>
		<createFloat32Array set="method" line="151" static="1">
			<f a=""><x path="kha.arrays.Float32Array"/></f>
			<meta><m n=":keep"/></meta>
		</createFloat32Array>
		<createEmptyImage set="method" line="155" static="1">
			<f a="readable:floatFormat">
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="kha.Image"/>
			</f>
			<meta><m n=":keep"/></meta>
		</createEmptyImage>
		<imageLoaded set="method" line="159" static="1">
			<f a="index:image">
				<x path="cpp.UInt64"/>
				<c path="kha.Image"/>
				<x path="Void"/>
			</f>
			<meta><m n=":keep"/></meta>
		</imageLoaded>
		<imageErrored set="method" line="163" static="1">
			<f a="index:filename">
				<x path="cpp.UInt64"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":keep"/></meta>
		</imageErrored>
		<tick public="1" set="method" line="212" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tkha_file_reference_t file = kha_loader_get_file();\r\n\t\twhile (file.index != 0) {\r\n\t\t\tswitch (file.type) {\r\n\t\t\t\tcase KHA_FILE_TYPE_BLOB:\r\n\t\t\t\t\tif (file.error) {\r\n\t\t\t\t\t\tblobErrored(file.index, file.name);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tArray<unsigned char> buffer = Array_obj<unsigned char>::fromData(file.data.blob.bytes, file.data.blob.size);\r\n\t\t\t\t\t\tblobLoaded(file.index, buffer);\r\n\t\t\t\t\t\tkha_loader_cleanup_blob(file.data.blob);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase KHA_FILE_TYPE_IMAGE:\r\n\t\t\t\t\tif (file.error) {\r\n\t\t\t\t\t\timageErrored(file.index, file.name);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t::kha::Image image = createEmptyImage(file.data.image.readable, file.data.image.image.format == KINC_IMAGE_FORMAT_RGBA128);\r\n\t\t\t\t\t\timage->texture = new Kore::Graphics4::Texture(file.data.image.image.data, file.data.image.image.width, file.data.image.image.height, (Kore::Graphics1::Image::Format)file.data.image.image.format, file.data.image.readable);\r\n\t\t\t\t\t\timageLoaded(file.index, image);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase KHA_FILE_TYPE_SOUND:\r\n\t\t\t\t\tif (file.error) {\r\n\t\t\t\t\t\tsoundErrored(file.index, file.name);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (file.data.sound.samples != NULL) {\r\n\t\t\t\t\t\t::kha::arrays::Float32ArrayPrivate buffer = createFloat32Array();\r\n\t\t\t\t\t\tbuffer->self.data = file.data.sound.samples;\r\n\t\t\t\t\t\tbuffer->self.myLength = file.data.sound.size;\r\n\t\t\t\t\t\tsoundLoadedUncompressed(file.index, buffer, file.data.sound.channels, file.data.sound.sample_rate, file.data.sound.length);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tArray<unsigned char> buffer = Array_obj<unsigned char>::fromData(file.data.sound.compressed_samples, file.data.sound.size);\r\n\t\t\t\t\t\tsoundLoadedCompressed(file.index, buffer);\r\n\t\t\t\t\t\tkha_loader_cleanup_sound(file.data.sound);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tfile = kha_loader_get_file();\r\n\t\t}\r\n\t"]]></e></m></meta>
		</tick>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.TargetRectangle" params="" file="C:\HaxeLibraries\Kha\Sources/kha/Scaler.hx" module="kha.Scaler">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<width public="1"><x path="Float"/></width>
		<height public="1"><x path="Float"/></height>
		<scaleFactor public="1"><x path="Float"/></scaleFactor>
		<rotation public="1"><x path="kha.ScreenRotation"/></rotation>
		<new public="1" set="method" line="21"><f a="x:y:w:h:s:r">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="kha.ScreenRotation"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.Scaler" params="" file="C:\HaxeLibraries\Kha\Sources/kha/Scaler.hx">
		<targetRect public="1" set="method" line="32" static="1"><f a="width:height:destinationWidth:destinationHeight:rotation">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="kha.ScreenRotation"/>
	<c path="kha.TargetRectangle"/>
</f></targetRect>
		<transformXDirectly public="1" set="method" line="103" static="1"><f a="x:y:sourceWidth:sourceHeight:destinationWidth:destinationHeight:rotation">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="kha.ScreenRotation"/>
	<x path="Int"/>
</f></transformXDirectly>
		<transformX public="1" set="method" line="126" static="1">
			<f a="x:y:source:destination:rotation">
				<x path="Int"/>
				<x path="Int"/>
				<c path="kha.Image"/>
				<c path="kha.Canvas"/>
				<x path="kha.ScreenRotation"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Transform the X value from the given position in the source to a position in the destination canvas.
	 *
	 * @param x					The X position.
	 * @param y					The Y position.
	 * @param source			The source image.
	 * @param destination		The destination canvas.
	 * @param rotation			The screen rotation.</haxe_doc>
		</transformX>
		<transformYDirectly public="1" set="method" line="130" static="1"><f a="x:y:sourceWidth:sourceHeight:destinationWidth:destinationHeight:rotation">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="kha.ScreenRotation"/>
	<x path="Int"/>
</f></transformYDirectly>
		<transformY public="1" set="method" line="153" static="1">
			<f a="x:y:source:destination:rotation">
				<x path="Int"/>
				<x path="Int"/>
				<c path="kha.Image"/>
				<c path="kha.Canvas"/>
				<x path="kha.ScreenRotation"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Transform the Y value from the given position in the source to a position in the destination canvas.
	 *
	 * @param x					The X position.
	 * @param y					The Y position.
	 * @param source			The source image.
	 * @param destination		The destination canvas.
	 * @param rotation			The screen rotation.</haxe_doc>
		</transformY>
		<scale public="1" set="method" line="157" static="1"><f a="source:destination:rotation">
	<c path="kha.Image"/>
	<c path="kha.Canvas"/>
	<x path="kha.ScreenRotation"/>
	<x path="Void"/>
</f></scale>
		<getScaledTransformation public="1" set="method" line="166" static="1"><f a="width:height:destinationWidth:destinationHeight:rotation">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="kha.ScreenRotation"/>
	<c path="kha.math.FastMatrix3"/>
</f></getScaledTransformation>
	</class>
	<class path="kha.TimeTask" params="" file="C:\HaxeLibraries\Kha\Sources/kha/Scheduler.hx" module="kha.Scheduler">
		<task public="1"><f a=""><x path="Bool"/></f></task>
		<start public="1"><x path="Float"/></start>
		<period public="1"><x path="Float"/></period>
		<duration public="1"><x path="Float"/></duration>
		<next public="1"><x path="Float"/></next>
		<id public="1"><x path="Int"/></id>
		<groupId public="1"><x path="Int"/></groupId>
		<active public="1"><x path="Bool"/></active>
		<paused public="1"><x path="Bool"/></paused>
		<new public="1" set="method" line="16"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.FrameTask" params="" file="C:\HaxeLibraries\Kha\Sources/kha/Scheduler.hx" module="kha.Scheduler">
		<task public="1"><f a=""><x path="Bool"/></f></task>
		<priority public="1"><x path="Int"/></priority>
		<id public="1"><x path="Int"/></id>
		<active public="1"><x path="Bool"/></active>
		<paused public="1"><x path="Bool"/></paused>
		<new public="1" set="method" line="28"><f a="task:priority:id">
	<f a=""><x path="Bool"/></f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.Scheduler" params="" file="C:\HaxeLibraries\Kha\Sources/kha/Scheduler.hx">
		<timeTasks static="1"><c path="Array"><c path="kha.TimeTask"/></c></timeTasks>
		<pausedTimeTasks static="1"><c path="Array"><c path="kha.TimeTask"/></c></pausedTimeTasks>
		<outdatedTimeTasks static="1"><c path="Array"><c path="kha.TimeTask"/></c></outdatedTimeTasks>
		<timeTasksScratchpad static="1"><c path="Array"><c path="kha.TimeTask"/></c></timeTasksScratchpad>
		<timeWarpSaveTime get="inline" set="null" expr="10.0" line="42" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>10.0</e></m></meta>
		</timeWarpSaveTime>
		<frameTasks static="1"><c path="Array"><c path="kha.FrameTask"/></c></frameTasks>
		<toDeleteFrame static="1"><c path="Array"><c path="kha.FrameTask"/></c></toDeleteFrame>
		<current static="1"><x path="Float"/></current>
		<lastTime static="1"><x path="Float"/></lastTime>
		<frame_tasks_sorted static="1"><x path="Bool"/></frame_tasks_sorted>
		<stopped static="1"><x path="Bool"/></stopped>
		<vsync static="1"><x path="Bool"/></vsync>
		<onedifhz static="1"><x path="Float"/></onedifhz>
		<currentFrameTaskId static="1"><x path="Int"/></currentFrameTaskId>
		<currentTimeTaskId static="1"><x path="Int"/></currentTimeTaskId>
		<currentGroupId static="1"><x path="Int"/></currentGroupId>
		<DIF_COUNT expr="3" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</DIF_COUNT>
		<maxframetime expr="0.5" line="61" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.5</e></m></meta>
		</maxframetime>
		<deltas static="1"><c path="Array"><x path="Float"/></c></deltas>
		<startTime expr="0" line="65" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</startTime>
		<activeTimeTask expr="null" line="67" static="1">
			<c path="kha.TimeTask"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</activeTimeTask>
		<init public="1" set="method" line="69" static="1"><f a=""><x path="Void"/></f></init>
		<start public="1" set="method" line="89" static="1">
			<f a="?restartTimers" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ restartTimers : false }</e></m></meta>
		</start>
		<stop public="1" set="method" line="111" static="1"><f a=""><x path="Void"/></f></stop>
		<isStopped public="1" set="method" line="115" static="1"><f a=""><x path="Bool"/></f></isStopped>
		<warpTimeTasksBack set="method" line="119" static="1"><f a="time:tasks">
	<x path="Float"/>
	<c path="Array"><c path="kha.TimeTask"/></c>
	<x path="Void"/>
</f></warpTimeTasksBack>
		<warp public="1" set="method" line="132" static="1"><f a="time">
	<x path="Float"/>
	<x path="Void"/>
</f></warp>
		<executeFrame public="1" set="method" line="173" static="1"><f a=""><x path="Void"/></f></executeFrame>
		<executeTimeTasks set="method" line="282" static="1"><f a="until">
	<x path="Float"/>
	<x path="Void"/>
</f></executeTimeTasks>
		<archiveTimeTask set="method" line="310" static="1"><f a="timeTask:frameEnd">
	<c path="kha.TimeTask"/>
	<x path="Float"/>
	<x path="Void"/>
</f></archiveTimeTask>
		<time public="1" set="method" line="322" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>* An approximation of the amount of time (in fractional seconds) that elapsed while the game was active.
	 * This value is optimized for achieving smooth framerates.</haxe_doc>
		</time>
		<realTime public="1" set="method" line="329" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>* The amount of time (in fractional seconds) that elapsed since the game started.</haxe_doc>
		</realTime>
		<resetTime public="1" set="method" line="333" static="1"><f a=""><x path="Void"/></f></resetTime>
		<addBreakableFrameTask public="1" set="method" line="346" static="1"><f a="task:priority">
	<f a=""><x path="Bool"/></f>
	<x path="Int"/>
	<x path="Int"/>
</f></addBreakableFrameTask>
		<addFrameTask public="1" set="method" line="352" static="1"><f a="task:priority">
	<f a=""><x path="Void"/></f>
	<x path="Int"/>
	<x path="Int"/>
</f></addFrameTask>
		<pauseFrameTask public="1" set="method" line="359" static="1"><f a="id:paused">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></pauseFrameTask>
		<removeFrameTask public="1" set="method" line="368" static="1"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></removeFrameTask>
		<generateGroupId public="1" set="method" line="377" static="1"><f a=""><x path="Int"/></f></generateGroupId>
		<addBreakableTimeTaskToGroup public="1" set="method" line="381" static="1">
			<f a="groupId:task:start:?period:?duration" v=":::0:0">
				<x path="Int"/>
				<f a=""><x path="Bool"/></f>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ duration : 0, period : 0 }</e></m></meta>
		</addBreakableTimeTaskToGroup>
		<addTimeTaskToGroup public="1" set="method" line="399" static="1">
			<f a="groupId:task:start:?period:?duration" v=":::0:0">
				<x path="Int"/>
				<f a=""><x path="Void"/></f>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ duration : 0, period : 0 }</e></m></meta>
		</addTimeTaskToGroup>
		<addBreakableTimeTask public="1" set="method" line="406" static="1">
			<f a="task:start:?period:?duration" v="::0:0">
				<f a=""><x path="Bool"/></f>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ duration : 0, period : 0 }</e></m></meta>
		</addBreakableTimeTask>
		<addTimeTask public="1" set="method" line="410" static="1">
			<f a="task:start:?period:?duration" v="::0:0">
				<f a=""><x path="Void"/></f>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ duration : 0, period : 0 }</e></m></meta>
		</addTimeTask>
		<getTimeTask set="method" line="414" static="1"><f a="id">
	<x path="Int"/>
	<c path="kha.TimeTask"/>
</f></getTimeTask>
		<pauseTimeTask public="1" set="method" line="429" static="1"><f a="id:paused">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></pauseTimeTask>
		<pauseRunningTimeTask set="method" line="439" static="1"><f a="timeTask:paused">
	<c path="kha.TimeTask"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></pauseRunningTimeTask>
		<pauseTimeTasks public="1" set="method" line="451" static="1"><f a="groupId:paused">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></pauseTimeTasks>
		<removeTimeTask public="1" set="method" line="462" static="1"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></removeTimeTask>
		<removeTimeTasks public="1" set="method" line="470" static="1"><f a="groupId">
	<x path="Int"/>
	<x path="Void"/>
</f></removeTimeTasks>
		<numTasksInSchedule public="1" set="method" line="489" static="1"><f a=""><x path="Int"/></f></numTasksInSchedule>
		<insertSorted set="method" line="493" static="1"><f a="list:task">
	<c path="Array"><c path="kha.TimeTask"/></c>
	<c path="kha.TimeTask"/>
	<x path="Void"/>
</f></insertSorted>
		<sortFrameTasks set="method" line="503" static="1"><f a=""><x path="Void"/></f></sortFrameTasks>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="kha.ScreenRotation" params="" file="C:\HaxeLibraries\Kha\Sources/kha/ScreenRotation.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Enum with all the possible rotations.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="kha._ScreenRotation.ScreenRotation_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/ScreenRotation.hx" private="1" module="kha.ScreenRotation" extern="1">
	<RotationNone public="1" get="inline" set="null" expr="cast 0" line="7" static="1">
		<x path="kha.ScreenRotation"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RotationNone>
	<Rotation90 public="1" get="inline" set="null" expr="cast 90" line="8" static="1">
		<x path="kha.ScreenRotation"/>
		<meta>
			<m n=":value"><e>cast 90</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Rotation90>
	<Rotation180 public="1" get="inline" set="null" expr="cast 180" line="9" static="1">
		<x path="kha.ScreenRotation"/>
		<meta>
			<m n=":value"><e>cast 180</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Rotation180>
	<Rotation270 public="1" get="inline" set="null" expr="cast 270" line="10" static="1">
		<x path="kha.ScreenRotation"/>
		<meta>
			<m n=":value"><e>cast 270</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Rotation270>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="kha._ScreenRotation.ScreenRotation_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/ScreenRotation.hx" private="1" module="kha.ScreenRotation" extern="1">
		<RotationNone public="1" get="inline" set="null" expr="cast 0" line="7" static="1">
			<x path="kha.ScreenRotation"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RotationNone>
		<Rotation90 public="1" get="inline" set="null" expr="cast 90" line="8" static="1">
			<x path="kha.ScreenRotation"/>
			<meta>
				<m n=":value"><e>cast 90</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Rotation90>
		<Rotation180 public="1" get="inline" set="null" expr="cast 180" line="9" static="1">
			<x path="kha.ScreenRotation"/>
			<meta>
				<m n=":value"><e>cast 180</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Rotation180>
		<Rotation270 public="1" get="inline" set="null" expr="cast 270" line="10" static="1">
			<x path="kha.ScreenRotation"/>
			<meta>
				<m n=":value"><e>cast 270</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Rotation270>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="kha.Shaders" params="" file="C:\HaxeLibraries\Kha\Sources/kha/Shaders.hx">
		<painter_colored_fragData0 expr="&quot;s580:AAAARFhCQwKRAhCE2jyY1lWcLP2kpYQBAAAAsAEAAAUAAAA0AAAAjAAAAMAAAAD0AAAANAEAAFJERUZQAAAAAAAAAAAAAAAAAAAAHAAAAAAE::8AAQAAHAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAAAAAAAAwAAAAAAAAAPDwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRFI4AAAAQAAAAA4AAABiEAAD8hAQAAAAAABlAAAD8iAQAAAAAAA2AAAF8iAQAAAAAABGHhAAAAAAAD4AAAFTVEFUdAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;" line="42" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"s580:AAAARFhCQwKRAhCE2jyY1lWcLP2kpYQBAAAAsAEAAAUAAAA0AAAAjAAAAMAAAAD0AAAANAEAAFJERUZQAAAAAAAAAAAAAAAAAAAAHAAAAAAE::8AAQAAHAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAAAAAAAAwAAAAAAAAAPDwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRFI4AAAAQAAAAA4AAABiEAAD8hAQAAAAAABlAAAD8iAQAAAAAAA2AAAF8iAQAAAAAABGHhAAAAAAAD4AAAFTVEFUdAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</e></m></meta>
		</painter_colored_fragData0>
		<painter_colored_frag public="1" expr="null" line="168" static="1">
			<c path="kha.graphics4.FragmentShader"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</painter_colored_frag>
		<painter_colored_vertData0 expr="&quot;s1314:AnZlcnRleENvbG9yAAB2ZXJ0ZXhQb3NpdGlvbgABASRHbG9iYWxzAAABcHJvamVjdGlvbk1hdHJpeAAAAAAAQAAAAAQERFhCQ5A:MgyGPthJiwcRz4ddIcQBAAAAlAMAAAUAAAA0AAAADAEAAFgBAACwAQAAGAMAAFJERUbQAAAAAQAAAEgAAAABAAAAHAAAAAAE:v8AAQAAnAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAJEdsb2JhbHMAq6urPAAAAAEAAABgAAAAQAAAAAAAAAAAAAAAeAAAAAAAAABAAAAAAgAAAIwAAAAAAAAAcHJvamVjdGlvbk1hdHJpeACrq6sDAAMABAAEAAAAAAAAAAAATWljcm9zb2Z0IChSKSBITFNMIFNoYWRlciBDb21waWxlciA2LjMuOTYwMC4xNjM4NACrq0lTR05EAAAAAgAAAAgAAAA4AAAAAAAAAAAAAAADAAAAAAAAAA8PAAA4AAAAAQAAAAAAAAADAAAAAQAAAAcHAABURVhDT09SRACrq6tPU0dOUAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAAPAAAAQQAAAAAAAAABAAAAAwAAAAEAAAAPAAAAVEVYQ09PUkQAU1ZfUG9zaXRpb24Aq6urU0hEUmABAABAAAEAWAAAAFkAAARGjiAAAAAAAAQAAABfAAAD8hAQAAAAAABfAAADchAQAAEAAABlAAAD8iAQAAAAAABnAAAE8iAQAAEAAAABAAAAaAAAAgIAAAA2AAAF8iAQAAAAAABGHhAAAAAAADYAAAVyABAAAAAAAEYSEAABAAAANgAABYIAEAAAAAAAAUAAAAAAgD8RAAAIEgAQAAEAAABGDhAAAAAAAEaOIAAAAAAAAgAAABEAAAgiABAAAQAAAEYOEAAAAAAARo4gAAAAAAADAAAAAAAABxIAEAABAAAAGgAQAAEAAAAKABAAAQAAADYAAAWCIBAAAQAAABoAEAABAAAAOAAAB0IgEAABAAAACgAQAAEAAAABQAAAAAAAPxEAAAgSIBAAAQAAAEYOEAAAAAAARo4gAAAAAAAAAAAAEQAACCIgEAABAAAARg4QAAAAAABGjiAAAAAAAAEAAAA%AAABU1RBVHQAAAALAAAAAgAAAAAAAAAEAAAABgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;" line="42" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"s1314:AnZlcnRleENvbG9yAAB2ZXJ0ZXhQb3NpdGlvbgABASRHbG9iYWxzAAABcHJvamVjdGlvbk1hdHJpeAAAAAAAQAAAAAQERFhCQ5A:MgyGPthJiwcRz4ddIcQBAAAAlAMAAAUAAAA0AAAADAEAAFgBAACwAQAAGAMAAFJERUbQAAAAAQAAAEgAAAABAAAAHAAAAAAE:v8AAQAAnAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAJEdsb2JhbHMAq6urPAAAAAEAAABgAAAAQAAAAAAAAAAAAAAAeAAAAAAAAABAAAAAAgAAAIwAAAAAAAAAcHJvamVjdGlvbk1hdHJpeACrq6sDAAMABAAEAAAAAAAAAAAATWljcm9zb2Z0IChSKSBITFNMIFNoYWRlciBDb21waWxlciA2LjMuOTYwMC4xNjM4NACrq0lTR05EAAAAAgAAAAgAAAA4AAAAAAAAAAAAAAADAAAAAAAAAA8PAAA4AAAAAQAAAAAAAAADAAAAAQAAAAcHAABURVhDT09SRACrq6tPU0dOUAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAAPAAAAQQAAAAAAAAABAAAAAwAAAAEAAAAPAAAAVEVYQ09PUkQAU1ZfUG9zaXRpb24Aq6urU0hEUmABAABAAAEAWAAAAFkAAARGjiAAAAAAAAQAAABfAAAD8hAQAAAAAABfAAADchAQAAEAAABlAAAD8iAQAAAAAABnAAAE8iAQAAEAAAABAAAAaAAAAgIAAAA2AAAF8iAQAAAAAABGHhAAAAAAADYAAAVyABAAAAAAAEYSEAABAAAANgAABYIAEAAAAAAAAUAAAAAAgD8RAAAIEgAQAAEAAABGDhAAAAAAAEaOIAAAAAAAAgAAABEAAAgiABAAAQAAAEYOEAAAAAAARo4gAAAAAAADAAAAAAAABxIAEAABAAAAGgAQAAEAAAAKABAAAQAAADYAAAWCIBAAAQAAABoAEAABAAAAOAAAB0IgEAABAAAACgAQAAEAAAABQAAAAAAAPxEAAAgSIBAAAQAAAEYOEAAAAAAARo4gAAAAAAAAAAAAEQAACCIgEAABAAAARg4QAAAAAABGjiAAAAAAAAEAAAA%AAABU1RBVHQAAAALAAAAAgAAAAAAAAAEAAAABgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</e></m></meta>
		</painter_colored_vertData0>
		<painter_colored_vert public="1" expr="null" line="145" static="1">
			<c path="kha.graphics4.VertexShader"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</painter_colored_vert>
		<painter_image_fragData0 expr="&quot;s931:AAJfdGV4X3NhbXBsZXIAAHRleAAAAERYQkMLuHx52DaqoPgbxVgoLcgLAQAAAKQCAAAFAAAANAAAANwAAAAoAQAAXAEAACgCAABSREVGoAAAAAAAAAAAAAAAAgAAABwAAAAABP::AAEAAG0AAABcAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAGkAAAACAAAABQAAAAQAAAD:::::AAAAAAEAAAAMAAAAX3RleF9zYW1wbGVyAHRleABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKtJU0dORAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAAPDwAAOAAAAAEAAAAAAAAAAwAAAAEAAAADAwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRFLEAAAAQAAAADEAAABaAAADAGAQAAAAAABYGAAEAHAQAAAAAABVVQAAYhAAA:IQEAAAAAAAYhAAAzIQEAABAAAAZQAAA:IgEAAAAAAAaAAAAgEAAABFAAAJ8gAQAAAAAABGEBAAAQAAAEZ%EAAAAAAAAGAQAAAAAAA4AAAH8gAQAAAAAABGDhAAAAAAAEYeEAAAAAAAOAAAB3IgEAAAAAAARgIQAAAAAAD2HxAAAAAAADYAAAWCIBAAAAAAADoAEAAAAAAAPgAAAVNUQVR0AAAABQAAAAEAAAAAAAAAAwAAAAIAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;" line="42" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"s931:AAJfdGV4X3NhbXBsZXIAAHRleAAAAERYQkMLuHx52DaqoPgbxVgoLcgLAQAAAKQCAAAFAAAANAAAANwAAAAoAQAAXAEAACgCAABSREVGoAAAAAAAAAAAAAAAAgAAABwAAAAABP::AAEAAG0AAABcAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAGkAAAACAAAABQAAAAQAAAD:::::AAAAAAEAAAAMAAAAX3RleF9zYW1wbGVyAHRleABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKtJU0dORAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAAPDwAAOAAAAAEAAAAAAAAAAwAAAAEAAAADAwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRFLEAAAAQAAAADEAAABaAAADAGAQAAAAAABYGAAEAHAQAAAAAABVVQAAYhAAA:IQEAAAAAAAYhAAAzIQEAABAAAAZQAAA:IgEAAAAAAAaAAAAgEAAABFAAAJ8gAQAAAAAABGEBAAAQAAAEZ%EAAAAAAAAGAQAAAAAAA4AAAH8gAQAAAAAABGDhAAAAAAAEYeEAAAAAAAOAAAB3IgEAAAAAAARgIQAAAAAAD2HxAAAAAAADYAAAWCIBAAAAAAADoAEAAAAAAAPgAAAVNUQVR0AAAABQAAAAEAAAAAAAAAAwAAAAIAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</e></m></meta>
		</painter_image_fragData0>
		<painter_image_frag public="1" expr="null" line="168" static="1">
			<c path="kha.graphics4.FragmentShader"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</painter_image_frag>
		<painter_image_vertData0 expr="&quot;s1454:A3RleFBvc2l0aW9uAAB2ZXJ0ZXhDb2xvcgABdmVydGV4UG9zaXRpb24AAgEkR2xvYmFscwAAAXByb2plY3Rpb25NYXRyaXgAAAAAAEAAAAAEBERYQkMYRgMBQiEp1Ksh8UKJ6SuGAQAAAPADAAAFAAAANAAAAAwBAABwAQAA4AEAAHQDAABSREVG0AAAAAEAAABIAAAAAQAAABwAAAAABP7:AAEAAJwAAAA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAACRHbG9iYWxzAKurqzwAAAABAAAAYAAAAEAAAAAAAAAAAAAAAHgAAAAAAAAAQAAAAAIAAACMAAAAAAAAAHByb2plY3Rpb25NYXRyaXgAq6urAwADAAQABAAAAAAAAAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dOXAAAAAMAAAAIAAAAUAAAAAAAAAAAAAAAAwAAAAAAAAADAwAAUAAAAAEAAAAAAAAAAwAAAAEAAAAPDwAAUAAAAAIAAAAAAAAAAwAAAAIAAAAHBwAAVEVYQ09PUkQAq6urT1NHTmgAAAADAAAACAAAAFAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFAAAAABAAAAAAAAAAMAAAABAAAAAwwAAFkAAAAAAAAAAQAAAAMAAAACAAAADwAAAFRFWENPT1JEAFNWX1Bvc2l0aW9uAKurq1NIRFKMAQAAQAABAGMAAABZAAAERo4gAAAAAAAEAAAAXwAAAzIQEAAAAAAAXwAAA:IQEAABAAAAXwAAA3IQEAACAAAAZQAAA:IgEAAAAAAAZQAAAzIgEAABAAAAZwAABPIgEAACAAAAAQAAAGgAAAICAAAANgAABfIgEAAAAAAARh4QAAEAAAA2AAAFMiAQAAEAAABGEBAAAAAAADYAAAVyABAAAAAAAEYSEAACAAAANgAABYIAEAAAAAAAAUAAAAAAgD8RAAAIEgAQAAEAAABGDhAAAAAAAEaOIAAAAAAAAgAAABEAAAgiABAAAQAAAEYOEAAAAAAARo4gAAAAAAADAAAAAAAABxIAEAABAAAAGgAQAAEAAAAKABAAAQAAADYAAAWCIBAAAgAAABoAEAABAAAAOAAAB0IgEAACAAAACgAQAAEAAAABQAAAAAAAPxEAAAgSIBAAAgAAAEYOEAAAAAAARo4gAAAAAAAAAAAAEQAACCIgEAACAAAARg4QAAAAAABGjiAAAAAAAAEAAAA%AAABU1RBVHQAAAAMAAAAAgAAAAAAAAAGAAAABgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;" line="42" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"s1454:A3RleFBvc2l0aW9uAAB2ZXJ0ZXhDb2xvcgABdmVydGV4UG9zaXRpb24AAgEkR2xvYmFscwAAAXByb2plY3Rpb25NYXRyaXgAAAAAAEAAAAAEBERYQkMYRgMBQiEp1Ksh8UKJ6SuGAQAAAPADAAAFAAAANAAAAAwBAABwAQAA4AEAAHQDAABSREVG0AAAAAEAAABIAAAAAQAAABwAAAAABP7:AAEAAJwAAAA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAACRHbG9iYWxzAKurqzwAAAABAAAAYAAAAEAAAAAAAAAAAAAAAHgAAAAAAAAAQAAAAAIAAACMAAAAAAAAAHByb2plY3Rpb25NYXRyaXgAq6urAwADAAQABAAAAAAAAAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dOXAAAAAMAAAAIAAAAUAAAAAAAAAAAAAAAAwAAAAAAAAADAwAAUAAAAAEAAAAAAAAAAwAAAAEAAAAPDwAAUAAAAAIAAAAAAAAAAwAAAAIAAAAHBwAAVEVYQ09PUkQAq6urT1NHTmgAAAADAAAACAAAAFAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFAAAAABAAAAAAAAAAMAAAABAAAAAwwAAFkAAAAAAAAAAQAAAAMAAAACAAAADwAAAFRFWENPT1JEAFNWX1Bvc2l0aW9uAKurq1NIRFKMAQAAQAABAGMAAABZAAAERo4gAAAAAAAEAAAAXwAAAzIQEAAAAAAAXwAAA:IQEAABAAAAXwAAA3IQEAACAAAAZQAAA:IgEAAAAAAAZQAAAzIgEAABAAAAZwAABPIgEAACAAAAAQAAAGgAAAICAAAANgAABfIgEAAAAAAARh4QAAEAAAA2AAAFMiAQAAEAAABGEBAAAAAAADYAAAVyABAAAAAAAEYSEAACAAAANgAABYIAEAAAAAAAAUAAAAAAgD8RAAAIEgAQAAEAAABGDhAAAAAAAEaOIAAAAAAAAgAAABEAAAgiABAAAQAAAEYOEAAAAAAARo4gAAAAAAADAAAAAAAABxIAEAABAAAAGgAQAAEAAAAKABAAAQAAADYAAAWCIBAAAgAAABoAEAABAAAAOAAAB0IgEAACAAAACgAQAAEAAAABQAAAAAAAPxEAAAgSIBAAAgAAAEYOEAAAAAAARo4gAAAAAAAAAAAAEQAACCIgEAACAAAARg4QAAAAAABGjiAAAAAAAAEAAAA%AAABU1RBVHQAAAAMAAAAAgAAAAAAAAAGAAAABgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</e></m></meta>
		</painter_image_vertData0>
		<painter_image_vert public="1" expr="null" line="145" static="1">
			<c path="kha.graphics4.VertexShader"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</painter_image_vert>
		<painter_text_fragData0 expr="&quot;s894:AAJfdGV4X3NhbXBsZXIAAHRleAAAAERYQkN4eKkSkOMyc:NS8ppPD1BYAQAAAIgCAAAFAAAANAAAANwAAAAoAQAAXAEAAAwCAABSREVGoAAAAAAAAAAAAAAAAgAAABwAAAAABP::AAEAAG0AAABcAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAGkAAAACAAAABQAAAAQAAAD:::::AAAAAAEAAAAMAAAAX3RleF9zYW1wbGVyAHRleABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKtJU0dORAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAAPDwAAOAAAAAEAAAAAAAAAAwAAAAEAAAADAwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRFKoAAAAQAAAACoAAABaAAADAGAQAAAAAABYGAAEAHAQAAAAAABVVQAAYhAAA:IQEAAAAAAAYhAAAzIQEAABAAAAZQAAA:IgEAAAAAAAaAAAAgEAAABFAAAJ8gAQAAAAAABGEBAAAQAAAEZ%EAAAAAAAAGAQAAAAAAA4AAAHgiAQAAAAAAAKABAAAAAAADoQEAAAAAAANgAABXIgEAAAAAAARhIQAAAAAAA%AAABU1RBVHQAAAAEAAAAAQAAAAAAAAADAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;" line="42" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"s894:AAJfdGV4X3NhbXBsZXIAAHRleAAAAERYQkN4eKkSkOMyc:NS8ppPD1BYAQAAAIgCAAAFAAAANAAAANwAAAAoAQAAXAEAAAwCAABSREVGoAAAAAAAAAAAAAAAAgAAABwAAAAABP::AAEAAG0AAABcAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAGkAAAACAAAABQAAAAQAAAD:::::AAAAAAEAAAAMAAAAX3RleF9zYW1wbGVyAHRleABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKtJU0dORAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAAPDwAAOAAAAAEAAAAAAAAAAwAAAAEAAAADAwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRFKoAAAAQAAAACoAAABaAAADAGAQAAAAAABYGAAEAHAQAAAAAABVVQAAYhAAA:IQEAAAAAAAYhAAAzIQEAABAAAAZQAAA:IgEAAAAAAAaAAAAgEAAABFAAAJ8gAQAAAAAABGEBAAAQAAAEZ%EAAAAAAAAGAQAAAAAAA4AAAHgiAQAAAAAAAKABAAAAAAADoQEAAAAAAANgAABXIgEAAAAAAARhIQAAAAAAA%AAABU1RBVHQAAAAEAAAAAQAAAAAAAAADAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</e></m></meta>
		</painter_text_fragData0>
		<painter_text_frag public="1" expr="null" line="168" static="1">
			<c path="kha.graphics4.FragmentShader"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</painter_text_frag>
		<painter_text_vertData0 expr="&quot;s1454:A3RleFBvc2l0aW9uAAB2ZXJ0ZXhDb2xvcgABdmVydGV4UG9zaXRpb24AAgEkR2xvYmFscwAAAXByb2plY3Rpb25NYXRyaXgAAAAAAEAAAAAEBERYQkMYRgMBQiEp1Ksh8UKJ6SuGAQAAAPADAAAFAAAANAAAAAwBAABwAQAA4AEAAHQDAABSREVG0AAAAAEAAABIAAAAAQAAABwAAAAABP7:AAEAAJwAAAA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAACRHbG9iYWxzAKurqzwAAAABAAAAYAAAAEAAAAAAAAAAAAAAAHgAAAAAAAAAQAAAAAIAAACMAAAAAAAAAHByb2plY3Rpb25NYXRyaXgAq6urAwADAAQABAAAAAAAAAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dOXAAAAAMAAAAIAAAAUAAAAAAAAAAAAAAAAwAAAAAAAAADAwAAUAAAAAEAAAAAAAAAAwAAAAEAAAAPDwAAUAAAAAIAAAAAAAAAAwAAAAIAAAAHBwAAVEVYQ09PUkQAq6urT1NHTmgAAAADAAAACAAAAFAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFAAAAABAAAAAAAAAAMAAAABAAAAAwwAAFkAAAAAAAAAAQAAAAMAAAACAAAADwAAAFRFWENPT1JEAFNWX1Bvc2l0aW9uAKurq1NIRFKMAQAAQAABAGMAAABZAAAERo4gAAAAAAAEAAAAXwAAAzIQEAAAAAAAXwAAA:IQEAABAAAAXwAAA3IQEAACAAAAZQAAA:IgEAAAAAAAZQAAAzIgEAABAAAAZwAABPIgEAACAAAAAQAAAGgAAAICAAAANgAABfIgEAAAAAAARh4QAAEAAAA2AAAFMiAQAAEAAABGEBAAAAAAADYAAAVyABAAAAAAAEYSEAACAAAANgAABYIAEAAAAAAAAUAAAAAAgD8RAAAIEgAQAAEAAABGDhAAAAAAAEaOIAAAAAAAAgAAABEAAAgiABAAAQAAAEYOEAAAAAAARo4gAAAAAAADAAAAAAAABxIAEAABAAAAGgAQAAEAAAAKABAAAQAAADYAAAWCIBAAAgAAABoAEAABAAAAOAAAB0IgEAACAAAACgAQAAEAAAABQAAAAAAAPxEAAAgSIBAAAgAAAEYOEAAAAAAARo4gAAAAAAAAAAAAEQAACCIgEAACAAAARg4QAAAAAABGjiAAAAAAAAEAAAA%AAABU1RBVHQAAAAMAAAAAgAAAAAAAAAGAAAABgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;" line="42" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"s1454:A3RleFBvc2l0aW9uAAB2ZXJ0ZXhDb2xvcgABdmVydGV4UG9zaXRpb24AAgEkR2xvYmFscwAAAXByb2plY3Rpb25NYXRyaXgAAAAAAEAAAAAEBERYQkMYRgMBQiEp1Ksh8UKJ6SuGAQAAAPADAAAFAAAANAAAAAwBAABwAQAA4AEAAHQDAABSREVG0AAAAAEAAABIAAAAAQAAABwAAAAABP7:AAEAAJwAAAA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAACRHbG9iYWxzAKurqzwAAAABAAAAYAAAAEAAAAAAAAAAAAAAAHgAAAAAAAAAQAAAAAIAAACMAAAAAAAAAHByb2plY3Rpb25NYXRyaXgAq6urAwADAAQABAAAAAAAAAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dOXAAAAAMAAAAIAAAAUAAAAAAAAAAAAAAAAwAAAAAAAAADAwAAUAAAAAEAAAAAAAAAAwAAAAEAAAAPDwAAUAAAAAIAAAAAAAAAAwAAAAIAAAAHBwAAVEVYQ09PUkQAq6urT1NHTmgAAAADAAAACAAAAFAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFAAAAABAAAAAAAAAAMAAAABAAAAAwwAAFkAAAAAAAAAAQAAAAMAAAACAAAADwAAAFRFWENPT1JEAFNWX1Bvc2l0aW9uAKurq1NIRFKMAQAAQAABAGMAAABZAAAERo4gAAAAAAAEAAAAXwAAAzIQEAAAAAAAXwAAA:IQEAABAAAAXwAAA3IQEAACAAAAZQAAA:IgEAAAAAAAZQAAAzIgEAABAAAAZwAABPIgEAACAAAAAQAAAGgAAAICAAAANgAABfIgEAAAAAAARh4QAAEAAAA2AAAFMiAQAAEAAABGEBAAAAAAADYAAAVyABAAAAAAAEYSEAACAAAANgAABYIAEAAAAAAAAUAAAAAAgD8RAAAIEgAQAAEAAABGDhAAAAAAAEaOIAAAAAAAAgAAABEAAAgiABAAAQAAAEYOEAAAAAAARo4gAAAAAAADAAAAAAAABxIAEAABAAAAGgAQAAEAAAAKABAAAQAAADYAAAWCIBAAAgAAABoAEAABAAAAOAAAB0IgEAACAAAACgAQAAEAAAABQAAAAAAAPxEAAAgSIBAAAgAAAEYOEAAAAAAARo4gAAAAAAAAAAAAEQAACCIgEAACAAAARg4QAAAAAABGjiAAAAAAAAEAAAA%AAABU1RBVHQAAAAMAAAAAgAAAAAAAAAGAAAABgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</e></m></meta>
		</painter_text_vertData0>
		<painter_text_vert public="1" expr="null" line="145" static="1">
			<c path="kha.graphics4.VertexShader"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</painter_text_vert>
		<painter_video_fragData0 expr="&quot;s931:AAJfdGV4X3NhbXBsZXIAAHRleAAAAERYQkMLuHx52DaqoPgbxVgoLcgLAQAAAKQCAAAFAAAANAAAANwAAAAoAQAAXAEAACgCAABSREVGoAAAAAAAAAAAAAAAAgAAABwAAAAABP::AAEAAG0AAABcAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAGkAAAACAAAABQAAAAQAAAD:::::AAAAAAEAAAAMAAAAX3RleF9zYW1wbGVyAHRleABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKtJU0dORAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAAPDwAAOAAAAAEAAAAAAAAAAwAAAAEAAAADAwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRFLEAAAAQAAAADEAAABaAAADAGAQAAAAAABYGAAEAHAQAAAAAABVVQAAYhAAA:IQEAAAAAAAYhAAAzIQEAABAAAAZQAAA:IgEAAAAAAAaAAAAgEAAABFAAAJ8gAQAAAAAABGEBAAAQAAAEZ%EAAAAAAAAGAQAAAAAAA4AAAH8gAQAAAAAABGDhAAAAAAAEYeEAAAAAAAOAAAB3IgEAAAAAAARgIQAAAAAAD2HxAAAAAAADYAAAWCIBAAAAAAADoAEAAAAAAAPgAAAVNUQVR0AAAABQAAAAEAAAAAAAAAAwAAAAIAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;" line="42" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"s931:AAJfdGV4X3NhbXBsZXIAAHRleAAAAERYQkMLuHx52DaqoPgbxVgoLcgLAQAAAKQCAAAFAAAANAAAANwAAAAoAQAAXAEAACgCAABSREVGoAAAAAAAAAAAAAAAAgAAABwAAAAABP::AAEAAG0AAABcAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAGkAAAACAAAABQAAAAQAAAD:::::AAAAAAEAAAAMAAAAX3RleF9zYW1wbGVyAHRleABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKtJU0dORAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAAPDwAAOAAAAAEAAAAAAAAAAwAAAAEAAAADAwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRFLEAAAAQAAAADEAAABaAAADAGAQAAAAAABYGAAEAHAQAAAAAABVVQAAYhAAA:IQEAAAAAAAYhAAAzIQEAABAAAAZQAAA:IgEAAAAAAAaAAAAgEAAABFAAAJ8gAQAAAAAABGEBAAAQAAAEZ%EAAAAAAAAGAQAAAAAAA4AAAH8gAQAAAAAABGDhAAAAAAAEYeEAAAAAAAOAAAB3IgEAAAAAAARgIQAAAAAAD2HxAAAAAAADYAAAWCIBAAAAAAADoAEAAAAAAAPgAAAVNUQVR0AAAABQAAAAEAAAAAAAAAAwAAAAIAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</e></m></meta>
		</painter_video_fragData0>
		<painter_video_frag public="1" expr="null" line="168" static="1">
			<c path="kha.graphics4.FragmentShader"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</painter_video_frag>
		<painter_video_vertData0 expr="&quot;s1454:A3RleFBvc2l0aW9uAAB2ZXJ0ZXhDb2xvcgABdmVydGV4UG9zaXRpb24AAgEkR2xvYmFscwAAAXByb2plY3Rpb25NYXRyaXgAAAAAAEAAAAAEBERYQkMYRgMBQiEp1Ksh8UKJ6SuGAQAAAPADAAAFAAAANAAAAAwBAABwAQAA4AEAAHQDAABSREVG0AAAAAEAAABIAAAAAQAAABwAAAAABP7:AAEAAJwAAAA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAACRHbG9iYWxzAKurqzwAAAABAAAAYAAAAEAAAAAAAAAAAAAAAHgAAAAAAAAAQAAAAAIAAACMAAAAAAAAAHByb2plY3Rpb25NYXRyaXgAq6urAwADAAQABAAAAAAAAAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dOXAAAAAMAAAAIAAAAUAAAAAAAAAAAAAAAAwAAAAAAAAADAwAAUAAAAAEAAAAAAAAAAwAAAAEAAAAPDwAAUAAAAAIAAAAAAAAAAwAAAAIAAAAHBwAAVEVYQ09PUkQAq6urT1NHTmgAAAADAAAACAAAAFAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFAAAAABAAAAAAAAAAMAAAABAAAAAwwAAFkAAAAAAAAAAQAAAAMAAAACAAAADwAAAFRFWENPT1JEAFNWX1Bvc2l0aW9uAKurq1NIRFKMAQAAQAABAGMAAABZAAAERo4gAAAAAAAEAAAAXwAAAzIQEAAAAAAAXwAAA:IQEAABAAAAXwAAA3IQEAACAAAAZQAAA:IgEAAAAAAAZQAAAzIgEAABAAAAZwAABPIgEAACAAAAAQAAAGgAAAICAAAANgAABfIgEAAAAAAARh4QAAEAAAA2AAAFMiAQAAEAAABGEBAAAAAAADYAAAVyABAAAAAAAEYSEAACAAAANgAABYIAEAAAAAAAAUAAAAAAgD8RAAAIEgAQAAEAAABGDhAAAAAAAEaOIAAAAAAAAgAAABEAAAgiABAAAQAAAEYOEAAAAAAARo4gAAAAAAADAAAAAAAABxIAEAABAAAAGgAQAAEAAAAKABAAAQAAADYAAAWCIBAAAgAAABoAEAABAAAAOAAAB0IgEAACAAAACgAQAAEAAAABQAAAAAAAPxEAAAgSIBAAAgAAAEYOEAAAAAAARo4gAAAAAAAAAAAAEQAACCIgEAACAAAARg4QAAAAAABGjiAAAAAAAAEAAAA%AAABU1RBVHQAAAAMAAAAAgAAAAAAAAAGAAAABgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;" line="42" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"s1454:A3RleFBvc2l0aW9uAAB2ZXJ0ZXhDb2xvcgABdmVydGV4UG9zaXRpb24AAgEkR2xvYmFscwAAAXByb2plY3Rpb25NYXRyaXgAAAAAAEAAAAAEBERYQkMYRgMBQiEp1Ksh8UKJ6SuGAQAAAPADAAAFAAAANAAAAAwBAABwAQAA4AEAAHQDAABSREVG0AAAAAEAAABIAAAAAQAAABwAAAAABP7:AAEAAJwAAAA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAACRHbG9iYWxzAKurqzwAAAABAAAAYAAAAEAAAAAAAAAAAAAAAHgAAAAAAAAAQAAAAAIAAACMAAAAAAAAAHByb2plY3Rpb25NYXRyaXgAq6urAwADAAQABAAAAAAAAAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dOXAAAAAMAAAAIAAAAUAAAAAAAAAAAAAAAAwAAAAAAAAADAwAAUAAAAAEAAAAAAAAAAwAAAAEAAAAPDwAAUAAAAAIAAAAAAAAAAwAAAAIAAAAHBwAAVEVYQ09PUkQAq6urT1NHTmgAAAADAAAACAAAAFAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFAAAAABAAAAAAAAAAMAAAABAAAAAwwAAFkAAAAAAAAAAQAAAAMAAAACAAAADwAAAFRFWENPT1JEAFNWX1Bvc2l0aW9uAKurq1NIRFKMAQAAQAABAGMAAABZAAAERo4gAAAAAAAEAAAAXwAAAzIQEAAAAAAAXwAAA:IQEAABAAAAXwAAA3IQEAACAAAAZQAAA:IgEAAAAAAAZQAAAzIgEAABAAAAZwAABPIgEAACAAAAAQAAAGgAAAICAAAANgAABfIgEAAAAAAARh4QAAEAAAA2AAAFMiAQAAEAAABGEBAAAAAAADYAAAVyABAAAAAAAEYSEAACAAAANgAABYIAEAAAAAAAAUAAAAAAgD8RAAAIEgAQAAEAAABGDhAAAAAAAEaOIAAAAAAAAgAAABEAAAgiABAAAQAAAEYOEAAAAAAARo4gAAAAAAADAAAAAAAABxIAEAABAAAAGgAQAAEAAAAKABAAAQAAADYAAAWCIBAAAgAAABoAEAABAAAAOAAAB0IgEAACAAAACgAQAAEAAAABQAAAAAAAPxEAAAgSIBAAAgAAAEYOEAAAAAAARo4gAAAAAAAAAAAAEQAACCIgEAACAAAARg4QAAAAAABGjiAAAAAAAAEAAAA%AAABU1RBVHQAAAAMAAAAAgAAAAAAAAAGAAAABgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</e></m></meta>
		</painter_video_vertData0>
		<painter_video_vert public="1" expr="null" line="145" static="1">
			<c path="kha.graphics4.VertexShader"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</painter_video_vert>
		<init public="1" set="method" line="4" static="1"><f a=""><x path="Void"/></f></init>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":build"><e>kha.internal.ShadersBuilder.build()</e></m>
		</meta>
	</class>
	<class path="kha.Sound" params="" file="C:\HaxeLibraries\Kha\Sources/kha/Sound.hx">
		<implements path="kha.Resource"/>
		<compressedData public="1"><c path="haxe.io.Bytes"/></compressedData>
		<uncompressedData public="1"><x path="kha.arrays.Float32Array"/></uncompressedData>
		<length public="1" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</length>
		<channels public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</channels>
		<sampleRate public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</sampleRate>
		<uncompress public="1" set="method" line="23">
			<f a="done">
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</uncompress>
		<unload public="1" set="method" line="94"><f a=""><x path="Void"/></f></unload>
		<new public="1" set="method" line="18"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* Contains compressed or uncompressed audio data.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":cppFileCode"><e><![CDATA["\n#include <Kore/pch.h>\n#define STB_VORBIS_HEADER_ONLY\n#include <kinc/audio1/stb_vorbis.c>"]]></e></m>
		</meta>
	</class>
	<class path="kha.SystemOptions" params="" file="C:\HaxeLibraries\Kha\Sources/kha/System.hx" module="kha.System">
		<title public="1" expr="&quot;Kha&quot;">
			<c path="String"/>
			<meta>
				<m n=":value"><e>"Kha"</e></m>
				<m n=":optional"/>
			</meta>
		</title>
		<width public="1" expr="-1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>-1</e></m>
				<m n=":optional"/>
			</meta>
		</width>
		<height public="1" expr="-1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>-1</e></m>
				<m n=":optional"/>
			</meta>
		</height>
		<window public="1" expr="null">
			<c path="kha.WindowOptions"/>
			<meta>
				<m n=":value"><e>null</e></m>
				<m n=":optional"/>
			</meta>
		</window>
		<framebuffer public="1" expr="null">
			<c path="kha.FramebufferOptions"/>
			<meta>
				<m n=":value"><e>null</e></m>
				<m n=":optional"/>
			</meta>
		</framebuffer>
		<new public="1" set="method" line="22">
			<f a="?title:?width:?height:?window:?framebuffer" v="&quot;Kha&quot;:-1:-1:null:null">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="kha.WindowOptions"/>
				<c path="kha.FramebufferOptions"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ framebuffer : null, window : null, height : -1, width : -1, title : "Kha" }</e></m></meta>
			<haxe_doc>* Used to provide parameters for System.start
	 * @param title The application title is the default window title (unless the window parameter provides a title of its own)
	 * and is used for various other purposes - for example for save data locations
	 * @param width Just a shortcut which overwrites window.width if set
	 * @param height Just a shortcut which overwrites window.height if set
	 * @param window Optionally provide window options
	 * @param framebuffer Optionally provide framebuffer options</haxe_doc>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<typedef path="kha.OldSystemOptions" params="" file="C:\HaxeLibraries\Kha\Sources/kha/System.hx" module="kha.System"><a>
	<windowMode>
		<x path="Null"><x path="kha.WindowMode"/></x>
		<meta><m n=":optional"/></meta>
	</windowMode>
	<width>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</width>
	<vSync>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</vSync>
	<title>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</title>
	<samplesPerPixel>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</samplesPerPixel>
	<resizable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</resizable>
	<minimizable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</minimizable>
	<maximizable>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
	</maximizable>
	<height>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</height>
</a></typedef>
	<class path="kha.System" params="" file="C:\HaxeLibraries\Kha\Sources/kha/System.hx">
		<renderListeners expr="[]" line="64" static="1">
			<c path="Array"><f a="">
	<c path="Array"><c path="kha.Framebuffer"/></c>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</renderListeners>
		<foregroundListeners expr="[]" line="65" static="1">
			<c path="Array"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</foregroundListeners>
		<resumeListeners expr="[]" line="66" static="1">
			<c path="Array"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</resumeListeners>
		<pauseListeners expr="[]" line="67" static="1">
			<c path="Array"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</pauseListeners>
		<backgroundListeners expr="[]" line="68" static="1">
			<c path="Array"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</backgroundListeners>
		<shutdownListeners expr="[]" line="69" static="1">
			<c path="Array"><f a=""><x path="Void"/></f></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</shutdownListeners>
		<dropFilesListeners expr="[]" line="70" static="1">
			<c path="Array"><f a="">
	<c path="String"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</dropFilesListeners>
		<cutListener expr="null" line="71" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":value"><e>null</e></m></meta>
		</cutListener>
		<copyListener expr="null" line="72" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":value"><e>null</e></m></meta>
		</copyListener>
		<pasteListener expr="null" line="73" static="1">
			<f a="">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>null</e></m></meta>
		</pasteListener>
		<loginListener expr="null" line="74" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":value"><e>null</e></m></meta>
		</loginListener>
		<logoutListener expr="null" line="75" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":value"><e>null</e></m></meta>
		</logoutListener>
		<theTitle static="1"><c path="String"/></theTitle>
		<init public="1" set="method" line="79" static="1">
			<f a="options:callback">
				<t path="kha.OldSystemOptions"/>
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<meta><m n=":deprecated"><e>"Use System.start instead"</e></m></meta>
		</init>
		<start public="1" set="method" line="103" static="1"><f a="options:callback">
	<c path="kha.SystemOptions"/>
	<f a="">
		<c path="kha.Window"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></start>
		<title public="1" get="accessor" set="null" static="1"><c path="String"/></title>
		<get_title set="method" line="110" static="1"><f a=""><c path="String"/></f></get_title>
		<notifyOnRender public="1" set="method" line="115" static="1">
			<f a="listener:?id" v=":0">
				<f a="">
					<c path="kha.Framebuffer"/>
					<x path="Void"/>
				</f>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ id : 0 }</e></m>
				<m n=":deprecated"><e>"Use System.notifyOnFrames instead"</e></m>
			</meta>
		</notifyOnRender>
		<notifyOnFrames public="1" set="method" line="130" static="1">
			<f a="listener">
				<f a="">
					<c path="Array"><c path="kha.Framebuffer"/></c>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>* The provided listener is called when new framebuffers are ready for rendering into.
	 * Each framebuffer corresponds to the kha.Window of the same index, single-window
	 * applications always receive an array of only one framebuffer.
	 * @param listener
	 * The callback to add</haxe_doc>
		</notifyOnFrames>
		<removeFramesListener public="1" set="method" line="139" static="1">
			<f a="listener">
				<f a="">
					<c path="Array"><c path="kha.Framebuffer"/></c>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>* Removes a previously set frames listener.
	 * @param listener
	 * The callback to remove</haxe_doc>
		</removeFramesListener>
		<notifyOnApplicationState public="1" set="method" line="143" static="1"><f a="foregroundListener:resumeListener:pauseListener:backgroundListener:shutdownListener">
	<f a=""><x path="Void"/></f>
	<f a=""><x path="Void"/></f>
	<f a=""><x path="Void"/></f>
	<f a=""><x path="Void"/></f>
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></notifyOnApplicationState>
		<notifyOnDropFiles public="1" set="method" line="151" static="1"><f a="dropFilesListener">
	<f a="">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></notifyOnDropFiles>
		<removeDropListener public="1" set="method" line="155" static="1"><f a="listener">
	<f a="">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></removeDropListener>
		<notifyOnCutCopyPaste public="1" set="method" line="159" static="1"><f a="cutListener:copyListener:pasteListener">
	<f a=""><c path="String"/></f>
	<f a=""><c path="String"/></f>
	<f a="">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></notifyOnCutCopyPaste>
		<notifyOnLoginLogout public="1" set="method" line="165" static="1"><f a="loginListener:logoutListener">
	<f a=""><x path="Void"/></f>
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></notifyOnLoginLogout>
		<login public="1" set="method" line="170" static="1"><f a=""><x path="Void"/></f></login>
		<waitingForLogin public="1" set="method" line="174" static="1"><f a=""><x path="Bool"/></f></waitingForLogin>
		<allowUserChange public="1" set="method" line="178" static="1"><f a=""><x path="Void"/></f></allowUserChange>
		<disallowUserChange public="1" set="method" line="182" static="1"><f a=""><x path="Void"/></f></disallowUserChange>
		<render set="method" line="186" static="1"><f a="framebuffers">
	<c path="Array"><c path="kha.Framebuffer"/></c>
	<x path="Void"/>
</f></render>
		<foreground set="method" line="192" static="1"><f a=""><x path="Void"/></f></foreground>
		<resume set="method" line="198" static="1"><f a=""><x path="Void"/></f></resume>
		<pause set="method" line="204" static="1"><f a=""><x path="Void"/></f></pause>
		<background set="method" line="210" static="1"><f a=""><x path="Void"/></f></background>
		<shutdown set="method" line="216" static="1"><f a=""><x path="Void"/></f></shutdown>
		<dropFiles set="method" line="222" static="1"><f a="filePath">
	<c path="String"/>
	<x path="Void"/>
</f></dropFiles>
		<time public="1" get="accessor" set="null" static="1"><x path="Float"/></time>
		<get_time set="method" line="230" static="1"><f a=""><x path="Float"/></f></get_time>
		<windowWidth public="1" set="method" line="234" static="1">
			<f a="?window" v="0">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ window : 0 }</e></m></meta>
		</windowWidth>
		<windowHeight public="1" set="method" line="238" static="1">
			<f a="?window" v="0">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ window : 0 }</e></m></meta>
		</windowHeight>
		<screenRotation public="1" get="accessor" set="null" static="1"><x path="kha.ScreenRotation"/></screenRotation>
		<get_screenRotation set="method" line="244" static="1"><f a=""><x path="kha.ScreenRotation"/></f></get_screenRotation>
		<systemId public="1" get="accessor" set="null" static="1"><c path="String"/></systemId>
		<get_systemId set="method" line="250" static="1"><f a=""><c path="String"/></f></get_systemId>
		<vibrate public="1" set="method" line="257" static="1">
			<f a="ms">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Pulses the vibration hardware on the device for time in milliseconds, if such hardware exists.</haxe_doc>
		</vibrate>
		<language public="1" get="accessor" set="null" static="1">
			<c path="String"/>
			<haxe_doc>* The IS0 639 system current language identifier.</haxe_doc>
		</language>
		<get_language set="method" line="266" static="1"><f a=""><c path="String"/></f></get_language>
		<stop public="1" set="method" line="274" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Schedules the application to stop as soon as possible. This is not possible on all targets.
	 * @return Returns true if the application can be stopped</haxe_doc>
		</stop>
		<loadUrl public="1" set="method" line="278" static="1"><f a="url">
	<c path="String"/>
	<x path="Void"/>
</f></loadUrl>
		<canSwitchFullscreen public="1" set="method" line="283" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":deprecated"><e>"This only returns a default value"</e></m></meta>
		</canSwitchFullscreen>
		<isFullscreen public="1" set="method" line="288" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":deprecated"><e>"Use the kha.Window API instead"</e></m></meta>
		</isFullscreen>
		<requestFullscreen public="1" set="method" line="293" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":deprecated"><e>"Use the kha.Window API instead"</e></m></meta>
		</requestFullscreen>
		<exitFullscreen public="1" set="method" line="298" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":deprecated"><e>"Use the kha.Window API instead"</e></m></meta>
		</exitFullscreen>
		<notifyOnFullscreenChange public="1" set="method" line="303" static="1">
			<f a="func:error">
				<f a=""><x path="Void"/></f>
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<meta><m n=":deprecated"><e>"This does nothing"</e></m></meta>
		</notifyOnFullscreenChange>
		<removeFullscreenListener public="1" set="method" line="308" static="1">
			<f a="func:error">
				<f a=""><x path="Void"/></f>
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<meta><m n=":deprecated"><e>"This does nothing"</e></m></meta>
		</removeFullscreenListener>
		<changeResolution public="1" set="method" line="313" static="1">
			<f a="width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":deprecated"><e>"This does nothing. On Windows you can use Window.resize instead after setting the mode to ExclusiveFullscreen"</e></m></meta>
		</changeResolution>
		<requestShutdown public="1" set="method" line="318" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":deprecated"><e>"Use System.stop instead"</e></m></meta>
		</requestShutdown>
		<vsync public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":deprecated"><e>"Use the kha.Window API instead"</e></m></meta>
		</vsync>
		<get_vsync set="method" line="325" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":deprecated"><e>"Use the kha.Window API instead"</e></m></meta>
		</get_vsync>
		<refreshRate public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":deprecated"><e>"Use the kha.Display API instead"</e></m></meta>
		</refreshRate>
		<get_refreshRate set="method" line="332" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":deprecated"><e>"Use the kha.Display API instead"</e></m></meta>
		</get_refreshRate>
		<screenDpi public="1" set="method" line="337" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":deprecated"><e>"Use the kha.Display API instead"</e></m></meta>
		</screenDpi>
		<safeZone public="1" set="method" line="341" static="1"><f a=""><x path="Float"/></f></safeZone>
		<automaticSafeZone public="1" set="method" line="345" static="1"><f a=""><x path="Bool"/></f></automaticSafeZone>
		<setSafeZone public="1" set="method" line="349" static="1"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></setSafeZone>
		<unlockAchievement public="1" set="method" line="353" static="1"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></unlockAchievement>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>kha.SystemImpl</e></m>
		</meta>
	</class>
	<class path="kha.SystemImpl" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/SystemImpl.hx">
		<needs3d public="1" expr="false" line="54" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</needs3d>
		<getMouse public="1" set="method" line="56" static="1"><f a="num">
	<x path="Int"/>
	<c path="kha.input.Mouse"/>
</f></getMouse>
		<getPen public="1" set="method" line="61" static="1"><f a="num">
	<x path="Int"/>
	<c path="kha.input.Pen"/>
</f></getPen>
		<getKeyboard public="1" set="method" line="66" static="1"><f a="num">
	<x path="Int"/>
	<c path="kha.input.Keyboard"/>
</f></getKeyboard>
		<getTime public="1" set="method" line="74" static="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":functionCode"><e>"\n\t\treturn Kore::System::time();\n\t"</e></m></meta>
		</getTime>
		<windowWidth public="1" set="method" line="78" static="1">
			<f a="windowId">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</windowWidth>
		<windowHeight public="1" set="method" line="82" static="1">
			<f a="windowId">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</windowHeight>
		<screenDpi public="1" set="method" line="86" static="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
		</screenDpi>
		<getVsync public="1" set="method" line="90" static="1"><f a=""><x path="Bool"/></f></getVsync>
		<getRefreshRate public="1" set="method" line="94" static="1"><f a=""><x path="Int"/></f></getRefreshRate>
		<getScreenRotation public="1" set="method" line="98" static="1"><f a=""><x path="kha.ScreenRotation"/></f></getScreenRotation>
		<getSystemId public="1" set="method" line="103" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":functionCode"><e>"return ::String(Kore::System::systemId());"</e></m></meta>
		</getSystemId>
		<vibrate public="1" set="method" line="107" static="1">
			<f a="ms">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</vibrate>
		<getLanguage public="1" set="method" line="112" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":functionCode"><e>"return ::String(Kore::System::language());"</e></m></meta>
		</getLanguage>
		<requestShutdown public="1" set="method" line="116" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":has_untyped"/></meta>
		</requestShutdown>
		<framebuffers expr="new Array()" line="121" static="1">
			<c path="Array"><c path="kha.Framebuffer"/></c>
			<meta><m n=":value"><e>new Array()</e></m></meta>
		</framebuffers>
		<keyboard static="1"><c path="kha.input.Keyboard"/></keyboard>
		<mouse static="1"><c path="kha.input.Mouse"/></mouse>
		<pen static="1"><c path="kha.input.Pen"/></pen>
		<gamepad1 static="1"><c path="kha.input.Gamepad"/></gamepad1>
		<gamepad2 static="1"><c path="kha.input.Gamepad"/></gamepad2>
		<gamepad3 static="1"><c path="kha.input.Gamepad"/></gamepad3>
		<gamepad4 static="1"><c path="kha.input.Gamepad"/></gamepad4>
		<surface static="1"><c path="kha.input.Surface"/></surface>
		<mouseLockListeners static="1"><c path="Array"><f a=""><x path="Void"/></f></c></mouseLockListeners>
		<init public="1" set="method" line="132" static="1">
			<f a="options:callback">
				<c path="kha.SystemOptions"/>
				<f a="">
					<c path="kha.Window"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</init>
		<onWindowCreated set="method" line="154" static="1"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></onWindowCreated>
		<postInit set="method" line="162" static="1">
			<f a="callback">
				<f a="">
					<c path="kha.Window"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</postInit>
		<loadFinished set="method" line="183" static="1"><f a=""><x path="Void"/></f></loadFinished>
		<lockMouse public="1" set="method" line="219" static="1">
			<f a="?windowId" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ windowId : 0 }</e></m>
			</meta>
		</lockMouse>
		<unlockMouse public="1" set="method" line="228" static="1">
			<f a="?windowId" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ windowId : 0 }</e></m>
			</meta>
		</unlockMouse>
		<canLockMouse public="1" set="method" line="237" static="1">
			<f a="?windowId" v="0">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ windowId : 0 }</e></m>
			</meta>
		</canLockMouse>
		<isMouseLocked public="1" set="method" line="241" static="1">
			<f a="?windowId" v="0">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ windowId : 0 }</e></m>
			</meta>
		</isMouseLocked>
		<notifyOfMouseLockChange public="1" set="method" line="245" static="1">
			<f a="func:error:?windowId" v="::0">
				<f a=""><x path="Void"/></f>
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ windowId : 0 }</e></m></meta>
		</notifyOfMouseLockChange>
		<removeFromMouseLockChange public="1" set="method" line="251" static="1">
			<f a="func:error:?windowId" v="::0">
				<f a=""><x path="Void"/></f>
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ windowId : 0 }</e></m></meta>
		</removeFromMouseLockChange>
		<hideSystemCursor public="1" set="method" line="257" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</hideSystemCursor>
		<showSystemCursor public="1" set="method" line="261" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</showSystemCursor>
		<frame public="1" set="method" line="265" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</frame>
		<checkGamepadConnected set="method" line="305" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":functionCode"><e><![CDATA["return Kore::Gamepad::get(0)->connected();"]]></e></m></meta>
		</checkGamepadConnected>
		<keyDown public="1" set="method" line="309" static="1"><f a="code">
	<x path="kha.input.KeyCode"/>
	<x path="Void"/>
</f></keyDown>
		<keyUp public="1" set="method" line="313" static="1"><f a="code">
	<x path="kha.input.KeyCode"/>
	<x path="Void"/>
</f></keyUp>
		<keyPress public="1" set="method" line="317" static="1"><f a="char">
	<x path="Int"/>
	<x path="Void"/>
</f></keyPress>
		<mouseX public="1" static="1"><x path="Int"/></mouseX>
		<mouseY public="1" static="1"><x path="Int"/></mouseY>
		<mouseDown public="1" set="method" line="324" static="1"><f a="windowId:button:x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></mouseDown>
		<mouseUp public="1" set="method" line="330" static="1"><f a="windowId:button:x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></mouseUp>
		<mouseMove public="1" set="method" line="336" static="1"><f a="windowId:x:y:movementX:movementY">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></mouseMove>
		<mouseWheel public="1" set="method" line="344" static="1"><f a="windowId:delta">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></mouseWheel>
		<mouseLeave public="1" set="method" line="348" static="1"><f a="windowId">
	<x path="Int"/>
	<x path="Void"/>
</f></mouseLeave>
		<penDown public="1" set="method" line="352" static="1"><f a="windowId:x:y:pressure">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></penDown>
		<penUp public="1" set="method" line="356" static="1"><f a="windowId:x:y:pressure">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></penUp>
		<penMove public="1" set="method" line="360" static="1"><f a="windowId:x:y:pressure">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></penMove>
		<gamepad1Axis public="1" set="method" line="364" static="1"><f a="axis:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></gamepad1Axis>
		<gamepad1Button public="1" set="method" line="368" static="1"><f a="button:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></gamepad1Button>
		<gamepad2Axis public="1" set="method" line="372" static="1"><f a="axis:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></gamepad2Axis>
		<gamepad2Button public="1" set="method" line="376" static="1"><f a="button:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></gamepad2Button>
		<gamepad3Axis public="1" set="method" line="380" static="1"><f a="axis:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></gamepad3Axis>
		<gamepad3Button public="1" set="method" line="384" static="1"><f a="button:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></gamepad3Button>
		<gamepad4Axis public="1" set="method" line="388" static="1"><f a="axis:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></gamepad4Axis>
		<gamepad4Button public="1" set="method" line="392" static="1"><f a="button:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></gamepad4Button>
		<touchStart public="1" set="method" line="396" static="1"><f a="index:x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></touchStart>
		<touchEnd public="1" set="method" line="400" static="1"><f a="index:x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></touchEnd>
		<touchMove public="1" set="method" line="404" static="1"><f a="index:x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></touchMove>
		<foreground public="1" set="method" line="408" static="1"><f a=""><x path="Void"/></f></foreground>
		<resume public="1" set="method" line="412" static="1"><f a=""><x path="Void"/></f></resume>
		<pause public="1" set="method" line="416" static="1"><f a=""><x path="Void"/></f></pause>
		<background public="1" set="method" line="420" static="1"><f a=""><x path="Void"/></f></background>
		<shutdown public="1" set="method" line="424" static="1"><f a=""><x path="Void"/></f></shutdown>
		<dropFiles public="1" set="method" line="428" static="1"><f a="filePath">
	<c path="String"/>
	<x path="Void"/>
</f></dropFiles>
		<copy public="1" set="method" line="432" static="1"><f a=""><c path="String"/></f></copy>
		<cut public="1" set="method" line="441" static="1"><f a=""><c path="String"/></f></cut>
		<paste public="1" set="method" line="450" static="1"><f a="data">
	<c path="String"/>
	<x path="Void"/>
</f></paste>
		<login public="1" set="method" line="457" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":functionCode"><e>"Kore::System::login();"</e></m></meta>
		</login>
		<waitingForLogin public="1" set="method" line="462" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":functionCode"><e>"return Kore::System::waitingForLogin();"</e></m></meta>
		</waitingForLogin>
		<disallowUserChange public="1" set="method" line="467" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":functionCode"><e>"kinc_disallow_user_change();"</e></m></meta>
		</disallowUserChange>
		<allowUserChange public="1" set="method" line="472" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":functionCode"><e>"kinc_allow_user_change();"</e></m></meta>
		</allowUserChange>
		<loginevent public="1" set="method" line="476" static="1"><f a=""><x path="Void"/></f></loginevent>
		<logoutevent public="1" set="method" line="482" static="1"><f a=""><x path="Void"/></f></logoutevent>
		<initKore set="method" line="493" static="1">
			<f a="name:width:height:win:frame">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="kha.WindowOptions"/>
				<c path="kha.FramebufferOptions"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\tKore::WindowOptions window = convertWindowOptions(win);\n\t\tKore::FramebufferOptions framebuffer = convertFramebufferOptions(frame);\n\t\tinit_kore(name, width, height, &window, &framebuffer);\n\t"]]></e></m></meta>
		</initKore>
		<setKeepScreenOn public="1" set="method" line="497" static="1">
			<f a="on">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setKeepScreenOn>
		<loadUrl public="1" set="method" line="501" static="1">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</loadUrl>
		<getGamepadId public="1" set="method" line="506" static="1">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":functionCode"><e>"return ::String(::getGamepadId(index));"</e></m></meta>
		</getGamepadId>
		<getGamepadVendor public="1" set="method" line="511" static="1">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":functionCode"><e>"return ::String(::getGamepadVendor(index));"</e></m></meta>
		</getGamepadVendor>
		<safeZone public="1" set="method" line="515" static="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":has_untyped"/></meta>
		</safeZone>
		<automaticSafeZone public="1" set="method" line="519" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":has_untyped"/></meta>
		</automaticSafeZone>
		<setSafeZone public="1" set="method" line="523" static="1">
			<f a="value">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setSafeZone>
		<unlockAchievement public="1" set="method" line="527" static="1">
			<f a="id">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</unlockAchievement>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":headerCode"><e><![CDATA["\n#include <Kore/pch.h>\n#include <Kore/System.h>\n#include <Kore/Input/Gamepad.h>\n#include <Kore/Input/Mouse.h>\n#include <Kore/Input/Pen.h>\n#include <Kore/Display.h>\n#include <Kore/Window.h>\n\n#include <kinc/system.h>\n\nKore::WindowOptions convertWindowOptions(::kha::WindowOptions win);\nKore::FramebufferOptions convertFramebufferOptions(::kha::FramebufferOptions frame);\n\nvoid init_kore(const char* name, int width, int height, Kore::WindowOptions* win, Kore::FramebufferOptions* frame);\nvoid post_kore_init();\nvoid run_kore();\nconst char* getGamepadId(int index);\nconst char* getGamepadVendor(int index);\n"]]></e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="kha.Video" params="" file="C:\HaxeLibraries\Kha\Sources/kha/Video.hx">
		<implements path="kha.Resource"/>
		<width public="1" set="method" line="10">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* The width of the video file in pixels.</haxe_doc>
		</width>
		<height public="1" set="method" line="17">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* The height of the video file in pixels.</haxe_doc>
		</height>
		<play public="1" set="method" line="33">
			<f a="?loop" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ loop : false }</e></m></meta>
			<haxe_doc>* Play / resume the media element.
	 * 
	 * @param loop		If playing it looped, default = false.</haxe_doc>
		</play>
		<pause public="1" set="method" line="40">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Pause the media element.</haxe_doc>
		</pause>
		<stop public="1" set="method" line="47">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Pause the stop element.</haxe_doc>
		</stop>
		<getLength public="1" set="method" line="54">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Return the media length, in milliseconds.</haxe_doc>
		</getLength>
		<getCurrentPos public="1" set="method" line="62">
			<f a=""><x path="Int"/></f>
			<haxe_doc>* Return the media position, in milliseconds.
	 * Deprecated.</haxe_doc>
		</getCurrentPos>
		<position public="1" get="accessor" set="accessor"><x path="Int"/></position>
		<get_position set="method" line="68"><f a=""><x path="Int"/></f></get_position>
		<set_position set="method" line="72"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_position>
		<getVolume public="1" set="method" line="79">
			<f a=""><x path="Float"/></f>
			<haxe_doc>* Return the media volume, between 0 and 1.</haxe_doc>
		</getVolume>
		<setVolume public="1" set="method" line="88">
			<f a="volume">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Set the media volume, between 0 and 1.
	 *
	 * @param volume	The new volume, between 0 and 1.</haxe_doc>
		</setVolume>
		<isFinished public="1" set="method" line="95">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* If the media has finished or not.</haxe_doc>
		</isFinished>
		<unload public="1" set="method" line="102">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Unload the resource from memory.</haxe_doc>
		</unload>
		<new public="1" set="method" line="24">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Create a new media object instance.</haxe_doc>
		</new>
		<haxe_doc>* This represents a Video file.</haxe_doc>
	</class>
	<class path="kha.Window" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/Window.hx">
		<windows expr="[]" line="51" static="1">
			<c path="Array"><c path="kha.Window"/></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</windows>
		<resizeCallbacks expr="[]" line="52" static="1">
			<c path="Array"><c path="Array"><f a=":">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></c></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</resizeCallbacks>
		<ppiCallbacks expr="[]" line="53" static="1">
			<c path="Array"><c path="Array"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></c></c>
			<meta><m n=":value"><e>[]</e></m></meta>
		</ppiCallbacks>
		<unused set="method" line="71" static="1">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":noDoc"/>
				<m n=":keep"/>
			</meta>
		</unused>
		<_init public="1" set="method" line="77" static="1">
			<f a="?win:?frame" v="null:null">
				<c path="kha.WindowOptions"/>
				<c path="kha.FramebufferOptions"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ frame : null, win : null }</e></m>
				<m n=":noCompletion"/>
				<m n=":noDoc"/>
			</meta>
		</_init>
		<create public="1" set="method" line="83" static="1">
			<f a="?win:?frame" v="null:null">
				<c path="kha.WindowOptions"/>
				<c path="kha.FramebufferOptions"/>
				<c path="kha.Window"/>
			</f>
			<meta>
				<m n=":value"><e>{ frame : null, win : null }</e></m>
				<m n=":access"><e>kha.SystemImpl</e></m>
			</meta>
		</create>
		<koreCreate set="method" line="96" static="1">
			<f a="win:frame">
				<c path="kha.WindowOptions"/>
				<c path="kha.FramebufferOptions"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\tKore::WindowOptions window = convertWindowOptions(win);\n\t\tKore::FramebufferOptions framebuffer = convertFramebufferOptions(frame);\n\t\tKore::Window::create(&window, &framebuffer);\n\t"]]></e></m></meta>
		</koreCreate>
		<destroy public="1" set="method" line="100" static="1"><f a="window">
	<c path="kha.Window"/>
	<x path="Void"/>
</f></destroy>
		<koreDestroy set="method" line="106" static="1">
			<f a="num">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"Kore::Window::destroy(Kore::Window::get(num));"</e></m></meta>
		</koreDestroy>
		<get public="1" set="method" line="108" static="1"><f a="index">
	<x path="Int"/>
	<c path="kha.Window"/>
</f></get>
		<all public="1" get="accessor" set="null" static="1"><c path="Array"><c path="kha.Window"/></c></all>
		<get_all set="method" line="114" static="1"><f a=""><c path="Array"><c path="kha.Window"/></c></f></get_all>
		<callResizeCallbacks public="1" set="method" line="230" static="1">
			<f a="num:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":noDoc"/>
				<m n=":keep"/>
			</meta>
		</callResizeCallbacks>
		<callPpiCallbacks public="1" set="method" line="244" static="1">
			<f a="num:ppi">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":noDoc"/>
				<m n=":keep"/>
			</meta>
		</callPpiCallbacks>
		<num><x path="Int"/></num>
		<visibility><x path="Bool"/></visibility>
		<windowTitle><c path="String"/></windowTitle>
		<resize public="1" set="method" line="119">
			<f a="width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["Kore::Window::get(this->num)->resize(width, height);"]]></e></m></meta>
		</resize>
		<move public="1" set="method" line="122">
			<f a="x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["Kore::Window::get(this->num)->move(x, y);"]]></e></m></meta>
		</move>
		<changeWindowFeatures public="1" set="method" line="125">
			<f a="features">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["Kore::Window::get(this->num)->changeWindowFeatures(features);"]]></e></m></meta>
		</changeWindowFeatures>
		<changeFramebuffer public="1" set="method" line="131">
			<f a="frame">
				<c path="kha.FramebufferOptions"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\n\t\tKore::FramebufferOptions framebuffer = convertFramebufferOptions(frame);\n\t\tKore::Window::get(this->num)->changeFramebuffer(&framebuffer);\n\t"]]></e></m></meta>
		</changeFramebuffer>
		<x public="1" get="accessor" set="accessor"><x path="Int"/></x>
		<get_x set="method" line="136">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e><![CDATA["return Kore::Window::get(this->num)->x();"]]></e></m></meta>
		</get_x>
		<set_x set="method" line="141">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["int y = Kore::Window::get(this->num)->y(); Kore::Window::get(this->num)->move(value, y);"]]></e></m></meta>
		</set_x>
		<y public="1" get="accessor" set="accessor"><x path="Int"/></y>
		<get_y set="method" line="148">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e><![CDATA["return Kore::Window::get(this->num)->y();"]]></e></m></meta>
		</get_y>
		<set_y set="method" line="153">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["int x = Kore::Window::get(this->num)->x(); Kore::Window::get(this->num)->move(x, value);"]]></e></m></meta>
		</set_y>
		<width public="1" get="accessor" set="accessor"><x path="Int"/></width>
		<get_width set="method" line="160">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e><![CDATA["return Kore::Window::get(this->num)->width();"]]></e></m></meta>
		</get_width>
		<set_width set="method" line="165">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["int height = Kore::Window::get(this->num)->height(); Kore::Window::get(this->num)->resize(value, height);"]]></e></m></meta>
		</set_width>
		<height public="1" get="accessor" set="accessor"><x path="Int"/></height>
		<get_height set="method" line="172">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e><![CDATA["return Kore::Window::get(this->num)->height();"]]></e></m></meta>
		</get_height>
		<set_height set="method" line="177">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["int width = Kore::Window::get(this->num)->width(); Kore::Window::get(this->num)->move(width, value);"]]></e></m></meta>
		</set_height>
		<mode public="1" get="accessor" set="accessor"><x path="kha.WindowMode"/></mode>
		<get_mode set="method" line="184"><f a=""><x path="kha.WindowMode"/></f></get_mode>
		<getKoreMode set="method" line="189">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e><![CDATA["return Kore::Window::get(this->num)->mode();"]]></e></m></meta>
		</getKoreMode>
		<set_mode set="method" line="194">
			<f a="mode">
				<x path="kha.WindowMode"/>
				<x path="kha.WindowMode"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["Kore::Window::get(this->num)->changeWindowMode((Kore::WindowMode)mode); return mode;"]]></e></m></meta>
		</set_mode>
		<visible public="1" get="accessor" set="accessor"><x path="Bool"/></visible>
		<get_visible set="method" line="200"><f a=""><x path="Bool"/></f></get_visible>
		<set_visible set="method" line="205">
			<f a="value">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["if (value) Kore::Window::get(this->num)->show(); else Kore::Window::get(this->num)->hide();"]]></e></m></meta>
		</set_visible>
		<title public="1" get="accessor" set="accessor"><c path="String"/></title>
		<get_title set="method" line="212"><f a=""><c path="String"/></f></get_title>
		<set_title set="method" line="217">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["Kore::Window::get(this->num)->setTitle(value.c_str());"]]></e></m></meta>
		</set_title>
		<notifyOnResize public="1" set="method" line="223">
			<f a="callback">
				<f a=":">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["Kore::Window::get(this->num)->setResizeCallback(resizeCallback, (void*)this->num);"]]></e></m></meta>
		</notifyOnResize>
		<notifyOnPpiChange public="1" set="method" line="237">
			<f a="callback">
				<f a="">
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["Kore::Window::get(this->num)->setPpiChangedCallback(ppiCallback, (void*)this->num);"]]></e></m></meta>
		</notifyOnPpiChange>
		<vSynced public="1" get="accessor" set="null"><x path="Bool"/></vSynced>
		<get_vSynced set="method" line="253">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":functionCode"><e><![CDATA["return Kore::Window::get(this->num)->vSynced();"]]></e></m></meta>
		</get_vSynced>
		<new public="1" set="method" line="60">
			<f a="num:win">
				<x path="Int"/>
				<c path="kha.WindowOptions"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":noDoc"/>
			</meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":headerCode"><e><![CDATA["\n#include <Kore/pch.h>\n#include <Kore/Window.h>\n"]]></e></m>
			<m n=":cppFileCode"><e><![CDATA["\nnamespace {\n\tchar windowTitles[10][256];\n\tint titleIndex = 0;\n\t\n\tvoid resizeCallback(int width, int height, void* data) {\n\t\t::kha::Window_obj::callResizeCallbacks(*((int*)&data), width, height);\n\t}\n\t\n\tvoid ppiCallback(int ppi, void* data) {\n\t\t::kha::Window_obj::callPpiCallbacks(*((int*)&data), ppi);\n\t}\n}\n\nKore::WindowOptions convertWindowOptions(::kha::WindowOptions win) {\n\tKore::WindowOptions window;\n\tstrcpy(windowTitles[titleIndex], win->title.c_str());\n\twindow.title = windowTitles[titleIndex];\n\t++titleIndex;\n\twindow.x = win->x;\n\twindow.y = win->y;\n\twindow.width = win->width;\n\twindow.height = win->height;\n\twindow.display = win->display < 0 ? Kore::Display::primary() : Kore::Display::get(win->display);\n\twindow.visible = win->visible;\n\twindow.windowFeatures = win->windowFeatures;\n\twindow.mode = (Kore::WindowMode)win->mode;\n\treturn window;\n}\n\nKore::FramebufferOptions convertFramebufferOptions(::kha::FramebufferOptions frame) {\n\tKore::FramebufferOptions framebuffer;\n\tframebuffer.frequency = frame->frequency;\n\tframebuffer.verticalSync = frame->verticalSync;\n\tframebuffer.colorBufferBits = frame->colorBufferBits;\n\tframebuffer.depthBufferBits = frame->depthBufferBits;\n\tframebuffer.stencilBufferBits = frame->stencilBufferBits;\n\tframebuffer.samplesPerPixel = frame->samplesPerPixel;\n\treturn framebuffer;\n}\n"]]></e></m>
		</meta>
	</class>
	<abstract path="kha.WindowMode" params="" file="C:\HaxeLibraries\Kha\Sources/kha/WindowMode.hx">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="kha._WindowMode.WindowMode_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/WindowMode.hx" private="1" module="kha.WindowMode" extern="1">
	<Windowed public="1" get="inline" set="null" expr="cast 0" line="5" static="1">
		<x path="kha.WindowMode"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Windowed>
	<Fullscreen public="1" get="inline" set="null" expr="cast 1" line="6" static="1">
		<x path="kha.WindowMode"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Fullscreen>
	<ExclusiveFullscreen public="1" get="inline" set="null" expr="cast 2" line="7" static="1">
		<x path="kha.WindowMode"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ExclusiveFullscreen>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="kha._WindowMode.WindowMode_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/WindowMode.hx" private="1" module="kha.WindowMode" extern="1">
		<Windowed public="1" get="inline" set="null" expr="cast 0" line="5" static="1">
			<x path="kha.WindowMode"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Windowed>
		<Fullscreen public="1" get="inline" set="null" expr="cast 1" line="6" static="1">
			<x path="kha.WindowMode"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Fullscreen>
		<ExclusiveFullscreen public="1" get="inline" set="null" expr="cast 2" line="7" static="1">
			<x path="kha.WindowMode"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ExclusiveFullscreen>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="kha.WindowFeatures" params="" file="C:\HaxeLibraries\Kha\Sources/kha/WindowOptions.hx" module="kha.WindowOptions">
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="kha._WindowOptions.WindowFeatures_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/WindowOptions.hx" private="1" module="kha.WindowOptions">
	<None public="1" get="inline" set="null" expr="cast 0" line="3" static="1">
		<x path="kha.WindowFeatures"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</None>
	<FeatureResizable public="1" get="inline" set="null" expr="cast 1" line="4" static="1">
		<x path="kha.WindowFeatures"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FeatureResizable>
	<FeatureMinimizable public="1" get="inline" set="null" expr="cast 2" line="5" static="1">
		<x path="kha.WindowFeatures"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FeatureMinimizable>
	<FeatureMaximizable public="1" get="inline" set="null" expr="cast 4" line="6" static="1">
		<x path="kha.WindowFeatures"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FeatureMaximizable>
	<FeatureBorderless public="1" get="inline" set="null" expr="cast 8" line="7" static="1">
		<x path="kha.WindowFeatures"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FeatureBorderless>
	<FeatureOnTop public="1" get="inline" set="null" expr="cast 16" line="8" static="1">
		<x path="kha.WindowFeatures"/>
		<meta>
			<m n=":value"><e>cast 16</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</FeatureOnTop>
	<_new set="method" line="10" static="1">
		<f a="value">
			<x path="Int"/>
			<x path="kha.WindowFeatures"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="kha._WindowOptions.WindowFeatures_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/WindowOptions.hx" private="1" module="kha.WindowOptions">
		<None public="1" get="inline" set="null" expr="cast 0" line="3" static="1">
			<x path="kha.WindowFeatures"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</None>
		<FeatureResizable public="1" get="inline" set="null" expr="cast 1" line="4" static="1">
			<x path="kha.WindowFeatures"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FeatureResizable>
		<FeatureMinimizable public="1" get="inline" set="null" expr="cast 2" line="5" static="1">
			<x path="kha.WindowFeatures"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FeatureMinimizable>
		<FeatureMaximizable public="1" get="inline" set="null" expr="cast 4" line="6" static="1">
			<x path="kha.WindowFeatures"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FeatureMaximizable>
		<FeatureBorderless public="1" get="inline" set="null" expr="cast 8" line="7" static="1">
			<x path="kha.WindowFeatures"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FeatureBorderless>
		<FeatureOnTop public="1" get="inline" set="null" expr="cast 16" line="8" static="1">
			<x path="kha.WindowFeatures"/>
			<meta>
				<m n=":value"><e>cast 16</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</FeatureOnTop>
		<_new set="method" line="10" static="1">
			<f a="value">
				<x path="Int"/>
				<x path="kha.WindowFeatures"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="kha.WindowOptions" params="" file="C:\HaxeLibraries\Kha\Sources/kha/WindowOptions.hx">
		<title public="1" expr="null">
			<c path="String"/>
			<meta>
				<m n=":value"><e>null</e></m>
				<m n=":optional"/>
			</meta>
		</title>
		<x public="1" expr="-1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>-1</e></m>
				<m n=":optional"/>
			</meta>
		</x>
		<y public="1" expr="-1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>-1</e></m>
				<m n=":optional"/>
			</meta>
		</y>
		<width public="1" expr="800">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>800</e></m>
				<m n=":optional"/>
			</meta>
		</width>
		<height public="1" expr="600">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>600</e></m>
				<m n=":optional"/>
			</meta>
		</height>
		<display public="1" expr="-1">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>-1</e></m>
				<m n=":optional"/>
			</meta>
		</display>
		<visible public="1" expr="true">
			<x path="Bool"/>
			<meta>
				<m n=":value"><e>true</e></m>
				<m n=":optional"/>
			</meta>
		</visible>
		<windowFeatures public="1" expr="FeatureResizable | FeatureMaximizable | FeatureMinimizable">
			<x path="kha.WindowFeatures"/>
			<meta>
				<m n=":value"><e>FeatureResizable | FeatureMaximizable | FeatureMinimizable</e></m>
				<m n=":optional"/>
			</meta>
		</windowFeatures>
		<mode public="1" expr="Windowed">
			<x path="kha.WindowMode"/>
			<meta>
				<m n=":value"><e>Windowed</e></m>
				<m n=":optional"/>
			</meta>
		</mode>
		<new public="1" set="method" line="29">
			<f a="?title:?x:?y:?width:?height:?display:?visible:?windowFeatures:?mode" v="null:-1:-1:800:600:-1:true::WindowMode.Windowed">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="kha.WindowFeatures"/>
				<x path="kha.WindowMode"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ mode : WindowMode.Windowed, visible : true, display : -1, height : 600, width : 800, y : -1, x : -1, title : null }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="kha.Worker" params="" file="C:\HaxeLibraries\Kha\Sources/kha/Worker.hx">
		<_mainThread public="1" static="1"><x path="sys.thread.Thread"/></_mainThread>
		<create public="1" set="method" line="94" static="1"><f a="clazz">
	<x path="Class"><d/></x>
	<c path="kha.Worker"/>
</f></create>
		<notifyWorker public="1" set="method" line="111" static="1"><f a="func">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></notifyWorker>
		<postFromWorker public="1" set="method" line="120" static="1"><f a="message">
	<d/>
	<x path="Void"/>
</f></postFromWorker>
		<thread><x path="sys.thread.Thread"/></thread>
		<notify public="1" set="method" line="98"><f a="func">
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></notify>
		<post public="1" set="method" line="107"><f a="message">
	<d/>
	<x path="Void"/>
</f></post>
		<new set="method" line="90"><f a="thread">
	<x path="sys.thread.Thread"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.arrays.Float32ArrayData" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/arrays/Float32Array.hx" module="kha.arrays.Float32Array" extern="1">
		<create public="1" set="method" static="1">
			<f a=""><c path="kha.arrays.Float32ArrayData"/></f>
			<meta><m n=":native"><e>"float32array"</e></m></meta>
		</create>
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<get_length public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":native"><e>"length"</e></m></meta>
		</get_length>
		<alloc public="1" set="method"><f a="elements">
	<x path="Int"/>
	<x path="Void"/>
</f></alloc>
		<free public="1" set="method"><f a=""><x path="Void"/></f></free>
		<get public="1" set="method"><f a="index">
	<x path="Int"/>
	<t path="kha.FastFloat"/>
</f></get>
		<set public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
</f></set>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":unreflective"/>
			<m n=":structAccess"/>
			<m n=":include"><e>"cpp_float32array.h"</e></m>
			<m n=":native"><e>"float32array"</e></m>
		</meta>
	</class>
	<class path="kha.arrays.Float32ArrayPrivate" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/arrays/Float32Array.hx" module="kha.arrays.Float32Array">
		<finalize set="method" line="40" static="1">
			<f a="arr">
				<c path="kha.arrays.Float32ArrayPrivate"/>
				<x path="Void"/>
			</f>
			<meta><m n=":void"/></meta>
		</finalize>
		<self public="1"><c path="kha.arrays.Float32ArrayData"/></self>
		<new public="1" get="inline" set="null" line="31">
			<f a="?elements" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ elements : 0 }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="kha.arrays.Float32Array" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/arrays/Float32Array.hx">
		<this><c path="kha.arrays.Float32ArrayPrivate"/></this>
		<impl><class path="kha.arrays._Float32Array.Float32Array_Impl_" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/arrays/Float32Array.hx" private="1" module="kha.arrays.Float32Array">
	<_new public="1" get="inline" set="null" line="46" static="1">
		<f a="?elements" v="0">
			<x path="Int"/>
			<x path="kha.arrays.Float32Array"/>
		</f>
		<meta>
			<m n=":value"><e>{ elements : 0 }</e></m>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<free public="1" get="inline" set="null" line="50" static="1">
		<f a="this">
			<c path="kha.arrays.Float32ArrayPrivate"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</free>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="56" static="1">
		<f a="this">
			<c path="kha.arrays.Float32ArrayPrivate"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<set public="1" get="inline" set="null" line="61" static="1">
		<f a="this:index:value">
			<c path="kha.arrays.Float32ArrayPrivate"/>
			<x path="Int"/>
			<t path="kha.FastFloat"/>
			<t path="kha.FastFloat"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<get public="1" get="inline" set="null" line="66" static="1">
		<f a="this:index">
			<c path="kha.arrays.Float32ArrayPrivate"/>
			<x path="Int"/>
			<t path="kha.FastFloat"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
</class></impl>
	</abstract>
	<class path="kha.arrays._Float32Array.Float32Array_Impl_" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/arrays/Float32Array.hx" private="1" module="kha.arrays.Float32Array">
		<_new public="1" get="inline" set="null" line="46" static="1">
			<f a="?elements" v="0">
				<x path="Int"/>
				<x path="kha.arrays.Float32Array"/>
			</f>
			<meta>
				<m n=":value"><e>{ elements : 0 }</e></m>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<free public="1" get="inline" set="null" line="50" static="1">
			<f a="this">
				<c path="kha.arrays.Float32ArrayPrivate"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</free>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="56" static="1">
			<f a="this">
				<c path="kha.arrays.Float32ArrayPrivate"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<set public="1" get="inline" set="null" line="61" static="1">
			<f a="this:index:value">
				<c path="kha.arrays.Float32ArrayPrivate"/>
				<x path="Int"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<get public="1" get="inline" set="null" line="66" static="1">
			<f a="this:index">
				<c path="kha.arrays.Float32ArrayPrivate"/>
				<x path="Int"/>
				<t path="kha.FastFloat"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
	</class>
	<class path="kha.arrays.Int16ArrayData" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/arrays/Int16Array.hx" module="kha.arrays.Int16Array" extern="1">
		<create public="1" set="method" static="1">
			<f a=""><c path="kha.arrays.Int16ArrayData"/></f>
			<meta><m n=":native"><e>"int16array"</e></m></meta>
		</create>
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<get_length public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":native"><e>"length"</e></m></meta>
		</get_length>
		<alloc public="1" set="method"><f a="elements">
	<x path="Int"/>
	<x path="Void"/>
</f></alloc>
		<free public="1" set="method"><f a=""><x path="Void"/></f></free>
		<get public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<set public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":unreflective"/>
			<m n=":structAccess"/>
			<m n=":include"><e>"cpp_int16array.h"</e></m>
			<m n=":native"><e>"int16array"</e></m>
		</meta>
	</class>
	<class path="kha.arrays.Int16ArrayPrivate" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/arrays/Int16Array.hx" module="kha.arrays.Int16Array">
		<finalize set="method" line="40" static="1">
			<f a="arr">
				<c path="kha.arrays.Int16ArrayPrivate"/>
				<x path="Void"/>
			</f>
			<meta><m n=":void"/></meta>
		</finalize>
		<self public="1">
			<c path="kha.arrays.Int16ArrayData"/>
			<meta><m n=":keep"/></meta>
		</self>
		<new public="1" get="inline" set="null" line="31">
			<f a="?elements" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ elements : 0 }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="kha.arrays.Int16Array" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/arrays/Int16Array.hx">
		<this><c path="kha.arrays.Int16ArrayPrivate"/></this>
		<impl><class path="kha.arrays._Int16Array.Int16Array_Impl_" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/arrays/Int16Array.hx" private="1" module="kha.arrays.Int16Array">
	<_new public="1" get="inline" set="null" line="46" static="1">
		<f a="?elements" v="0">
			<x path="Int"/>
			<x path="kha.arrays.Int16Array"/>
		</f>
		<meta>
			<m n=":value"><e>{ elements : 0 }</e></m>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<free public="1" get="inline" set="null" line="50" static="1">
		<f a="this">
			<c path="kha.arrays.Int16ArrayPrivate"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</free>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="56" static="1">
		<f a="this">
			<c path="kha.arrays.Int16ArrayPrivate"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<set public="1" get="inline" set="null" line="60" static="1">
		<f a="this:index:value">
			<c path="kha.arrays.Int16ArrayPrivate"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set>
	<get public="1" get="inline" set="null" line="64" static="1">
		<f a="this:index">
			<c path="kha.arrays.Int16ArrayPrivate"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get>
	<arrayRead public="1" get="inline" set="null" line="69" static="1">
		<f a="this:index">
			<c path="kha.arrays.Int16ArrayPrivate"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</arrayRead>
	<arrayWrite public="1" get="inline" set="null" line="74" static="1">
		<f a="this:index:value">
			<c path="kha.arrays.Int16ArrayPrivate"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</arrayWrite>
</class></impl>
	</abstract>
	<class path="kha.arrays._Int16Array.Int16Array_Impl_" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/arrays/Int16Array.hx" private="1" module="kha.arrays.Int16Array">
		<_new public="1" get="inline" set="null" line="46" static="1">
			<f a="?elements" v="0">
				<x path="Int"/>
				<x path="kha.arrays.Int16Array"/>
			</f>
			<meta>
				<m n=":value"><e>{ elements : 0 }</e></m>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<free public="1" get="inline" set="null" line="50" static="1">
			<f a="this">
				<c path="kha.arrays.Int16ArrayPrivate"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</free>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="56" static="1">
			<f a="this">
				<c path="kha.arrays.Int16ArrayPrivate"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<set public="1" get="inline" set="null" line="60" static="1">
			<f a="this:index:value">
				<c path="kha.arrays.Int16ArrayPrivate"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set>
		<get public="1" get="inline" set="null" line="64" static="1">
			<f a="this:index">
				<c path="kha.arrays.Int16ArrayPrivate"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get>
		<arrayRead public="1" get="inline" set="null" line="69" static="1">
			<f a="this:index">
				<c path="kha.arrays.Int16ArrayPrivate"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</arrayRead>
		<arrayWrite public="1" get="inline" set="null" line="74" static="1">
			<f a="this:index:value">
				<c path="kha.arrays.Int16ArrayPrivate"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</arrayWrite>
	</class>
	<class path="kha.arrays.Int32ArrayData" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/arrays/Int32Array.hx" module="kha.arrays.Int32Array" extern="1">
		<create public="1" set="method" static="1">
			<f a=""><c path="kha.arrays.Int32ArrayData"/></f>
			<meta><m n=":native"><e>"int32array"</e></m></meta>
		</create>
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<get_length public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":native"><e>"length"</e></m></meta>
		</get_length>
		<alloc public="1" set="method"><f a="elements">
	<x path="Int"/>
	<x path="Void"/>
</f></alloc>
		<free public="1" set="method"><f a=""><x path="Void"/></f></free>
		<get public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<set public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":unreflective"/>
			<m n=":structAccess"/>
			<m n=":include"><e>"cpp_int32array.h"</e></m>
			<m n=":native"><e>"int32array"</e></m>
		</meta>
	</class>
	<class path="kha.arrays.Int32ArrayPrivate" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/arrays/Int32Array.hx" module="kha.arrays.Int32Array">
		<finalize set="method" line="40" static="1">
			<f a="arr">
				<c path="kha.arrays.Int32ArrayPrivate"/>
				<x path="Void"/>
			</f>
			<meta><m n=":void"/></meta>
		</finalize>
		<self public="1"><c path="kha.arrays.Int32ArrayData"/></self>
		<new public="1" get="inline" set="null" line="31">
			<f a="?elements" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ elements : 0 }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="kha.arrays.Int32Array" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/arrays/Int32Array.hx">
		<this><c path="kha.arrays.Int32ArrayPrivate"/></this>
		<impl><class path="kha.arrays._Int32Array.Int32Array_Impl_" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/arrays/Int32Array.hx" private="1" module="kha.arrays.Int32Array">
	<_new public="1" get="inline" set="null" line="46" static="1">
		<f a="?elements" v="0">
			<x path="Int"/>
			<x path="kha.arrays.Int32Array"/>
		</f>
		<meta>
			<m n=":value"><e>{ elements : 0 }</e></m>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<free public="1" get="inline" set="null" line="50" static="1">
		<f a="this">
			<c path="kha.arrays.Int32ArrayPrivate"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</free>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="56" static="1">
		<f a="this">
			<c path="kha.arrays.Int32ArrayPrivate"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<set public="1" get="inline" set="null" line="60" static="1">
		<f a="this:index:value">
			<c path="kha.arrays.Int32ArrayPrivate"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set>
	<get public="1" get="inline" set="null" line="64" static="1">
		<f a="this:index">
			<c path="kha.arrays.Int32ArrayPrivate"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get>
	<arrayRead public="1" get="inline" set="null" line="69" static="1">
		<f a="this:index">
			<c path="kha.arrays.Int32ArrayPrivate"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</arrayRead>
	<arrayWrite public="1" get="inline" set="null" line="74" static="1">
		<f a="this:index:value">
			<c path="kha.arrays.Int32ArrayPrivate"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</arrayWrite>
</class></impl>
	</abstract>
	<class path="kha.arrays._Int32Array.Int32Array_Impl_" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/arrays/Int32Array.hx" private="1" module="kha.arrays.Int32Array">
		<_new public="1" get="inline" set="null" line="46" static="1">
			<f a="?elements" v="0">
				<x path="Int"/>
				<x path="kha.arrays.Int32Array"/>
			</f>
			<meta>
				<m n=":value"><e>{ elements : 0 }</e></m>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<free public="1" get="inline" set="null" line="50" static="1">
			<f a="this">
				<c path="kha.arrays.Int32ArrayPrivate"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</free>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="56" static="1">
			<f a="this">
				<c path="kha.arrays.Int32ArrayPrivate"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<set public="1" get="inline" set="null" line="60" static="1">
			<f a="this:index:value">
				<c path="kha.arrays.Int32ArrayPrivate"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set>
		<get public="1" get="inline" set="null" line="64" static="1">
			<f a="this:index">
				<c path="kha.arrays.Int32ArrayPrivate"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get>
		<arrayRead public="1" get="inline" set="null" line="69" static="1">
			<f a="this:index">
				<c path="kha.arrays.Int32ArrayPrivate"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</arrayRead>
		<arrayWrite public="1" get="inline" set="null" line="74" static="1">
			<f a="this:index:value">
				<c path="kha.arrays.Int32ArrayPrivate"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</arrayWrite>
	</class>
	<class path="kha.arrays.Uint32ArrayData" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/arrays/Uint32Array.hx" module="kha.arrays.Uint32Array" extern="1">
		<create public="1" set="method" static="1">
			<f a=""><c path="kha.arrays.Uint32ArrayData"/></f>
			<meta><m n=":native"><e>"uint32array"</e></m></meta>
		</create>
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<get_length public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":native"><e>"length"</e></m></meta>
		</get_length>
		<alloc public="1" set="method"><f a="elements">
	<x path="Int"/>
	<x path="Void"/>
</f></alloc>
		<free public="1" set="method"><f a=""><x path="Void"/></f></free>
		<get public="1" set="method"><f a="index">
	<x path="Int"/>
	<x path="Int"/>
</f></get>
		<set public="1" set="method"><f a="index:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></set>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":unreflective"/>
			<m n=":structAccess"/>
			<m n=":include"><e>"cpp_uint32array.h"</e></m>
			<m n=":native"><e>"uint32array"</e></m>
		</meta>
	</class>
	<class path="kha.arrays.Uint32ArrayPrivate" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/arrays/Uint32Array.hx" module="kha.arrays.Uint32Array">
		<finalize set="method" line="40" static="1">
			<f a="arr">
				<c path="kha.arrays.Uint32ArrayPrivate"/>
				<x path="Void"/>
			</f>
			<meta><m n=":void"/></meta>
		</finalize>
		<self public="1"><c path="kha.arrays.Uint32ArrayData"/></self>
		<new public="1" get="inline" set="null" line="31">
			<f a="?elements" v="0">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ elements : 0 }</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="kha.arrays.Uint32Array" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/arrays/Uint32Array.hx">
		<this><c path="kha.arrays.Uint32ArrayPrivate"/></this>
		<impl><class path="kha.arrays._Uint32Array.Uint32Array_Impl_" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/arrays/Uint32Array.hx" private="1" module="kha.arrays.Uint32Array">
	<_new public="1" get="inline" set="null" line="46" static="1">
		<f a="?elements" v="0">
			<x path="Int"/>
			<x path="kha.arrays.Uint32Array"/>
		</f>
		<meta>
			<m n=":value"><e>{ elements : 0 }</e></m>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<free public="1" get="inline" set="null" line="50" static="1">
		<f a="this">
			<c path="kha.arrays.Uint32ArrayPrivate"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</free>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<get_length get="inline" set="null" line="56" static="1">
		<f a="this">
			<c path="kha.arrays.Uint32ArrayPrivate"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<set public="1" get="inline" set="null" line="60" static="1">
		<f a="this:index:value">
			<c path="kha.arrays.Uint32ArrayPrivate"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set>
	<get public="1" get="inline" set="null" line="64" static="1">
		<f a="this:index">
			<c path="kha.arrays.Uint32ArrayPrivate"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get>
	<arrayRead public="1" get="inline" set="null" line="69" static="1">
		<f a="this:index">
			<c path="kha.arrays.Uint32ArrayPrivate"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</arrayRead>
	<arrayWrite public="1" get="inline" set="null" line="74" static="1">
		<f a="this:index:value">
			<c path="kha.arrays.Uint32ArrayPrivate"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</arrayWrite>
</class></impl>
	</abstract>
	<class path="kha.arrays._Uint32Array.Uint32Array_Impl_" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/arrays/Uint32Array.hx" private="1" module="kha.arrays.Uint32Array">
		<_new public="1" get="inline" set="null" line="46" static="1">
			<f a="?elements" v="0">
				<x path="Int"/>
				<x path="kha.arrays.Uint32Array"/>
			</f>
			<meta>
				<m n=":value"><e>{ elements : 0 }</e></m>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<free public="1" get="inline" set="null" line="50" static="1">
			<f a="this">
				<c path="kha.arrays.Uint32ArrayPrivate"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</free>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<get_length get="inline" set="null" line="56" static="1">
			<f a="this">
				<c path="kha.arrays.Uint32ArrayPrivate"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<set public="1" get="inline" set="null" line="60" static="1">
			<f a="this:index:value">
				<c path="kha.arrays.Uint32ArrayPrivate"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set>
		<get public="1" get="inline" set="null" line="64" static="1">
			<f a="this:index">
				<c path="kha.arrays.Uint32ArrayPrivate"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get>
		<arrayRead public="1" get="inline" set="null" line="69" static="1">
			<f a="this:index">
				<c path="kha.arrays.Uint32ArrayPrivate"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</arrayRead>
		<arrayWrite public="1" get="inline" set="null" line="74" static="1">
			<f a="this:index:value">
				<c path="kha.arrays.Uint32ArrayPrivate"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</arrayWrite>
	</class>
	<typedef path="kha.audio1.Audio" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/audio1/Audio.hx"><c path="kha.audio2.Audio1"/></typedef>
	<class path="kha.audio1.AudioChannel" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio1/AudioChannel.hx" interface="1">
		<play public="1" set="method"><f a=""><x path="Void"/></f></play>
		<pause public="1" set="method"><f a=""><x path="Void"/></f></pause>
		<stop public="1" set="method"><f a=""><x path="Void"/></f></stop>
		<length public="1" get="accessor" set="null"><x path="Float"/></length>
		<get_length set="method"><f a=""><x path="Float"/></f></get_length>
		<position public="1" get="accessor" set="accessor"><x path="Float"/></position>
		<get_position set="method"><f a=""><x path="Float"/></f></get_position>
		<set_position set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_position>
		<volume public="1" get="accessor" set="accessor"><x path="Float"/></volume>
		<get_volume set="method"><f a=""><x path="Float"/></f></get_volume>
		<set_volume set="method"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_volume>
		<finished public="1" get="accessor" set="null"><x path="Bool"/></finished>
		<get_finished set="method"><f a=""><x path="Bool"/></f></get_finished>
	</class>
	<class path="kha.internal.IntBox" params="" file="C:\HaxeLibraries\Kha\Sources/kha/internal/IntBox.hx">
		<value public="1"><x path="Int"/></value>
		<new public="1" set="method" line="6"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.audio2.Audio" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/audio2/Audio.hx">
		<buffer static="1"><c path="kha.audio2.Buffer"/></buffer>
		<intBox expr="new IntBox(0)" line="9" static="1">
			<c path="kha.internal.IntBox"/>
			<meta><m n=":value"><e>new IntBox(0)</e></m></meta>
		</intBox>
		<_init public="1" set="method" line="12" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_init>
		<_callCallback public="1" set="method" line="18" static="1">
			<f a="samples:sampleRate">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_callCallback>
		<_readSample public="1" set="method" line="37" static="1">
			<f a=""><x path="Float"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_readSample>
		<disableGcInteractions public="1" expr="false" line="47" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</disableGcInteractions>
		<samplesPerSecond public="1" static="1"><x path="Int"/></samplesPerSecond>
		<audioCallback public="1" static="1"><f a=":">
	<c path="kha.internal.IntBox"/>
	<c path="kha.audio2.Buffer"/>
	<x path="Void"/>
</f></audioCallback>
		<stream public="1" set="method" line="53" static="1">
			<f a="sound:?loop" v=":false">
				<c path="kha.Sound"/>
				<x path="Bool"/>
				<c path="kha.audio1.AudioChannel"/>
			</f>
			<meta><m n=":value"><e>{ loop : false }</e></m></meta>
		</stream>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="kha.audio2.Audio1" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/Audio1.hx">
		<channelCount get="inline" set="null" expr="32" line="9" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32</e></m></meta>
		</channelCount>
		<soundChannels static="1"><x path="haxe.ds.Vector"><c path="kha.audio2.AudioChannel"/></x></soundChannels>
		<streamChannels static="1"><x path="haxe.ds.Vector"><c path="kha.audio2.StreamChannel"/></x></streamChannels>
		<internalSoundChannels static="1"><x path="haxe.ds.Vector"><c path="kha.audio2.AudioChannel"/></x></internalSoundChannels>
		<internalStreamChannels static="1"><x path="haxe.ds.Vector"><c path="kha.audio2.StreamChannel"/></x></internalStreamChannels>
		<sampleCache1 static="1"><x path="kha.arrays.Float32Array"/></sampleCache1>
		<sampleCache2 static="1"><x path="kha.arrays.Float32Array"/></sampleCache2>
		<lastAllocationCount expr="0" line="17" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</lastAllocationCount>
		<mutex static="1"><c path="sys.thread.Mutex"/></mutex>
		<_init public="1" set="method" line="24" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_init>
		<max get="inline" set="null" line="38" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></max>
		<min get="inline" set="null" line="42" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></min>
		<mix public="1" set="method" line="46" static="1"><f a="samplesBox:buffer">
	<c path="kha.internal.IntBox"/>
	<c path="kha.audio2.Buffer"/>
	<x path="Void"/>
</f></mix>
		<play public="1" set="method" line="116" static="1">
			<f a="sound:?loop" v=":false">
				<c path="kha.Sound"/>
				<x path="Bool"/>
				<c path="kha.audio1.AudioChannel"/>
			</f>
			<meta><m n=":value"><e>{ loop : false }</e></m></meta>
		</play>
		<_playAgain public="1" set="method" line="148" static="1"><f a="channel">
	<c path="kha.audio2.AudioChannel"/>
	<x path="Void"/>
</f></_playAgain>
		<stream public="1" set="method" line="168" static="1">
			<f a="sound:?loop" v=":false">
				<c path="kha.Sound"/>
				<x path="Bool"/>
				<c path="kha.audio1.AudioChannel"/>
			</f>
			<meta><m n=":value"><e>{ loop : false }</e></m></meta>
		</stream>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.audio2.AudioChannel" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/AudioChannel.hx">
		<implements path="kha.audio1.AudioChannel"/>
		<max get="inline" set="null" line="94" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></max>
		<min get="inline" set="null" line="98" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></min>
		<data public="1" expr="null">
			<x path="kha.arrays.Float32Array"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</data>
		<myVolume expr="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</myVolume>
		<myPosition expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</myPosition>
		<paused expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</paused>
		<stopped expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</stopped>
		<looping expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</looping>
		<nextSamples public="1" set="method" line="17"><f a="requestedSamples:requestedLength:sampleRate">
	<x path="kha.arrays.Float32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></nextSamples>
		<play public="1" set="method" line="45"><f a=""><x path="Void"/></f></play>
		<pause public="1" set="method" line="51"><f a=""><x path="Void"/></f></pause>
		<stop public="1" set="method" line="55"><f a=""><x path="Void"/></f></stop>
		<length public="1" get="accessor" set="null"><x path="Float"/></length>
		<get_length set="method" line="62"><f a=""><x path="Float"/></f></get_length>
		<position public="1" get="accessor" set="accessor"><x path="Float"/></position>
		<get_position set="method" line="68"><f a=""><x path="Float"/></f></get_position>
		<set_position set="method" line="72"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_position>
		<volume public="1" get="accessor" set="accessor"><x path="Float"/></volume>
		<get_volume set="method" line="80"><f a=""><x path="Float"/></f></get_volume>
		<set_volume set="method" line="84"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_volume>
		<finished public="1" get="accessor" set="null"><x path="Bool"/></finished>
		<get_finished set="method" line="90"><f a=""><x path="Bool"/></f></get_finished>
		<new public="1" set="method" line="13"><f a="looping">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.audio2.Buffer" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/Buffer.hx">
		<channels public="1"><x path="Int"/></channels>
		<samplesPerSecond public="1"><x path="Int"/></samplesPerSecond>
		<data public="1"><x path="kha.arrays.Float32Array"/></data>
		<size public="1"><x path="Int"/></size>
		<readLocation public="1"><x path="Int"/></readLocation>
		<writeLocation public="1"><x path="Int"/></writeLocation>
		<new public="1" set="method" line="12"><f a="size:channels:samplesPerSecond">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.audio2.ResamplingAudioChannel" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ResamplingAudioChannel.hx">
		<extends path="kha.audio2.AudioChannel"/>
		<max get="inline" set="null" line="130" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></max>
		<min get="inline" set="null" line="134" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></min>
		<sampleRate public="1"><x path="Int"/></sampleRate>
		<nextSamples public="1" set="method" line="13" override="1"><f a="requestedSamples:requestedLength:sampleRate">
	<x path="kha.arrays.Float32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></nextSamples>
		<sample get="inline" set="null" line="41"><f a="position:sampleRate">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></sample>
		<lerp get="inline" set="null" line="79"><f a="v0:v1:t">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></lerp>
		<sampleLength get="inline" set="null" line="83"><f a="sampleRate">
	<x path="Int"/>
	<x path="Int"/>
</f></sampleLength>
		<play public="1" set="method" line="88" override="1"><f a=""><x path="Void"/></f></play>
		<pause public="1" set="method" line="94" override="1"><f a=""><x path="Void"/></f></pause>
		<stop public="1" set="method" line="98" override="1"><f a=""><x path="Void"/></f></stop>
		<get_length set="method" line="103" override="1"><f a=""><x path="Float"/></f></get_length>
		<get_position set="method" line="107" override="1"><f a=""><x path="Float"/></f></get_position>
		<set_position set="method" line="111" override="1"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_position>
		<get_volume set="method" line="118" override="1"><f a=""><x path="Float"/></f></get_volume>
		<set_volume set="method" line="122" override="1"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_volume>
		<get_finished set="method" line="126" override="1"><f a=""><x path="Bool"/></f></get_finished>
		<new public="1" set="method" line="8"><f a="looping:sampleRate">
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.audio2.StreamChannel" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/audio2/StreamChannel.hx">
		<implements path="kha.audio1.AudioChannel"/>
		<atend expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</atend>
		<loop>
			<x path="Bool"/>
			<meta><m n=":keep"/></meta>
		</loop>
		<myVolume><x path="Float"/></myVolume>
		<paused expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</paused>
		<initVorbis set="method" line="21">
			<f a="data">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["vorbis = stb_vorbis_open_memory(data->b->Pointer(), data->length, NULL, NULL);"]]></e></m></meta>
		</initVorbis>
		<nextVorbisSamples set="method" line="39">
			<f a="samples:length">
				<x path="kha.arrays.Float32Array"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tint read = stb_vorbis_get_samples_float_interleaved(vorbis, 2, samples->self.data, length);\r\n\t\tif (read < length / 2) {\r\n\t\t\tif (loop) {\r\n\t\t\t\tstb_vorbis_seek_start(vorbis);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tatend = true;\r\n\t\t\t}\r\n\t\t\tfor (int i = read; i < length; ++i) {\r\n\t\t\t\tsamples->self.data[i] = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t"]]></e></m></meta>
		</nextVorbisSamples>
		<nextSamples public="1" set="method" line="43"><f a="samples:length:sampleRate">
	<x path="kha.arrays.Float32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></nextSamples>
		<play public="1" set="method" line="54"><f a=""><x path="Void"/></f></play>
		<pause public="1" set="method" line="58"><f a=""><x path="Void"/></f></pause>
		<stop public="1" set="method" line="62"><f a=""><x path="Void"/></f></stop>
		<length public="1" get="accessor" set="null"><x path="Float"/></length>
		<get_length set="method" line="72">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e>"\r\n\t\tif (vorbis == NULL) return 0;\r\n\t\treturn stb_vorbis_stream_length_in_seconds(vorbis);\r\n\t"</e></m></meta>
		</get_length>
		<position public="1" get="accessor" set="accessor"><x path="Float"/></position>
		<get_position set="method" line="84">
			<f a=""><x path="Float"/></f>
			<meta><m n=":functionCode"><e>"\r\n\t\tif (vorbis == NULL) return 0;\r\n\t\treturn stb_vorbis_get_sample_offset(vorbis) /\r\n\t\t\t(float)stb_vorbis_stream_length_in_samples(vorbis) *\r\n\t\t\tstb_vorbis_stream_length_in_seconds(vorbis);\r\n\t"</e></m></meta>
		</get_position>
		<set_position set="method" line="94">
			<f a="value">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":functionCode"><e>"\r\n\t\tif (vorbis == NULL) return value;\r\n\t\tunsigned int rate = stb_vorbis_get_info(vorbis).sample_rate;\r\n\t\tstb_vorbis_seek_frame(vorbis, rate * value);\r\n\t\treturn value;\r\n\t"</e></m></meta>
		</set_position>
		<volume public="1" get="accessor" set="accessor"><x path="Float"/></volume>
		<get_volume set="method" line="100"><f a=""><x path="Float"/></f></get_volume>
		<set_volume set="method" line="104"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_volume>
		<finished public="1" get="accessor" set="null"><x path="Bool"/></finished>
		<get_finished set="method" line="110"><f a=""><x path="Bool"/></f></get_finished>
		<new public="1" set="method" line="14"><f a="data:loop">
	<c path="haxe.io.Bytes"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":headerCode"><e><![CDATA["#define STB_VORBIS_HEADER_ONLY\n#include <kinc/audio1/stb_vorbis.c>"]]></e></m>
			<m n=":headerClassCode"><e>"stb_vorbis* vorbis;"</e></m>
		</meta>
	</class>
	<class path="kha.audio2.ogg.tools.Crc32" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/tools/Crc32.hx">
		<POLY get="inline" set="null" expr="0x04c11db7" line="10" static="1">
			<x path="UInt"/>
			<meta><m n=":value"><e>0x04c11db7</e></m></meta>
		</POLY>
		<table static="1"><x path="haxe.ds.Vector"><x path="UInt"/></x></table>
		<init public="1" set="method" line="13" static="1"><f a=""><x path="Void"/></f></init>
		<update public="1" get="inline" set="null" line="28" static="1"><f a="crc:byte">
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
</f></update>
		<haxe_doc>* ...
 * @author shohei909</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.audio2.ogg.tools.MathTools" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/tools/MathTools.hx">
		<ilog public="1" get="inline" set="null" line="9" static="1"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></ilog>
		<haxe_doc>* ...
 * @author shohei909</haxe_doc>
	</class>
	<class path="kha.audio2.ogg.tools.Mdct" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/tools/Mdct.hx">
		<inverseTransform public="1" get="inline" set="null" line="9" static="1"><f a="buffer:n:a:b:c:bitReverse">
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="Int"/>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="haxe.ds.Vector"><x path="Int"/></x>
	<x path="Void"/>
</f></inverseTransform>
		<step3Iter0Loop get="inline" set="null" line="303" static="1"><f a="n:e:i_off:k_off:a">
	<x path="Int"/>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="Void"/>
</f></step3Iter0Loop>
		<step3InnerRLoop get="inline" set="null" line="349" static="1"><f a="lim:e:d0:k_off:a:k1">
	<x path="Int"/>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="Int"/>
	<x path="Void"/>
</f></step3InnerRLoop>
		<step3InnerSLoop get="inline" set="null" line="397" static="1"><f a="n:e:i_off:k_off:a:aOffset0:aOffset1:k0">
	<x path="Int"/>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></step3InnerSLoop>
		<iter54 get="inline" set="null" line="445" static="1"><f a="e:zOffset">
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="Int"/>
	<x path="Void"/>
</f></iter54>
		<step3InnerSLoopLd654 get="inline" set="null" line="481" static="1"><f a="n:e:i_off:a:baseN">
	<x path="Int"/>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="Int"/>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="Int"/>
	<x path="Void"/>
</f></step3InnerSLoopLd654>
		<haxe_doc>* modified discrete cosine transform
 * @author shohei909</haxe_doc>
	</class>
	<class path="kha.audio2.ogg.vorbis.Reader" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/vorbis/Reader.hx">
		<openFromBytes public="1" set="method" line="85" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="kha.audio2.ogg.vorbis.Reader"/>
</f></openFromBytes>
		<seekBytes set="method" line="90" static="1"><f a="bytes:pos">
	<c path="haxe.io.BytesInput"/>
	<x path="Int"/>
	<x path="Void"/>
</f></seekBytes>
		<openFromFile public="1" set="method" line="95" static="1"><f a="fileName">
	<c path="String"/>
	<c path="kha.audio2.ogg.vorbis.Reader"/>
</f></openFromFile>
		<readAll public="1" set="method" line="102" static="1">
			<f a="bytes:output:?useFloat" v="::false">
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Output"/>
				<x path="Bool"/>
				<c path="kha.audio2.ogg.vorbis.data.Header"/>
			</f>
			<meta><m n=":value"><e>{ useFloat : false }</e></m></meta>
		</readAll>
		<decoder public="1" set="null"><c path="kha.audio2.ogg.vorbis.VorbisDecoder"/></decoder>
		<header public="1" get="accessor" set="null"><c path="kha.audio2.ogg.vorbis.data.Header"/></header>
		<get_header set="method" line="33"><f a=""><c path="kha.audio2.ogg.vorbis.data.Header"/></f></get_header>
		<totalSample public="1" get="accessor" set="null"><x path="Int"/></totalSample>
		<get_totalSample set="method" line="38"><f a=""><x path="Int"/></f></get_totalSample>
		<totalMillisecond public="1" get="accessor" set="null"><x path="Float"/></totalMillisecond>
		<get_totalMillisecond set="method" line="44"><f a=""><x path="Float"/></f></get_totalMillisecond>
		<currentSample public="1" get="accessor" set="accessor"><x path="Int"/></currentSample>
		<get_currentSample set="method" line="49"><f a=""><x path="Int"/></f></get_currentSample>
		<set_currentSample set="method" line="53"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_currentSample>
		<currentMillisecond public="1" get="accessor" set="accessor"><x path="Float"/></currentMillisecond>
		<get_currentMillisecond set="method" line="60"><f a=""><x path="Float"/></f></get_currentMillisecond>
		<set_currentMillisecond set="method" line="65"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_currentMillisecond>
		<loopStart public="1"><x path="Null"><x path="Int"/></x></loopStart>
		<loopLength public="1"><x path="Null"><x path="Int"/></x></loopLength>
		<seekFunc><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></seekFunc>
		<inputLength><x path="Int"/></inputLength>
		<read public="1" set="method" line="121">
			<f a="output:?samples:?channels:?sampleRate:?useFloat" v="::::false">
				<x path="kha.arrays.Float32Array"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ useFloat : false }</e></m></meta>
		</read>
		<clone public="1" set="method" line="136"><f a=""><c path="kha.audio2.ogg.vorbis.Reader"/></f></clone>
		<sampleToMillisecond public="1" get="inline" set="null" line="147"><f a="samples">
	<x path="Int"/>
	<x path="Float"/>
</f></sampleToMillisecond>
		<millisecondToSample public="1" get="inline" set="null" line="151"><f a="millseconds">
	<x path="Float"/>
	<x path="Int"/>
</f></millisecondToSample>
		<new set="method" line="76"><f a="input:seekFunc:inputLength">
	<c path="haxe.io.Input"/>
	<f a="">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* public domain ogg reader.
 * @author shohei909</haxe_doc>
	</class>
	<typedef path="kha.audio2.ogg.vorbis._Reader.InitData" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/vorbis/Reader.hx" private="1" module="kha.audio2.ogg.vorbis.Reader"><a>
	<seekFunc><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></seekFunc>
	<inputLength><x path="Int"/></inputLength>
	<input><c path="haxe.io.Input"/></input>
</a></typedef>
	<class path="kha.audio2.ogg.vorbis.VorbisDecodeState" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/vorbis/VorbisDecodeState.hx">
		<INVALID_BITS public="1" get="inline" set="null" expr="-1" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</INVALID_BITS>
		<page public="1" set="null"><c path="kha.audio2.ogg.vorbis.data.Page"/></page>
		<eof public="1" set="null"><x path="Bool"/></eof>
		<pFirst public="1" set="null"><c path="kha.audio2.ogg.vorbis.data.ProbedPage"/></pFirst>
		<pLast public="1" set="null"><c path="kha.audio2.ogg.vorbis.data.ProbedPage"/></pLast>
		<validBits public="1" set="null" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</validBits>
		<inputPosition public="1" set="null"><x path="Int"/></inputPosition>
		<input public="1" set="null"><c path="haxe.io.Input"/></input>
		<discardSamplesDeferred public="1"><x path="Int"/></discardSamplesDeferred>
		<segments public="1" set="null"><x path="haxe.ds.Vector"><x path="Int"/></x></segments>
		<bytesInSeg public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</bytesInSeg>
		<channelBuffers public="1"><x path="haxe.ds.Vector"><x path="haxe.ds.Vector"><x path="Float"/></x></x></channelBuffers>
		<channelBufferStart public="1"><x path="Int"/></channelBufferStart>
		<channelBufferEnd public="1"><x path="Int"/></channelBufferEnd>
		<currentSample public="1" set="null"><x path="Int"/></currentSample>
		<previousWindow public="1"><x path="haxe.ds.Vector"><x path="haxe.ds.Vector"><x path="Float"/></x></x></previousWindow>
		<previousLength public="1"><x path="Int"/></previousLength>
		<finalY public="1"><x path="haxe.ds.Vector"><c path="Array"><x path="Int"/></c></x></finalY>
		<firstDecode expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</firstDecode>
		<nextSeg expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</nextSeg>
		<acc><x path="UInt"/></acc>
		<lastSeg><x path="Bool"/></lastSeg>
		<lastSegWhich><x path="Int"/></lastSegWhich>
		<endSegWithKnownLoc><x path="Int"/></endSegWithKnownLoc>
		<knownLocForPacket><x path="Int"/></knownLocForPacket>
		<error><c path="kha.audio2.ogg.vorbis.data.ReaderError"/></error>
		<currentLoc><x path="Int"/></currentLoc>
		<currentLocValid><x path="Int"/></currentLocValid>
		<firstAudioPageOffset><x path="UInt"/></firstAudioPageOffset>
		<setup public="1" set="method" line="78"><f a="loc0:loc1">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setup>
		<clone public="1" set="method" line="118"><f a="seekFunc">
	<f a="">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<c path="kha.audio2.ogg.vorbis.VorbisDecodeState"/>
</f></clone>
		<next public="1" set="method" line="154"><f a=""><x path="Int"/></f></next>
		<startPacket public="1" set="method" line="189"><f a=""><x path="Void"/></f></startPacket>
		<maybeStartPacket public="1" set="method" line="202"><f a=""><x path="Bool"/></f></maybeStartPacket>
		<readBits public="1" set="method" line="231"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></readBits>
		<readPacketRaw get="inline" set="null" line="271"><f a=""><x path="Int"/></f></readPacketRaw>
		<readPacket public="1" get="inline" set="null" line="281"><f a=""><x path="Int"/></f></readPacket>
		<flushPacket public="1" get="inline" set="null" line="288"><f a=""><x path="Void"/></f></flushPacket>
		<vorbisValidate public="1" get="inline" set="null" line="295"><f a=""><x path="Void"/></f></vorbisValidate>
		<firstPageValidate public="1" set="method" line="305"><f a=""><x path="Void"/></f></firstPageValidate>
		<startFirstDecode public="1" set="method" line="315"><f a=""><x path="Void"/></f></startFirstDecode>
		<capturePattern public="1" get="inline" set="null" line="321"><f a=""><x path="Void"/></f></capturePattern>
		<skip get="inline" set="null" line="328"><f a="len">
	<x path="Int"/>
	<x path="Void"/>
</f></skip>
		<prepHuffman set="method" line="333"><f a=""><x path="Void"/></f></prepHuffman>
		<decode public="1" get="inline" set="null" line="351"><f a="c">
	<c path="kha.audio2.ogg.vorbis.data.Codebook"/>
	<x path="Int"/>
</f></decode>
		<decodeRaw public="1" get="inline" set="null" line="359"><f a="c">
	<c path="kha.audio2.ogg.vorbis.data.Codebook"/>
	<x path="Int"/>
</f></decodeRaw>
		<isLastByte public="1" get="inline" set="null" line="383"><f a=""><x path="Bool"/></f></isLastByte>
		<finishDecodePacket public="1" set="method" line="388"><f a="previousLength:n:r">
	<x path="Int"/>
	<x path="Int"/>
	<t path="kha.audio2.ogg.vorbis.DecodeInitialResult"/>
	<a>
		<right><x path="Int"/></right>
		<len><x path="Int"/></len>
		<left><x path="Int"/></left>
	</a>
</f></finishDecodePacket>
		<readInt32 public="1" get="inline" set="null" line="463"><f a=""><x path="Int"/></f></readInt32>
		<readByte public="1" get="inline" set="null" line="469"><f a=""><x path="Int"/></f></readByte>
		<read public="1" get="inline" set="null" line="475"><f a="n">
	<x path="Int"/>
	<x path="haxe.ds.Vector"><x path="Int"/></x>
</f></read>
		<readBytes public="1" get="inline" set="null" line="484"><f a="n">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></readBytes>
		<readString public="1" get="inline" set="null" line="489"><f a="n">
	<x path="Int"/>
	<c path="String"/>
</f></readString>
		<getSampleNumber public="1" set="method" line="495"><f a="seekFunc:inputLength">
	<f a="">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<x path="UInt"/>
	<x path="Int"/>
</f></getSampleNumber>
		<forcePageResync public="1" get="inline" set="null" line="567"><f a=""><x path="Void"/></f></forcePageResync>
		<setInputOffset public="1" get="inline" set="null" line="572"><f a="seekFunc:n">
	<f a="">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<x path="Int"/>
	<x path="Void"/>
</f></setInputOffset>
		<findPage public="1" set="method" line="577"><f a="seekFunc:inputLength">
	<f a="">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<x path="Int"/>
	<e path="kha.audio2.ogg.vorbis._VorbisDecodeState.FindPageResult"/>
</f></findPage>
		<analyzePage public="1" set="method" line="651"><f a="seekFunc:h">
	<f a="">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<c path="kha.audio2.ogg.vorbis.data.Header"/>
	<c path="kha.audio2.ogg.vorbis.data.ProbedPage"/>
</f></analyzePage>
		<decodeScalarRaw set="method" line="784"><f a="c">
	<c path="kha.audio2.ogg.vorbis.data.Codebook"/>
	<x path="Int"/>
</f></decodeScalarRaw>
		<new public="1" set="method" line="70"><f a="input">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author shohei909</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="kha.audio2.ogg.vorbis._VorbisDecodeState.FindPageResult" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/vorbis/VorbisDecodeState.hx" private="1" module="kha.audio2.ogg.vorbis.VorbisDecodeState">
		<Found a="end:last">
			<x path="Int"/>
			<x path="Bool"/>
		</Found>
		<NotFound/>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="kha.audio2.ogg.vorbis.VorbisDecoder" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/vorbis/VorbisDecoder.hx">
		<start public="1" set="method" line="72" static="1"><f a="input">
	<c path="haxe.io.Input"/>
	<c path="kha.audio2.ogg.vorbis.VorbisDecoder"/>
</f></start>
		<previousWindow><x path="haxe.ds.Vector"><x path="haxe.ds.Vector"><x path="Float"/></x></x></previousWindow>
		<previousLength><x path="Int"/></previousLength>
		<finalY><x path="haxe.ds.Vector"><c path="Array"><x path="Int"/></c></x></finalY>
		<a><x path="haxe.ds.Vector"><x path="haxe.ds.Vector"><x path="Float"/></x></x></a>
		<b><x path="haxe.ds.Vector"><x path="haxe.ds.Vector"><x path="Float"/></x></x></b>
		<c><x path="haxe.ds.Vector"><x path="haxe.ds.Vector"><x path="Float"/></x></x></c>
		<window><x path="haxe.ds.Vector"><x path="haxe.ds.Vector"><x path="Float"/></x></x></window>
		<bitReverseData><x path="haxe.ds.Vector"><x path="haxe.ds.Vector"><x path="Int"/></x></x></bitReverseData>
		<channelBuffers><x path="haxe.ds.Vector"><x path="haxe.ds.Vector"><x path="Float"/></x></x></channelBuffers>
		<channelBufferStart><x path="Int"/></channelBufferStart>
		<channelBufferEnd><x path="Int"/></channelBufferEnd>
		<header public="1" set="null"><c path="kha.audio2.ogg.vorbis.data.Header"/></header>
		<currentSample public="1" set="null"><x path="Int"/></currentSample>
		<totalSample public="1" set="null"><x path="Null"><x path="Int"/></x></totalSample>
		<decodeState><c path="kha.audio2.ogg.vorbis.VorbisDecodeState"/></decodeState>
		<read public="1" set="method" line="82"><f a="output:samples:channels:sampleRate:useFloat">
	<x path="kha.arrays.Float32Array"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></read>
		<skipSamples public="1" set="method" line="152"><f a="len">
	<x path="Int"/>
	<x path="Int"/>
</f></skipSamples>
		<setupSampleNumber public="1" set="method" line="171"><f a="seekFunc:inputLength">
	<f a="">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<x path="Int"/>
	<x path="Void"/>
</f></setupSampleNumber>
		<seek public="1" set="method" line="178"><f a="seekFunc:inputLength:sampleNumber">
	<f a="">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<x path="UInt"/>
	<x path="Int"/>
	<x path="Void"/>
</f></seek>
		<seekFrameFromPage public="1" set="method" line="280"><f a="seekFunc:pageStart:firstSample:targetSample">
	<f a="">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></seekFrameFromPage>
		<clone public="1" set="method" line="343"><f a="seekFunc">
	<f a="">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<c path="kha.audio2.ogg.vorbis.VorbisDecoder"/>
</f></clone>
		<ensurePosition public="1" set="method" line="375"><f a="seekFunc">
	<f a="">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></ensurePosition>
		<getFrameFloat set="method" line="379"><f a=""><x path="Int"/></f></getFrameFloat>
		<pumpFirstFrame set="method" line="394"><f a=""><x path="Void"/></f></pumpFirstFrame>
		<finishFrame set="method" line="398"><f a="r">
	<t path="kha.audio2.ogg.vorbis.DecodePacketResult"/>
	<x path="Int"/>
</f></finishFrame>
		<getWindow set="method" line="458"><f a="len">
	<x path="Int"/>
	<x path="Null"><x path="haxe.ds.Vector"><x path="Float"/></x></x>
</f></getWindow>
		<initBlocksize set="method" line="471"><f a="bs:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></initBlocksize>
		<inverseMdct set="method" line="485"><f a="buffer:n:blocktype">
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></inverseMdct>
		<decodePacket set="method" line="490"><f a=""><t path="kha.audio2.ogg.vorbis.DecodePacketResult"/></f></decodePacket>
		<decodeInitial set="method" line="500"><f a=""><t path="kha.audio2.ogg.vorbis.DecodeInitialResult"/></f></decodeInitial>
		<decodePacketRest set="method" line="557"><f a="r">
	<t path="kha.audio2.ogg.vorbis.DecodeInitialResult"/>
	<t path="kha.audio2.ogg.vorbis.DecodePacketResult"/>
</f></decodePacketRest>
		<new set="method" line="44"><f a="header:decodeState">
	<c path="kha.audio2.ogg.vorbis.data.Header"/>
	<c path="kha.audio2.ogg.vorbis.VorbisDecodeState"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author shohei909</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="kha.audio2.ogg.vorbis.DecodePacketResult" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/vorbis/VorbisDecoder.hx" module="kha.audio2.ogg.vorbis.VorbisDecoder"><a>
	<right><x path="Int"/></right>
	<len><x path="Int"/></len>
	<left><x path="Int"/></left>
</a></typedef>
	<typedef path="kha.audio2.ogg.vorbis.DecodeInitialResult" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/vorbis/VorbisDecoder.hx" module="kha.audio2.ogg.vorbis.VorbisDecoder"><a>
	<right><t path="kha.audio2.ogg.vorbis._VorbisDecoder.Range"/></right>
	<mode><x path="Int"/></mode>
	<left><t path="kha.audio2.ogg.vorbis._VorbisDecoder.Range"/></left>
</a></typedef>
	<typedef path="kha.audio2.ogg.vorbis._VorbisDecoder.Range" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/vorbis/VorbisDecoder.hx" private="1" module="kha.audio2.ogg.vorbis.VorbisDecoder"><a>
	<start><x path="Int"/></start>
	<end><x path="Int"/></end>
</a></typedef>
	<class path="kha.audio2.ogg.vorbis.VorbisTools" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/vorbis/VorbisTools.hx">
		<EOP public="1" get="inline" set="null" expr="-1" line="16" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</EOP>
		<integerDivideTable public="1" static="1"><x path="haxe.ds.Vector"><x path="haxe.ds.Vector"><x path="Int"/></x></x></integerDivideTable>
		<M__PI get="inline" set="null" expr="3.14159265358979323846264" line="18" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>3.14159265358979323846264</e></m></meta>
		</M__PI>
		<DIVTAB_NUMER get="inline" set="null" expr="32" line="20" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32</e></m></meta>
		</DIVTAB_NUMER>
		<DIVTAB_DENOM get="inline" set="null" expr="64" line="21" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>64</e></m></meta>
		</DIVTAB_DENOM>
		<INVERSE_DB_TABLE public="1" expr="[1.0649863e-07, 1.1341951e-07, 1.2079015e-07, 1.2863978e-07, 1.3699951e-07, 1.4590251e-07, 1.5538408e-07, 1.6548181e-07, 1.7623575e-07, 1.8768855e-07, 1.9988561e-07, 2.1287530e-07, 2.2670913e-07, 2.4144197e-07, 2.5713223e-07, 2.7384213e-07, 2.9163793e-07, 3.1059021e-07, 3.3077411e-07, 3.5226968e-07, 3.7516214e-07, 3.9954229e-07, 4.2550680e-07, 4.5315863e-07, 4.8260743e-07, 5.1396998e-07, 5.4737065e-07, 5.8294187e-07, 6.2082472e-07, 6.6116941e-07, 7.0413592e-07, 7.4989464e-07, 7.9862701e-07, 8.5052630e-07, 9.0579828e-07, 9.6466216e-07, 1.0273513e-06, 1.0941144e-06, 1.1652161e-06, 1.2409384e-06, 1.3215816e-06, 1.4074654e-06, 1.4989305e-06, 1.5963394e-06, 1.7000785e-06, 1.8105592e-06, 1.9282195e-06, 2.0535261e-06, 2.1869758e-06, 2.3290978e-06, 2.4804557e-06, 2.6416497e-06, 2.8133190e-06, 2.9961443e-06, 3.1908506e-06, 3.3982101e-06, 3.6190449e-06, 3.8542308e-06, 4.1047004e-06, 4.3714470e-06, 4.6555282e-06, 4.9580707e-06, 5.2802740e-06, 5.6234160e-06, 5.9888572e-06, 6.3780469e-06, 6.7925283e-06, 7.2339451e-06, 7.7040476e-06, 8.2047000e-06, 8.7378876e-06, 9.3057248e-06, 9.9104632e-06, 1.0554501e-05, 1.1240392e-05, 1.1970856e-05, 1.2748789e-05, 1.3577278e-05, 1.4459606e-05, 1.5399272e-05, 1.6400004e-05, 1.7465768e-05, 1.8600792e-05, 1.9809576e-05, 2.1096914e-05, 2.2467911e-05, 2.3928002e-05, 2.5482978e-05, 2.7139006e-05, 2.8902651e-05, 3.0780908e-05, 3.2781225e-05, 3.4911534e-05, 3.7180282e-05, 3.9596466e-05, 4.2169667e-05, 4.4910090e-05, 4.7828601e-05, 5.0936773e-05, 5.4246931e-05, 5.7772202e-05, 6.1526565e-05, 6.5524908e-05, 6.9783085e-05, 7.4317983e-05, 7.9147585e-05, 8.4291040e-05, 8.9768747e-05, 9.5602426e-05, 0.00010181521, 0.00010843174, 0.00011547824, 0.00012298267, 0.00013097477, 0.00013948625, 0.00014855085, 0.00015820453, 0.00016848555, 0.00017943469, 0.00019109536, 0.00020351382, 0.00021673929, 0.00023082423, 0.00024582449, 0.00026179955, 0.00027881276, 0.00029693158, 0.00031622787, 0.00033677814, 0.00035866388, 0.00038197188, 0.00040679456, 0.00043323036, 0.00046138411, 0.00049136745, 0.00052329927, 0.00055730621, 0.00059352311, 0.00063209358, 0.00067317058, 0.00071691700, 0.00076350630, 0.00081312324, 0.00086596457, 0.00092223983, 0.00098217216, 0.0010459992, 0.0011139742, 0.0011863665, 0.0012634633, 0.0013455702, 0.0014330129, 0.0015261382, 0.0016253153, 0.0017309374, 0.0018434235, 0.0019632195, 0.0020908006, 0.0022266726, 0.0023713743, 0.0025254795, 0.0026895994, 0.0028643847, 0.0030505286, 0.0032487691, 0.0034598925, 0.0036847358, 0.0039241906, 0.0041792066, 0.0044507950, 0.0047400328, 0.0050480668, 0.0053761186, 0.0057254891, 0.0060975636, 0.0064938176, 0.0069158225, 0.0073652516, 0.0078438871, 0.0083536271, 0.0088964928, 0.009474637, 0.010090352, 0.010746080, 0.011444421, 0.012188144, 0.012980198, 0.013823725, 0.014722068, 0.015678791, 0.016697687, 0.017782797, 0.018938423, 0.020169149, 0.021479854, 0.022875735, 0.024362330, 0.025945531, 0.027631618, 0.029427276, 0.031339626, 0.033376252, 0.035545228, 0.037855157, 0.040315199, 0.042935108, 0.045725273, 0.048696758, 0.051861348, 0.055231591, 0.058820850, 0.062643361, 0.066714279, 0.071049749, 0.075666962, 0.080584227, 0.085821044, 0.091398179, 0.097337747, 0.10366330, 0.11039993, 0.11757434, 0.12521498, 0.13335215, 0.14201813, 0.15124727, 0.16107617, 0.17154380, 0.18269168, 0.19456402, 0.20720788, 0.22067342, 0.23501402, 0.25028656, 0.26655159, 0.28387361, 0.30232132, 0.32196786, 0.34289114, 0.36517414, 0.38890521, 0.41417847, 0.44109412, 0.46975890, 0.50028648, 0.53279791, 0.56742212, 0.60429640, 0.64356699, 0.68538959, 0.72993007, 0.77736504, 0.82788260, 0.88168307, 0.9389798, 1.0]" line="23" static="1">
			<c path="Array"><x path="Float"/></c>
			<meta><m n=":value"><e>[1.0649863e-07, 1.1341951e-07, 1.2079015e-07, 1.2863978e-07, 1.3699951e-07, 1.4590251e-07, 1.5538408e-07, 1.6548181e-07, 1.7623575e-07, 1.8768855e-07, 1.9988561e-07, 2.1287530e-07, 2.2670913e-07, 2.4144197e-07, 2.5713223e-07, 2.7384213e-07, 2.9163793e-07, 3.1059021e-07, 3.3077411e-07, 3.5226968e-07, 3.7516214e-07, 3.9954229e-07, 4.2550680e-07, 4.5315863e-07, 4.8260743e-07, 5.1396998e-07, 5.4737065e-07, 5.8294187e-07, 6.2082472e-07, 6.6116941e-07, 7.0413592e-07, 7.4989464e-07, 7.9862701e-07, 8.5052630e-07, 9.0579828e-07, 9.6466216e-07, 1.0273513e-06, 1.0941144e-06, 1.1652161e-06, 1.2409384e-06, 1.3215816e-06, 1.4074654e-06, 1.4989305e-06, 1.5963394e-06, 1.7000785e-06, 1.8105592e-06, 1.9282195e-06, 2.0535261e-06, 2.1869758e-06, 2.3290978e-06, 2.4804557e-06, 2.6416497e-06, 2.8133190e-06, 2.9961443e-06, 3.1908506e-06, 3.3982101e-06, 3.6190449e-06, 3.8542308e-06, 4.1047004e-06, 4.3714470e-06, 4.6555282e-06, 4.9580707e-06, 5.2802740e-06, 5.6234160e-06, 5.9888572e-06, 6.3780469e-06, 6.7925283e-06, 7.2339451e-06, 7.7040476e-06, 8.2047000e-06, 8.7378876e-06, 9.3057248e-06, 9.9104632e-06, 1.0554501e-05, 1.1240392e-05, 1.1970856e-05, 1.2748789e-05, 1.3577278e-05, 1.4459606e-05, 1.5399272e-05, 1.6400004e-05, 1.7465768e-05, 1.8600792e-05, 1.9809576e-05, 2.1096914e-05, 2.2467911e-05, 2.3928002e-05, 2.5482978e-05, 2.7139006e-05, 2.8902651e-05, 3.0780908e-05, 3.2781225e-05, 3.4911534e-05, 3.7180282e-05, 3.9596466e-05, 4.2169667e-05, 4.4910090e-05, 4.7828601e-05, 5.0936773e-05, 5.4246931e-05, 5.7772202e-05, 6.1526565e-05, 6.5524908e-05, 6.9783085e-05, 7.4317983e-05, 7.9147585e-05, 8.4291040e-05, 8.9768747e-05, 9.5602426e-05, 0.00010181521, 0.00010843174, 0.00011547824, 0.00012298267, 0.00013097477, 0.00013948625, 0.00014855085, 0.00015820453, 0.00016848555, 0.00017943469, 0.00019109536, 0.00020351382, 0.00021673929, 0.00023082423, 0.00024582449, 0.00026179955, 0.00027881276, 0.00029693158, 0.00031622787, 0.00033677814, 0.00035866388, 0.00038197188, 0.00040679456, 0.00043323036, 0.00046138411, 0.00049136745, 0.00052329927, 0.00055730621, 0.00059352311, 0.00063209358, 0.00067317058, 0.00071691700, 0.00076350630, 0.00081312324, 0.00086596457, 0.00092223983, 0.00098217216, 0.0010459992, 0.0011139742, 0.0011863665, 0.0012634633, 0.0013455702, 0.0014330129, 0.0015261382, 0.0016253153, 0.0017309374, 0.0018434235, 0.0019632195, 0.0020908006, 0.0022266726, 0.0023713743, 0.0025254795, 0.0026895994, 0.0028643847, 0.0030505286, 0.0032487691, 0.0034598925, 0.0036847358, 0.0039241906, 0.0041792066, 0.0044507950, 0.0047400328, 0.0050480668, 0.0053761186, 0.0057254891, 0.0060975636, 0.0064938176, 0.0069158225, 0.0073652516, 0.0078438871, 0.0083536271, 0.0088964928, 0.009474637, 0.010090352, 0.010746080, 0.011444421, 0.012188144, 0.012980198, 0.013823725, 0.014722068, 0.015678791, 0.016697687, 0.017782797, 0.018938423, 0.020169149, 0.021479854, 0.022875735, 0.024362330, 0.025945531, 0.027631618, 0.029427276, 0.031339626, 0.033376252, 0.035545228, 0.037855157, 0.040315199, 0.042935108, 0.045725273, 0.048696758, 0.051861348, 0.055231591, 0.058820850, 0.062643361, 0.066714279, 0.071049749, 0.075666962, 0.080584227, 0.085821044, 0.091398179, 0.097337747, 0.10366330, 0.11039993, 0.11757434, 0.12521498, 0.13335215, 0.14201813, 0.15124727, 0.16107617, 0.17154380, 0.18269168, 0.19456402, 0.20720788, 0.22067342, 0.23501402, 0.25028656, 0.26655159, 0.28387361, 0.30232132, 0.32196786, 0.34289114, 0.36517414, 0.38890521, 0.41417847, 0.44109412, 0.46975890, 0.50028648, 0.53279791, 0.56742212, 0.60429640, 0.64356699, 0.68538959, 0.72993007, 0.77736504, 0.82788260, 0.88168307, 0.9389798, 1.0]</e></m></meta>
		</INVERSE_DB_TABLE>
		<assert public="1" get="inline" set="null" line="90" static="1"><f a="b:?p">
	<x path="Bool"/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></assert>
		<neighbors public="1" get="inline" set="null" line="98" static="1"><f a="x:n">
	<x path="haxe.ds.Vector"><x path="Int"/></x>
	<x path="Int"/>
	<a>
		<low><x path="Int"/></low>
		<high><x path="Int"/></high>
	</a>
</f></neighbors>
		<floatUnpack public="1" get="inline" set="null" line="115" static="1"><f a="x">
	<x path="UInt"/>
	<x path="Float"/>
</f></floatUnpack>
		<bitReverse public="1" get="inline" set="null" line="125" static="1"><f a="n">
	<x path="UInt"/>
	<x path="UInt"/>
</f></bitReverse>
		<pointCompare public="1" get="inline" set="null" line="134" static="1"><f a="a:b">
	<c path="kha.audio2.ogg.vorbis.data.IntPoint"/>
	<c path="kha.audio2.ogg.vorbis.data.IntPoint"/>
	<x path="Int"/>
</f></pointCompare>
		<uintAsc public="1" set="method" line="138" static="1"><f a="a:b">
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Int"/>
</f></uintAsc>
		<lookup1Values public="1" set="method" line="148" static="1"><f a="entries:dim">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lookup1Values>
		<computeWindow public="1" set="method" line="160" static="1"><f a="n:window">
	<x path="Int"/>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="Void"/>
</f></computeWindow>
		<square public="1" set="method" line="168" static="1"><f a="f">
	<x path="Float"/>
	<x path="Float"/>
</f></square>
		<computeBitReverse public="1" set="method" line="172" static="1"><f a="n:rev">
	<x path="Int"/>
	<x path="haxe.ds.Vector"><x path="Int"/></x>
	<x path="Void"/>
</f></computeBitReverse>
		<computeTwiddleFactors public="1" set="method" line="182" static="1"><f a="n:af:bf:cf">
	<x path="Int"/>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="Void"/>
</f></computeTwiddleFactors>
		<drawLine public="1" set="method" line="205" static="1"><f a="output:x0:y0:x1:y1:n">
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawLine>
		<stbProf public="1" set="method" static="1"><f a="i">
	<d/>
	<d/>
</f></stbProf>
		<predictPoint public="1" get="inline" set="null" line="264" static="1"><f a="x:x0:x1:y0:y1">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></predictPoint>
		<emptyFloatVector public="1" get="inline" set="null" line="274" static="1"><f a="len">
	<x path="Int"/>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
</f></emptyFloatVector>
		<copyVector public="1" set="method" line="284" static="1"><f a="source">
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
</f></copyVector>
		<haxe_doc>* ...
 * @author shohei909</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.audio2.ogg.vorbis.data.Codebook" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/vorbis/data/Codebook.hx">
		<NO_CODE public="1" get="inline" set="null" expr="255" line="15" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>255</e></m></meta>
		</NO_CODE>
		<read public="1" set="method" line="37" static="1"><f a="decodeState">
	<c path="kha.audio2.ogg.vorbis.VorbisDecodeState"/>
	<c path="kha.audio2.ogg.vorbis.data.Codebook"/>
</f></read>
		<delay expr="0" line="480" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</delay>
		<dimensions public="1"><x path="Int"/></dimensions>
		<entries public="1"><x path="Int"/></entries>
		<codewordLengths public="1"><x path="haxe.ds.Vector"><x path="Int"/></x></codewordLengths>
		<minimumValue public="1"><x path="Float"/></minimumValue>
		<deltaValue public="1"><x path="Float"/></deltaValue>
		<valueBits public="1"><x path="Int"/></valueBits>
		<lookupType public="1"><x path="Int"/></lookupType>
		<sequenceP public="1"><x path="Bool"/></sequenceP>
		<sparse public="1"><x path="Bool"/></sparse>
		<lookupValues public="1"><x path="UInt"/></lookupValues>
		<multiplicands public="1"><x path="haxe.ds.Vector"><x path="Float"/></x></multiplicands>
		<codewords public="1"><x path="haxe.ds.Vector"><x path="UInt"/></x></codewords>
		<fastHuffman public="1"><x path="haxe.ds.Vector"><x path="Int"/></x></fastHuffman>
		<sortedCodewords public="1"><c path="Array"><x path="UInt"/></c></sortedCodewords>
		<sortedValues public="1"><x path="haxe.ds.Vector"><x path="Int"/></x></sortedValues>
		<sortedEntries public="1"><x path="Int"/></sortedEntries>
		<addEntry get="inline" set="null" line="187"><f a="huffCode:symbol:count:len:values">
	<x path="UInt"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.ds.Vector"><x path="UInt"/></x>
	<x path="Void"/>
</f></addEntry>
		<includeInSort get="inline" set="null" line="198"><f a="len">
	<x path="Int"/>
	<x path="Bool"/>
</f></includeInSort>
		<computeCodewords set="method" line="213"><f a="len:n:values">
	<x path="haxe.ds.Vector"><x path="Int"/></x>
	<x path="Int"/>
	<x path="haxe.ds.Vector"><x path="UInt"/></x>
	<x path="Bool"/>
</f></computeCodewords>
		<computeSortedHuffman set="method" line="283"><f a="lengths:values">
	<x path="haxe.ds.Vector"><x path="Int"/></x>
	<x path="haxe.ds.Vector"><x path="UInt"/></x>
	<x path="Void"/>
</f></computeSortedHuffman>
		<computeAcceleratedHuffman set="method" line="340"><f a=""><x path="Void"/></f></computeAcceleratedHuffman>
		<codebookDecode set="method" line="366"><f a="decodeState:output:offset:len">
	<c path="kha.audio2.ogg.vorbis.VorbisDecodeState"/>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></codebookDecode>
		<codebookDecodeStep set="method" line="414"><f a="decodeState:output:offset:len:step">
	<c path="kha.audio2.ogg.vorbis.VorbisDecodeState"/>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></codebookDecodeStep>
		<decodeStart get="inline" set="null" line="457"><f a="decodeState">
	<c path="kha.audio2.ogg.vorbis.VorbisDecodeState"/>
	<x path="Int"/>
</f></decodeStart>
		<decodeDeinterleaveRepeat public="1" set="method" line="482"><f a="decodeState:residueBuffers:ch:cInter:pInter:len:totalDecode">
	<c path="kha.audio2.ogg.vorbis.VorbisDecodeState"/>
	<x path="haxe.ds.Vector"><x path="haxe.ds.Vector"><x path="Float"/></x></x>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<a>
		<pInter><x path="Int"/></pInter>
		<cInter><x path="Int"/></cInter>
	</a>
</f></decodeDeinterleaveRepeat>
		<residueDecode public="1" set="method" line="573"><f a="decodeState:target:offset:n:rtype">
	<c path="kha.audio2.ogg.vorbis.VorbisDecodeState"/>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></residueDecode>
		<new public="1" set="method" line="34"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ...
 * @author shohei909</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.audio2.ogg.vorbis.data.Comment" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/vorbis/data/Comment.hx">
		<data public="1" set="null"><t path="Map">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</t></data>
		<title public="1" get="accessor" set="null"><c path="String"/></title>
		<get_title set="method" line="11"><f a=""><x path="Null"><c path="String"/></x></f></get_title>
		<loopStart public="1" get="accessor" set="null"><x path="Null"><x path="Int"/></x></loopStart>
		<get_loopStart set="method" line="16"><f a=""><x path="Null"><x path="Int"/></x></f></get_loopStart>
		<loopLength public="1" get="accessor" set="null"><x path="Null"><x path="Int"/></x></loopLength>
		<get_loopLength set="method" line="21"><f a=""><x path="Null"><x path="Int"/></x></f></get_loopLength>
		<version public="1" get="accessor" set="null"><c path="String"/></version>
		<get_version set="method" line="26"><f a=""><x path="Null"><c path="String"/></x></f></get_version>
		<album public="1" get="accessor" set="null"><c path="String"/></album>
		<get_album set="method" line="31"><f a=""><x path="Null"><c path="String"/></x></f></get_album>
		<organization public="1" get="accessor" set="null"><c path="String"/></organization>
		<get_organization set="method" line="36"><f a=""><x path="Null"><c path="String"/></x></f></get_organization>
		<tracknumber public="1" get="accessor" set="null"><c path="String"/></tracknumber>
		<get_tracknumber set="method" line="41"><f a=""><x path="Null"><c path="String"/></x></f></get_tracknumber>
		<performer public="1" get="accessor" set="null"><c path="String"/></performer>
		<get_performer set="method" line="46"><f a=""><x path="Null"><c path="String"/></x></f></get_performer>
		<copyright public="1" get="accessor" set="null"><c path="String"/></copyright>
		<get_copyright set="method" line="51"><f a=""><x path="Null"><c path="String"/></x></f></get_copyright>
		<license public="1" get="accessor" set="null"><c path="String"/></license>
		<get_license set="method" line="56"><f a=""><x path="Null"><c path="String"/></x></f></get_license>
		<artist public="1" get="accessor" set="null"><c path="String"/></artist>
		<get_artist set="method" line="61"><f a=""><x path="Null"><c path="String"/></x></f></get_artist>
		<description public="1" get="accessor" set="null"><c path="String"/></description>
		<get_description set="method" line="66"><f a=""><x path="Null"><c path="String"/></x></f></get_description>
		<genre public="1" get="accessor" set="null"><c path="String"/></genre>
		<get_genre set="method" line="71"><f a=""><x path="Null"><c path="String"/></x></f></get_genre>
		<date public="1" get="accessor" set="null"><c path="String"/></date>
		<get_date set="method" line="76"><f a=""><x path="Null"><c path="String"/></x></f></get_date>
		<location public="1" get="accessor" set="null"><c path="String"/></location>
		<get_location set="method" line="81"><f a=""><x path="Null"><c path="String"/></x></f></get_location>
		<contact public="1" get="accessor" set="null"><c path="String"/></contact>
		<get_contact set="method" line="86"><f a=""><x path="Null"><c path="String"/></x></f></get_contact>
		<isrc public="1" get="accessor" set="null"><c path="String"/></isrc>
		<get_isrc set="method" line="91"><f a=""><x path="Null"><c path="String"/></x></f></get_isrc>
		<artists public="1" get="accessor" set="null"><c path="Array"><c path="String"/></c></artists>
		<get_artists set="method" line="96"><f a=""><x path="Null"><c path="Array"><c path="String"/></c></x></f></get_artists>
		<add public="1" set="method" line="104"><f a="key:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></add>
		<getString public="1" set="method" line="113"><f a="key">
	<c path="String"/>
	<x path="Null"><c path="String"/></x>
</f></getString>
		<getArray public="1" set="method" line="122"><f a="key">
	<c path="String"/>
	<x path="Null"><c path="Array"><c path="String"/></c></x>
</f></getArray>
		<new public="1" set="method" line="100"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ...
 * @author shohei909</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.audio2.ogg.vorbis.data.Floor" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/vorbis/data/Floor.hx">
		<read public="1" set="method" line="22" static="1"><f a="decodeState:codebooks">
	<c path="kha.audio2.ogg.vorbis.VorbisDecodeState"/>
	<x path="haxe.ds.Vector"><c path="kha.audio2.ogg.vorbis.data.Codebook"/></x>
	<c path="kha.audio2.ogg.vorbis.data.Floor"/>
</f></read>
		<floor0 public="1"><c path="kha.audio2.ogg.vorbis.data.Floor0"/></floor0>
		<floor1 public="1"><c path="kha.audio2.ogg.vorbis.data.Floor1"/></floor1>
		<type public="1"><x path="Int"/></type>
		<new set="method" line="17"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ...
 * @author shohei909</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.audio2.ogg.vorbis.data.Floor0" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/vorbis/data/Floor.hx" module="kha.audio2.ogg.vorbis.data.Floor">
		<order public="1"><x path="Int"/></order>
		<rate public="1"><x path="Int"/></rate>
		<barkMapSize public="1"><x path="Int"/></barkMapSize>
		<amplitudeBits public="1"><x path="Int"/></amplitudeBits>
		<amplitudeOffset public="1"><x path="Int"/></amplitudeOffset>
		<numberOfBooks public="1"><x path="Int"/></numberOfBooks>
		<bookList public="1"><x path="haxe.ds.Vector"><x path="UInt"/></x></bookList>
		<new public="1" set="method" line="130"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.audio2.ogg.vorbis.data.Floor1" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/vorbis/data/Floor.hx" module="kha.audio2.ogg.vorbis.data.Floor">
		<partitions public="1"><x path="Int"/></partitions>
		<partitionClassList public="1"><x path="haxe.ds.Vector"><x path="Int"/></x></partitionClassList>
		<classDimensions public="1"><x path="haxe.ds.Vector"><x path="Int"/></x></classDimensions>
		<classSubclasses public="1"><x path="haxe.ds.Vector"><x path="Int"/></x></classSubclasses>
		<classMasterbooks public="1"><x path="haxe.ds.Vector"><x path="Int"/></x></classMasterbooks>
		<subclassBooks public="1"><x path="haxe.ds.Vector"><x path="haxe.ds.Vector"><x path="Int"/></x></x></subclassBooks>
		<xlist public="1"><x path="haxe.ds.Vector"><x path="Int"/></x></xlist>
		<sortedOrder public="1"><x path="haxe.ds.Vector"><x path="Int"/></x></sortedOrder>
		<neighbors public="1"><x path="haxe.ds.Vector"><x path="haxe.ds.Vector"><x path="Int"/></x></x></neighbors>
		<floor1Multiplier public="1"><x path="Int"/></floor1Multiplier>
		<rangebits public="1"><x path="Int"/></rangebits>
		<values public="1"><x path="Int"/></values>
		<new public="1" set="method" line="149"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.audio2.ogg.vorbis.data.Header" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/vorbis/data/Header.hx">
		<PACKET_ID public="1" get="inline" set="null" expr="1" line="18" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</PACKET_ID>
		<PACKET_COMMENT public="1" get="inline" set="null" expr="3" line="19" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</PACKET_COMMENT>
		<PACKET_SETUP public="1" get="inline" set="null" expr="5" line="20" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</PACKET_SETUP>
		<read public="1" set="method" line="41" static="1"><f a="decodeState">
	<c path="kha.audio2.ogg.vorbis.VorbisDecodeState"/>
	<c path="kha.audio2.ogg.vorbis.data.Header"/>
</f></read>
		<maximumBitRate public="1" set="null"><x path="UInt"/></maximumBitRate>
		<nominalBitRate public="1" set="null"><x path="UInt"/></nominalBitRate>
		<minimumBitRate public="1" set="null"><x path="UInt"/></minimumBitRate>
		<sampleRate public="1" set="null"><x path="UInt"/></sampleRate>
		<channel public="1" set="null"><x path="Int"/></channel>
		<blocksize0 public="1" set="null"><x path="Int"/></blocksize0>
		<blocksize1 public="1" set="null"><x path="Int"/></blocksize1>
		<codebooks public="1" set="null"><x path="haxe.ds.Vector"><c path="kha.audio2.ogg.vorbis.data.Codebook"/></x></codebooks>
		<floorConfig public="1" set="null"><x path="haxe.ds.Vector"><c path="kha.audio2.ogg.vorbis.data.Floor"/></x></floorConfig>
		<residueConfig public="1" set="null"><x path="haxe.ds.Vector"><c path="kha.audio2.ogg.vorbis.data.Residue"/></x></residueConfig>
		<mapping public="1" set="null"><x path="haxe.ds.Vector"><c path="kha.audio2.ogg.vorbis.data.Mapping"/></x></mapping>
		<modes public="1" set="null"><x path="haxe.ds.Vector"><c path="kha.audio2.ogg.vorbis.data.Mode"/></x></modes>
		<comment public="1" set="null"><c path="kha.audio2.ogg.vorbis.data.Comment"/></comment>
		<vendor public="1" set="null"><c path="String"/></vendor>
		<new set="method" line="37"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ...
 * @author shohei909</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.audio2.ogg.vorbis.data.IntPoint" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/vorbis/data/IntPoint.hx">
		<x public="1"><x path="Int"/></x>
		<y public="1"><x path="Int"/></y>
		<new public="1" set="method" line="12"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ...
 * @author shohei909</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.audio2.ogg.vorbis.data.Mapping" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/vorbis/data/Mapping.hx">
		<read public="1" set="method" line="17" static="1"><f a="decodeState:channels">
	<c path="kha.audio2.ogg.vorbis.VorbisDecodeState"/>
	<x path="Int"/>
	<c path="kha.audio2.ogg.vorbis.data.Mapping"/>
</f></read>
		<couplingSteps public="1"><x path="Int"/></couplingSteps>
		<chan public="1"><x path="haxe.ds.Vector"><c path="kha.audio2.ogg.vorbis.data.MappingChannel"/></x></chan>
		<submaps public="1"><x path="Int"/></submaps>
		<submapFloor public="1"><x path="haxe.ds.Vector"><x path="Int"/></x></submapFloor>
		<submapResidue public="1"><x path="haxe.ds.Vector"><x path="Int"/></x></submapResidue>
		<doFloor public="1" set="method" line="88"><f a="floors:i:n:target:finalY:step2Flag">
	<x path="haxe.ds.Vector"><c path="kha.audio2.ogg.vorbis.data.Floor"/></x>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<c path="Array"><x path="Int"/></c>
	<x path="haxe.ds.Vector"><x path="Bool"/></x>
	<x path="Void"/>
</f></doFloor>
		<new public="1" set="method" line="14"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.audio2.ogg.vorbis.data.MappingChannel" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/vorbis/data/Mapping.hx" module="kha.audio2.ogg.vorbis.data.Mapping">
		<magnitude public="1"><x path="Int"/></magnitude>
		<angle public="1"><x path="Int"/></angle>
		<mux public="1"><x path="Int"/></mux>
		<new public="1" set="method" line="125"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.audio2.ogg.vorbis.data.Mode" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/vorbis/data/Mode.hx">
		<read public="1" set="method" line="15" static="1"><f a="decodeState">
	<c path="kha.audio2.ogg.vorbis.VorbisDecodeState"/>
	<c path="kha.audio2.ogg.vorbis.data.Mode"/>
</f></read>
		<blockflag public="1"><x path="Bool"/></blockflag>
		<mapping public="1"><x path="Int"/></mapping>
		<windowtype public="1"><x path="Int"/></windowtype>
		<transformtype public="1"><x path="Int"/></transformtype>
		<new public="1" set="method" line="12"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.audio2.ogg.vorbis.data.Page" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/vorbis/data/Page.hx">
		<flag public="1" set="null"><x path="Int"/></flag>
		<clone public="1" set="method" line="18"><f a=""><c path="kha.audio2.ogg.vorbis.data.Page"/></f></clone>
		<start public="1" set="method" line="25"><f a="decodeState">
	<c path="kha.audio2.ogg.vorbis.VorbisDecodeState"/>
	<x path="Void"/>
</f></start>
		<startWithoutCapturePattern public="1" set="method" line="31"><f a="decodeState">
	<c path="kha.audio2.ogg.vorbis.VorbisDecodeState"/>
	<x path="Void"/>
</f></startWithoutCapturePattern>
		<new public="1" set="method" line="14"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ...
 * @author shohei909</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.audio2.ogg.vorbis.data.PageFlag" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/vorbis/data/Page.hx" module="kha.audio2.ogg.vorbis.data.Page">
		<CONTINUED_PACKET public="1" get="inline" set="null" expr="1" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</CONTINUED_PACKET>
		<FIRST_PAGE public="1" get="inline" set="null" expr="2" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</FIRST_PAGE>
		<LAST_PAGE public="1" get="inline" set="null" expr="4" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</LAST_PAGE>
	</class>
	<class path="kha.audio2.ogg.vorbis.data.ProbedPage" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/vorbis/data/ProbedPage.hx">
		<pageStart public="1"><x path="Int"/></pageStart>
		<pageEnd public="1"><x path="Int"/></pageEnd>
		<afterPreviousPageStart public="1"><x path="Int"/></afterPreviousPageStart>
		<firstDecodedSample public="1"><x path="Null"><x path="Int"/></x></firstDecodedSample>
		<lastDecodedSample public="1"><x path="Null"><x path="Int"/></x></lastDecodedSample>
		<new public="1" set="method" line="16"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ...
 * @author shohei909</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.audio2.ogg.vorbis.data.ReaderError" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/vorbis/data/ReaderError.hx">
		<type public="1" set="null"><e path="kha.audio2.ogg.vorbis.data.ReaderErrorType"/></type>
		<message public="1" set="null"><c path="String"/></message>
		<posInfos public="1" set="null"><t path="haxe.PosInfos"/></posInfos>
		<new public="1" set="method" line="14">
			<f a="type:?message:?posInfos" v=":&quot;&quot;:">
				<e path="kha.audio2.ogg.vorbis.data.ReaderErrorType"/>
				<c path="String"/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ message : "" }</e></m></meta>
		</new>
		<haxe_doc>* ...
 * @author shohei909</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="kha.audio2.ogg.vorbis.data.ReaderErrorType" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/vorbis/data/ReaderError.hx" module="kha.audio2.ogg.vorbis.data.ReaderError">
		<NEED_MORE_DATA/>
		<INVALID_API_MIXING/>
		<OUTOFMEM/>
		<FEATURE_NOT_SUPPORTED/>
		<TOO_MANY_CHANNELS/>
		<FILE_OPEN_FAILURE/>
		<SEEK_WITHOUT_LENGTH/>
		<UNEXPECTED_EOF/>
		<SEEK_INVALID/>
		<INVALID_SETUP/>
		<INVALID_STREAM/>
		<MISSING_CAPTURE_PATTERN/>
		<INVALID_STREAM_STRUCTURE_VERSION/>
		<CONTINUED_PACKET_FLAG_INVALID/>
		<INCORRECT_STREAM_SERIAL_NUMBER/>
		<INVALID_FIRST_PAGE/>
		<BAD_PACKET_TYPE/>
		<CANT_FIND_LAST_PAGE/>
		<SEEK_FAILED/>
		<OTHER/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="kha.audio2.ogg.vorbis.data.Residue" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/vorbis/data/Residue.hx">
		<read public="1" set="method" line="24" static="1"><f a="decodeState:codebooks">
	<c path="kha.audio2.ogg.vorbis.VorbisDecodeState"/>
	<x path="haxe.ds.Vector"><c path="kha.audio2.ogg.vorbis.data.Codebook"/></x>
	<c path="kha.audio2.ogg.vorbis.data.Residue"/>
</f></read>
		<begin public="1" set="null"><x path="UInt"/></begin>
		<end public="1" set="null"><x path="UInt"/></end>
		<partSize public="1" set="null"><x path="UInt"/></partSize>
		<classifications public="1" set="null"><x path="Int"/></classifications>
		<classbook public="1" set="null"><x path="Int"/></classbook>
		<classdata public="1" set="null"><x path="haxe.ds.Vector"><x path="haxe.ds.Vector"><x path="Int"/></x></x></classdata>
		<residueBooks public="1" set="null"><x path="haxe.ds.Vector"><x path="haxe.ds.Vector"><x path="Int"/></x></x></residueBooks>
		<type public="1" set="null"><x path="Int"/></type>
		<decode public="1" set="method" line="83"><f a="decodeState:header:residueBuffers:ch:n:doNotDecode:channelBuffers">
	<c path="kha.audio2.ogg.vorbis.VorbisDecodeState"/>
	<c path="kha.audio2.ogg.vorbis.data.Header"/>
	<x path="haxe.ds.Vector"><x path="haxe.ds.Vector"><x path="Float"/></x></x>
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.ds.Vector"><x path="Bool"/></x>
	<x path="haxe.ds.Vector"><x path="haxe.ds.Vector"><x path="Float"/></x></x>
	<x path="Void"/>
</f></decode>
		<new public="1" set="method" line="21"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* ...
 * @author shohei909</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.audio2.ogg.vorbis.data.Setting" params="" file="C:\HaxeLibraries\Kha\Sources/kha/audio2/ogg/vorbis/data/Setting.hx">
		<MAX_CHANNELS public="1" get="inline" set="null" expr="16" line="9" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>16</e></m></meta>
		</MAX_CHANNELS>
		<PUSHDATA_CRC_COUNT public="1" get="inline" set="null" expr="4" line="10" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</PUSHDATA_CRC_COUNT>
		<FAST_HUFFMAN_LENGTH public="1" get="inline" set="null" expr="10" line="11" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</FAST_HUFFMAN_LENGTH>
		<FAST_HUFFMAN_TABLE_SIZE public="1" get="inline" set="null" expr="(1 &lt;&lt; FAST_HUFFMAN_LENGTH)" line="12" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e><![CDATA[(1 << FAST_HUFFMAN_LENGTH)]]></e></m></meta>
		</FAST_HUFFMAN_TABLE_SIZE>
		<FAST_HUFFMAN_TABLE_MASK public="1" get="inline" set="null" expr="FAST_HUFFMAN_TABLE_SIZE - 1" line="13" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>FAST_HUFFMAN_TABLE_SIZE - 1</e></m></meta>
		</FAST_HUFFMAN_TABLE_MASK>
		<haxe_doc>* ...
 * @author shohei909</haxe_doc>
	</class>
	<class path="kha.graphics1.Graphics" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics1/Graphics.hx" interface="1">
		<begin public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Begin the graphic operations.
	 * You MUST call this.</haxe_doc>
		</begin>
		<end public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Terminate all graphical operations and apply them.
	 * You MUST call this at the end.</haxe_doc>
		</end>
		<setPixel public="1" set="method">
			<f a="x:y:color">
				<x path="Int"/>
				<x path="Int"/>
				<x path="kha.Color"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Set the pixel color at a specific position.</haxe_doc>
		</setPixel>
		<haxe_doc><![CDATA[* Basic graphical interface.<br>
 * Represent old devices with only pixel pushing operations.]]></haxe_doc>
	</class>
	<class path="kha.graphics2.Graphics" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/Graphics.hx">
		<fontGlyphs public="1" expr="[for (i  in  32 ... 256) i]" line="141" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[for (i  in  32 ... 256) i]</e></m></meta>
		</fontGlyphs>
		<begin public="1" set="method" line="11">
			<f a="?clear:?clearColor" v="true:null">
				<x path="Bool"/>
				<x path="kha.Color"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ clearColor : null, clear : true }</e></m></meta>
		</begin>
		<end public="1" set="method" line="15"><f a=""><x path="Void"/></f></end>
		<flush public="1" set="method" line="19"><f a=""><x path="Void"/></f></flush>
		<clear public="1" set="method" line="26">
			<f a="?color" v="null">
				<x path="kha.Color"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color : null }</e></m></meta>
		</clear>
		<drawImage public="1" set="method" line="30"><f a="img:x:y">
	<c path="kha.Image"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<x path="Void"/>
</f></drawImage>
		<drawSubImage public="1" set="method" line="34"><f a="img:x:y:sx:sy:sw:sh">
	<c path="kha.Image"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<x path="Void"/>
</f></drawSubImage>
		<drawScaledImage public="1" set="method" line="38"><f a="img:dx:dy:dw:dh">
	<c path="kha.Image"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<x path="Void"/>
</f></drawScaledImage>
		<drawScaledSubImage public="1" set="method" line="42"><f a="image:sx:sy:sw:sh:dx:dy:dw:dh">
	<c path="kha.Image"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<x path="Void"/>
</f></drawScaledSubImage>
		<drawRect public="1" set="method" line="46">
			<f a="x:y:width:height:?strength" v="::::1.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ strength : 1.0 }</e></m></meta>
		</drawRect>
		<fillRect public="1" set="method" line="50"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fillRect>
		<drawString public="1" set="method" line="61">
			<f a="text:x:y">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draw a single line of text with the current `color`, `font` and `fontSize` properties.
	 *
	 * When drawing into rendertargets, you might have to use a different shader than the default one
	 *  - use the default shader when drawing into a transparent section of your rendertarget
	 *  - use a shader with `alphaBlendSource = BlendOne` when drawing into a non-transparent section of your rendertarget</haxe_doc>
		</drawString>
		<drawCharacters public="1" set="method" line="72">
			<f a="text:start:length:x:y">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draw a single line of characters with the current `color`, `font` and `fontSize` properties.
	 *
	 * When drawing into rendertargets, you might have to use a different shader than the default one
	 *  - use the default shader when drawing into a transparent section of your rendertarget
	 *  - use a shader with `alphaBlendSource = BlendOne` when drawing into a non-transparent section of your rendertarget</haxe_doc>
		</drawCharacters>
		<drawLine public="1" set="method" line="76">
			<f a="x1:y1:x2:y2:?strength" v="::::1.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ strength : 1.0 }</e></m></meta>
		</drawLine>
		<drawVideo public="1" set="method" line="80"><f a="video:x:y:width:height">
	<c path="kha.Video"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawVideo>
		<fillTriangle public="1" set="method" line="84"><f a="x1:y1:x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fillTriangle>
		<imageScaleQuality public="1" get="accessor" set="accessor"><x path="kha.graphics2.ImageScaleQuality"/></imageScaleQuality>
		<mipmapScaleQuality public="1" get="accessor" set="accessor"><x path="kha.graphics2.ImageScaleQuality"/></mipmapScaleQuality>
		<get_imageScaleQuality set="method" line="92"><f a=""><x path="kha.graphics2.ImageScaleQuality"/></f></get_imageScaleQuality>
		<set_imageScaleQuality set="method" line="96"><f a="value">
	<x path="kha.graphics2.ImageScaleQuality"/>
	<x path="kha.graphics2.ImageScaleQuality"/>
</f></set_imageScaleQuality>
		<get_mipmapScaleQuality set="method" line="100"><f a=""><x path="kha.graphics2.ImageScaleQuality"/></f></get_mipmapScaleQuality>
		<set_mipmapScaleQuality set="method" line="104"><f a="value">
	<x path="kha.graphics2.ImageScaleQuality"/>
	<x path="kha.graphics2.ImageScaleQuality"/>
</f></set_mipmapScaleQuality>
		<color public="1" get="accessor" set="accessor">
			<x path="kha.Color"/>
			<haxe_doc>The color value is used for geometric primitives, images, and text. Remember to set it back to white to draw images unaltered.</haxe_doc>
		</color>
		<get_color set="method" line="113"><f a=""><x path="kha.Color"/></f></get_color>
		<set_color set="method" line="117"><f a="color">
	<x path="kha.Color"/>
	<x path="kha.Color"/>
</f></set_color>
		<font public="1" get="accessor" set="accessor"><t path="kha.Font"/></font>
		<get_font set="method" line="123"><f a=""><t path="kha.Font"/></f></get_font>
		<set_font set="method" line="127"><f a="font">
	<t path="kha.Font"/>
	<t path="kha.Font"/>
</f></set_font>
		<fontSize public="1" get="accessor" set="accessor"><x path="Int"/></fontSize>
		<get_fontSize set="method" line="133"><f a=""><x path="Int"/></f></get_fontSize>
		<set_fontSize set="method" line="137"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_fontSize>
		<transformation public="1" get="accessor" set="accessor"><c path="kha.math.FastMatrix3"/></transformation>
		<get_transformation get="inline" set="null" line="146"><f a=""><c path="kha.math.FastMatrix3"/></f></get_transformation>
		<set_transformation get="inline" set="null" line="150"><f a="transformation">
	<c path="kha.math.FastMatrix3"/>
	<c path="kha.math.FastMatrix3"/>
</f></set_transformation>
		<pushTransformation public="1" get="inline" set="null" line="156"><f a="trans">
	<c path="kha.math.FastMatrix3"/>
	<x path="Void"/>
</f></pushTransformation>
		<popTransformation public="1" set="method" line="165"><f a=""><c path="kha.math.FastMatrix3"/></f></popTransformation>
		<scale public="1" set="method" line="171"><f a="x:y">
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<x path="Void"/>
</f></scale>
		<translation get="inline" set="null" line="175"><f a="tx:ty">
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<c path="kha.math.FastMatrix3"/>
</f></translation>
		<translate public="1" set="method" line="179"><f a="tx:ty">
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<x path="Void"/>
</f></translate>
		<pushTranslation public="1" set="method" line="183"><f a="tx:ty">
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<x path="Void"/>
</f></pushTranslation>
		<rotation get="inline" set="null" line="187"><f a="angle:centerx:centery">
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<c path="kha.math.FastMatrix3"/>
</f></rotation>
		<rotate public="1" set="method" line="191"><f a="angle:centerx:centery">
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<x path="Void"/>
</f></rotate>
		<pushRotation public="1" set="method" line="195"><f a="angle:centerx:centery">
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<x path="Void"/>
</f></pushRotation>
		<opacity public="1" get="accessor" set="accessor"><x path="Float"/></opacity>
		<pushOpacity public="1" set="method" line="201"><f a="opacity">
	<x path="Float"/>
	<x path="Void"/>
</f></pushOpacity>
		<popOpacity public="1" set="method" line="206"><f a=""><x path="Float"/></f></popOpacity>
		<get_opacity public="1" set="method" line="212"><f a=""><x path="Float"/></f></get_opacity>
		<set_opacity public="1" set="method" line="216"><f a="opacity">
	<x path="Float"/>
	<x path="Float"/>
</f></set_opacity>
		<scissor public="1" set="method" line="221"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scissor>
		<disableScissor public="1" set="method" line="225"><f a=""><x path="Void"/></f></disableScissor>
		<pipe><c path="kha.graphics4.PipelineState"/></pipe>
		<pipeline public="1" get="accessor" set="accessor"><c path="kha.graphics4.PipelineState"/></pipeline>
		<get_pipeline set="method" line="234"><f a=""><c path="kha.graphics4.PipelineState"/></f></get_pipeline>
		<set_pipeline set="method" line="238"><f a="pipeline">
	<c path="kha.graphics4.PipelineState"/>
	<c path="kha.graphics4.PipelineState"/>
</f></set_pipeline>
		<transformations><c path="Array"><c path="kha.math.FastMatrix3"/></c></transformations>
		<transformationIndex><x path="Int"/></transformationIndex>
		<opacities><c path="Array"><x path="Float"/></c></opacities>
		<myFontSize><x path="Int"/></myFontSize>
		<setTransformation set="method" line="259"><f a="transformation">
	<c path="kha.math.FastMatrix3"/>
	<x path="Void"/>
</f></setTransformation>
		<setOpacity set="method" line="263"><f a="opacity">
	<x path="Float"/>
	<x path="Void"/>
</f></setOpacity>
		<setPipeline set="method" line="267"><f a="pipeline">
	<c path="kha.graphics4.PipelineState"/>
	<x path="Void"/>
</f></setPipeline>
		<new public="1" set="method" line="249"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.graphics2.Graphics1" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/Graphics1.hx">
		<implements path="kha.graphics1.Graphics"/>
		<canvas><c path="kha.Canvas"/></canvas>
		<texture><c path="kha.Image"/></texture>
		<pixels><c path="haxe.io.Bytes"/></pixels>
		<begin public="1" set="method" line="19"><f a=""><x path="Void"/></f></begin>
		<end public="1" set="method" line="26"><f a=""><x path="Void"/></f></end>
		<setPixel public="1" set="method" line="33"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="kha.Color"/>
	<x path="Void"/>
</f></setPixel>
		<new public="1" set="method" line="15"><f a="canvas">
	<c path="kha.Canvas"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.graphics2.GraphicsExtension" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/GraphicsExtension.hx">
		<drawArc public="1" set="method" line="19" static="1">
			<f a="g2:cx:cy:radius:sAngle:eAngle:?strength:?ccw:?segments" v="::::::1:false:0">
				<c path="kha.graphics2.Graphics"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ segments : 0, ccw : false, strength : 1 }</e></m></meta>
			<haxe_doc>* Draws a arc.
	 * @param	ccw (optional) Specifies whether the drawing should be counterclockwise.
	 * @param	segments (optional) The amount of lines that should be used to draw the arc.</haxe_doc>
		</drawArc>
		<fillArc public="1" set="method" line="64" static="1">
			<f a="g2:cx:cy:radius:sAngle:eAngle:?ccw:?segments" v="::::::false:0">
				<c path="kha.graphics2.Graphics"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ segments : 0, ccw : false }</e></m></meta>
			<haxe_doc>* Draws a filled arc.
	 * @param	ccw (optional) Specifies whether the drawing should be counterclockwise.
	 * @param	segments (optional) The amount of lines that should be used to draw the arc.</haxe_doc>
		</fillArc>
		<drawCircle public="1" set="method" line="108" static="1">
			<f a="g2:cx:cy:radius:?strength:?segments" v="::::1:0">
				<c path="kha.graphics2.Graphics"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ segments : 0, strength : 1 }</e></m></meta>
			<haxe_doc>* Draws a circle.
	 * @param	segments (optional) The amount of lines that should be used to draw the circle.</haxe_doc>
		</drawCircle>
		<drawInnerLine set="method" line="140" static="1"><f a="g2:x1:y1:x2:y2:strength">
	<c path="kha.graphics2.Graphics"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawInnerLine>
		<fillCircle public="1" set="method" line="160" static="1">
			<f a="g2:cx:cy:radius:?segments" v="::::0">
				<c path="kha.graphics2.Graphics"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ segments : 0 }</e></m></meta>
			<haxe_doc>* Draws a filled circle.
	 * @param	segments (optional) The amount of lines that should be used to draw the circle.</haxe_doc>
		</fillCircle>
		<drawPolygon public="1" set="method" line="195" static="1">
			<f a="g2:x:y:vertices:?strength" v="::::1">
				<c path="kha.graphics2.Graphics"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><c path="kha.math.Vector2"/></c>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ strength : 1 }</e></m></meta>
			<haxe_doc>* Draws a convex polygon.</haxe_doc>
		</drawPolygon>
		<fillPolygon public="1" set="method" line="211" static="1">
			<f a="g2:x:y:vertices">
				<c path="kha.graphics2.Graphics"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="Array"><c path="kha.math.Vector2"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Draws a filled convex polygon.</haxe_doc>
		</fillPolygon>
		<drawCubicBezier public="1" set="method" line="235" static="1">
			<f a="g2:x:y:?segments:?strength" v=":::20:1.0">
				<c path="kha.graphics2.Graphics"/>
				<c path="Array"><x path="Float"/></c>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ strength : 1.0, segments : 20 }</e></m></meta>
			<haxe_doc>* Draws a cubic bezier using 4 pairs of points. If the x and y arrays have a length bigger then 4, the additional
	 * points will be ignored. With a length smaller of 4 a error will occur, there is no check for this.
	 * You can construct the curves visually in Inkscape with a path using default nodes.
	 * Provide x and y in the following order: startPoint, controlPoint1, controlPoint2, endPoint
	 * Reference: http://devmag.org.za/2011/04/05/bzier-curves-a-tutorial/</haxe_doc>
		</drawCubicBezier>
		<drawCubicBezierPath public="1" set="method" line="252" static="1">
			<f a="g2:x:y:?segments:?strength" v=":::20:1.0">
				<c path="kha.graphics2.Graphics"/>
				<c path="Array"><x path="Float"/></c>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ strength : 1.0, segments : 20 }</e></m></meta>
			<haxe_doc>* Draws multiple cubic beziers joined by the end point. The minimum size is 4 pairs of points (a single curve).</haxe_doc>
		</drawCubicBezierPath>
		<calculateCubicBezierPoint set="method" line="273" static="1"><f a="t:x:y">
	<x path="Float"/>
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
</f></calculateCubicBezierPoint>
		<drawAlignedString public="1" set="method" line="298" static="1"><f a="g2:text:x:y:horAlign:verAlign">
	<c path="kha.graphics2.Graphics"/>
	<c path="String"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="kha.graphics2.HorTextAlignment"/>
	<x path="kha.graphics2.VerTextAlignment"/>
	<x path="Void"/>
</f></drawAlignedString>
		<drawAlignedCharacters public="1" set="method" line="322" static="1"><f a="g2:text:start:length:x:y:horAlign:verAlign">
	<c path="kha.graphics2.Graphics"/>
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="kha.graphics2.HorTextAlignment"/>
	<x path="kha.graphics2.VerTextAlignment"/>
	<x path="Void"/>
</f></drawAlignedCharacters>
		<haxe_doc>* Static extension functions for Graphics2.
 * Usage: "using kha.graphics2.GraphicsExtension;"</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="kha.graphics2.HorTextAlignment" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/HorTextAlignment.hx">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="kha.graphics2._HorTextAlignment.HorTextAlignment_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/HorTextAlignment.hx" private="1" module="kha.graphics2.HorTextAlignment" extern="1">
	<TextLeft public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="kha.graphics2.HorTextAlignment"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextLeft>
	<TextCenter public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="kha.graphics2.HorTextAlignment"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextCenter>
	<TextRight public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="kha.graphics2.HorTextAlignment"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextRight>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="kha.graphics2._HorTextAlignment.HorTextAlignment_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/HorTextAlignment.hx" private="1" module="kha.graphics2.HorTextAlignment" extern="1">
		<TextLeft public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="kha.graphics2.HorTextAlignment"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextLeft>
		<TextCenter public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="kha.graphics2.HorTextAlignment"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextCenter>
		<TextRight public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="kha.graphics2.HorTextAlignment"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextRight>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="kha.graphics2.ImageScaleQuality" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/ImageScaleQuality.hx">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="kha.graphics2._ImageScaleQuality.ImageScaleQuality_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/ImageScaleQuality.hx" private="1" module="kha.graphics2.ImageScaleQuality" extern="1">
	<Low public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="kha.graphics2.ImageScaleQuality"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Low>
	<High public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="kha.graphics2.ImageScaleQuality"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</High>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="kha.graphics2._ImageScaleQuality.ImageScaleQuality_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/ImageScaleQuality.hx" private="1" module="kha.graphics2.ImageScaleQuality" extern="1">
		<Low public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="kha.graphics2.ImageScaleQuality"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Low>
		<High public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="kha.graphics2.ImageScaleQuality"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</High>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="kha.graphics2.VerTextAlignment" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/VerTextAlignment.hx">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="kha.graphics2._VerTextAlignment.VerTextAlignment_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/VerTextAlignment.hx" private="1" module="kha.graphics2.VerTextAlignment" extern="1">
	<TextTop public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
		<x path="kha.graphics2.VerTextAlignment"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextTop>
	<TextMiddle public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
		<x path="kha.graphics2.VerTextAlignment"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextMiddle>
	<TextBottom public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
		<x path="kha.graphics2.VerTextAlignment"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TextBottom>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="kha.graphics2._VerTextAlignment.VerTextAlignment_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/VerTextAlignment.hx" private="1" module="kha.graphics2.VerTextAlignment" extern="1">
		<TextTop public="1" get="inline" set="null" expr="cast 0" line="1" static="1">
			<x path="kha.graphics2.VerTextAlignment"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextTop>
		<TextMiddle public="1" get="inline" set="null" expr="cast 1" line="1" static="1">
			<x path="kha.graphics2.VerTextAlignment"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextMiddle>
		<TextBottom public="1" get="inline" set="null" expr="cast 2" line="1" static="1">
			<x path="kha.graphics2.VerTextAlignment"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TextBottom>
		<meta><m n=":enum"/></meta>
	</class>
	<typedef path="kha.graphics2.truetype.Stbtt_uint8" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/truetype/StbTruetype.hx" module="kha.graphics2.truetype.StbTruetype"><x path="Int"/></typedef>
	<typedef path="kha.graphics2.truetype.Stbtt_int8" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/truetype/StbTruetype.hx" module="kha.graphics2.truetype.StbTruetype"><x path="Int"/></typedef>
	<typedef path="kha.graphics2.truetype.Stbtt_uint16" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/truetype/StbTruetype.hx" module="kha.graphics2.truetype.StbTruetype"><x path="Int"/></typedef>
	<typedef path="kha.graphics2.truetype.Stbtt_int16" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/truetype/StbTruetype.hx" module="kha.graphics2.truetype.StbTruetype"><x path="Int"/></typedef>
	<typedef path="kha.graphics2.truetype.Stbtt_uint32" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/truetype/StbTruetype.hx" module="kha.graphics2.truetype.StbTruetype"><x path="Int"/></typedef>
	<typedef path="kha.graphics2.truetype.Stbtt_int32" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/truetype/StbTruetype.hx" module="kha.graphics2.truetype.StbTruetype"><x path="Int"/></typedef>
	<class path="kha.graphics2.truetype.VectorOfIntPointer" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/truetype/StbTruetype.hx" module="kha.graphics2.truetype.StbTruetype">
		<value public="1"><x path="haxe.ds.Vector"><x path="Int"/></x></value>
		<new public="1" set="method" line="17"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.graphics2.truetype.Stbtt_temp_rect" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/truetype/StbTruetype.hx" module="kha.graphics2.truetype.StbTruetype">
		<x0 public="1"><x path="Int"/></x0>
		<y0 public="1"><x path="Int"/></y0>
		<x1 public="1"><x path="Int"/></x1>
		<y1 public="1"><x path="Int"/></y1>
		<new public="1" set="method" line="22"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.graphics2.truetype.Stbtt_temp_glyph_h_metrics" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/truetype/StbTruetype.hx" module="kha.graphics2.truetype.StbTruetype">
		<advanceWidth public="1"><x path="Int"/></advanceWidth>
		<leftSideBearing public="1"><x path="Int"/></leftSideBearing>
		<new public="1" set="method" line="30"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.graphics2.truetype.Stbtt_temp_font_v_metrics" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/truetype/StbTruetype.hx" module="kha.graphics2.truetype.StbTruetype">
		<ascent public="1"><x path="Int"/></ascent>
		<descent public="1"><x path="Int"/></descent>
		<lineGap public="1"><x path="Int"/></lineGap>
		<new public="1" set="method" line="36"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.graphics2.truetype.Stbtt_temp_region" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/truetype/StbTruetype.hx" module="kha.graphics2.truetype.StbTruetype">
		<width public="1"><x path="Int"/></width>
		<height public="1"><x path="Int"/></height>
		<xoff public="1"><x path="Int"/></xoff>
		<yoff public="1"><x path="Int"/></yoff>
		<new public="1" set="method" line="43"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="kha.graphics2.truetype.Stbtt_bakedchar" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/truetype/StbTruetype.hx" module="kha.graphics2.truetype.StbTruetype">
		<x0 public="1"><x path="Int"/></x0>
		<y0 public="1"><x path="Int"/></y0>
		<x1 public="1"><x path="Int"/></x1>
		<y1 public="1"><x path="Int"/></y1>
		<xoff public="1"><x path="Float"/></xoff>
		<yoff public="1"><x path="Float"/></yoff>
		<xadvance public="1"><x path="Float"/></xadvance>
		<new public="1" set="method" line="51"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.graphics2.truetype.Stbtt_aligned_quad" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/truetype/StbTruetype.hx" module="kha.graphics2.truetype.StbTruetype">
		<x0 public="1"><x path="Float"/></x0>
		<y0 public="1"><x path="Float"/></y0>
		<s0 public="1"><x path="Float"/></s0>
		<t0 public="1"><x path="Float"/></t0>
		<x1 public="1"><x path="Float"/></x1>
		<y1 public="1"><x path="Float"/></y1>
		<s1 public="1"><x path="Float"/></s1>
		<t1 public="1"><x path="Float"/></t1>
	</class>
	<class path="kha.graphics2.truetype.Stbtt_packedchar" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/truetype/StbTruetype.hx" module="kha.graphics2.truetype.StbTruetype">
		<x0 public="1"><x path="Int"/></x0>
		<y0 public="1"><x path="Int"/></y0>
		<x1 public="1"><x path="Int"/></x1>
		<y1 public="1"><x path="Int"/></y1>
		<xoff public="1"><x path="Float"/></xoff>
		<yoff public="1"><x path="Float"/></yoff>
		<xadvance public="1"><x path="Float"/></xadvance>
		<xoff2 public="1"><x path="Float"/></xoff2>
		<yoff2 public="1"><x path="Float"/></yoff2>
	</class>
	<class path="kha.graphics2.truetype.Stbtt_pack_range" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/truetype/StbTruetype.hx" module="kha.graphics2.truetype.StbTruetype">
		<font_size public="1"><x path="Float"/></font_size>
		<first_unicode_codepoint_in_range public="1"><x path="Int"/></first_unicode_codepoint_in_range>
		<array_of_unicode_codepoints public="1"><x path="haxe.ds.Vector"><x path="Int"/></x></array_of_unicode_codepoints>
		<num_chars public="1"><x path="Int"/></num_chars>
		<chardata_for_range public="1"><c path="kha.graphics2.truetype.Stbtt_packedchar"/></chardata_for_range>
		<h_oversample public="1"><x path="Int"/></h_oversample>
		<v_oversample public="1"><x path="Int"/></v_oversample>
	</class>
	<class path="kha.graphics2.truetype.Stbtt_pack_context" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/truetype/StbTruetype.hx" module="kha.graphics2.truetype.StbTruetype">
		<width public="1"><x path="Int"/></width>
		<height public="1"><x path="Int"/></height>
		<stride_in_bytes public="1"><x path="Int"/></stride_in_bytes>
		<padding public="1"><x path="Int"/></padding>
		<h_oversample public="1"><x path="Int"/></h_oversample>
		<v_oversample public="1"><x path="Int"/></v_oversample>
		<pixels public="1"><t path="kha.Blob"/></pixels>
	</class>
	<class path="kha.graphics2.truetype.Stbtt_fontinfo" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/truetype/StbTruetype.hx" module="kha.graphics2.truetype.StbTruetype">
		<data public="1"><t path="kha.Blob"/></data>
		<fontstart public="1"><x path="Int"/></fontstart>
		<numGlyphs public="1"><x path="Int"/></numGlyphs>
		<loca public="1"><x path="Int"/></loca>
		<head public="1"><x path="Int"/></head>
		<glyf public="1"><x path="Int"/></glyf>
		<hhea public="1"><x path="Int"/></hhea>
		<hmtx public="1"><x path="Int"/></hmtx>
		<kern public="1"><x path="Int"/></kern>
		<index_map public="1"><x path="Int"/></index_map>
		<indexToLocFormat public="1"><x path="Int"/></indexToLocFormat>
		<new public="1" set="method" line="118"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.graphics2.truetype.Stbtt_vertex" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/truetype/StbTruetype.hx" module="kha.graphics2.truetype.StbTruetype">
		<x public="1"><t path="kha.graphics2.truetype.Stbtt_int16"/></x>
		<y public="1"><t path="kha.graphics2.truetype.Stbtt_int16"/></y>
		<cx public="1"><t path="kha.graphics2.truetype.Stbtt_int16"/></cx>
		<cy public="1"><t path="kha.graphics2.truetype.Stbtt_int16"/></cy>
		<type public="1"><x path="Int"/></type>
		<padding public="1"><x path="Int"/></padding>
		<new public="1" set="method" line="137"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.graphics2.truetype.Stbtt__bitmap" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/truetype/StbTruetype.hx" module="kha.graphics2.truetype.StbTruetype">
		<w public="1"><x path="Int"/></w>
		<h public="1"><x path="Int"/></h>
		<stride public="1"><x path="Int"/></stride>
		<pixels public="1"><t path="kha.Blob"/></pixels>
		<pixels_offset public="1"><x path="Int"/></pixels_offset>
		<new public="1" set="method" line="147"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.graphics2.truetype.Stbtt__edge" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/truetype/StbTruetype.hx" module="kha.graphics2.truetype.StbTruetype">
		<x0 public="1"><x path="Float"/></x0>
		<y0 public="1"><x path="Float"/></y0>
		<x1 public="1"><x path="Float"/></x1>
		<y1 public="1"><x path="Float"/></y1>
		<invert public="1"><x path="Bool"/></invert>
		<new public="1" set="method" line="156"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.graphics2.truetype.Stbtt__active_edge" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/truetype/StbTruetype.hx" module="kha.graphics2.truetype.StbTruetype">
		<next public="1"><c path="kha.graphics2.truetype.Stbtt__active_edge"/></next>
		<fx public="1"><x path="Float"/></fx>
		<fdx public="1"><x path="Float"/></fdx>
		<fdy public="1"><x path="Float"/></fdy>
		<direction public="1"><x path="Float"/></direction>
		<sy public="1"><x path="Float"/></sy>
		<ey public="1"><x path="Float"/></ey>
		<new public="1" set="method" line="165"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.graphics2.truetype.Stbtt__point" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/truetype/StbTruetype.hx" module="kha.graphics2.truetype.StbTruetype">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<new public="1" set="method" line="176"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.graphics2.truetype.StbTruetype" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics2/truetype/StbTruetype.hx">
		<STBTT_assert get="inline" set="null" line="182" static="1"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></STBTT_assert>
		<STBTT_POINT_SIZE get="inline" set="null" line="183" static="1"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></STBTT_POINT_SIZE>
		<STBTT_vmove public="1" get="inline" set="null" expr="1" line="185" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</STBTT_vmove>
		<STBTT_vline public="1" get="inline" set="null" expr="2" line="186" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</STBTT_vline>
		<STBTT_vcurve public="1" get="inline" set="null" expr="3" line="187" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</STBTT_vcurve>
		<STBTT_MACSTYLE_DONTCARE public="1" get="inline" set="null" expr="0" line="189" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</STBTT_MACSTYLE_DONTCARE>
		<STBTT_MACSTYLE_BOLD public="1" get="inline" set="null" expr="1" line="190" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</STBTT_MACSTYLE_BOLD>
		<STBTT_MACSTYLE_ITALIC public="1" get="inline" set="null" expr="2" line="191" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</STBTT_MACSTYLE_ITALIC>
		<STBTT_MACSTYLE_UNDERSCORE public="1" get="inline" set="null" expr="4" line="192" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</STBTT_MACSTYLE_UNDERSCORE>
		<STBTT_MACSTYLE_NONE public="1" get="inline" set="null" expr="8" line="193" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</STBTT_MACSTYLE_NONE>
		<STBTT_PLATFORM_ID_UNICODE public="1" get="inline" set="null" expr="0" line="196" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</STBTT_PLATFORM_ID_UNICODE>
		<STBTT_PLATFORM_ID_MAC public="1" get="inline" set="null" expr="1" line="197" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</STBTT_PLATFORM_ID_MAC>
		<STBTT_PLATFORM_ID_ISO public="1" get="inline" set="null" expr="2" line="198" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</STBTT_PLATFORM_ID_ISO>
		<STBTT_PLATFORM_ID_MICROSOFT public="1" get="inline" set="null" expr="3" line="199" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</STBTT_PLATFORM_ID_MICROSOFT>
		<STBTT_UNICODE_EID_UNICODE_1_0 public="1" get="inline" set="null" expr="0" line="202" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</STBTT_UNICODE_EID_UNICODE_1_0>
		<STBTT_UNICODE_EID_UNICODE_1_1 public="1" get="inline" set="null" expr="1" line="203" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</STBTT_UNICODE_EID_UNICODE_1_1>
		<STBTT_UNICODE_EID_ISO_10646 public="1" get="inline" set="null" expr="2" line="204" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</STBTT_UNICODE_EID_ISO_10646>
		<STBTT_UNICODE_EID_UNICODE_2_0_BMP public="1" get="inline" set="null" expr="3" line="205" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</STBTT_UNICODE_EID_UNICODE_2_0_BMP>
		<STBTT_UNICODE_EID_UNICODE_2_0_FULL public="1" get="inline" set="null" expr="4" line="206" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</STBTT_UNICODE_EID_UNICODE_2_0_FULL>
		<STBTT_MS_EID_SYMBOL public="1" get="inline" set="null" expr="0" line="209" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</STBTT_MS_EID_SYMBOL>
		<STBTT_MS_EID_UNICODE_BMP public="1" get="inline" set="null" expr="1" line="210" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</STBTT_MS_EID_UNICODE_BMP>
		<STBTT_MS_EID_SHIFTJIS public="1" get="inline" set="null" expr="2" line="211" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</STBTT_MS_EID_SHIFTJIS>
		<STBTT_MS_EID_UNICODE_FULL public="1" get="inline" set="null" expr="10" line="212" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</STBTT_MS_EID_UNICODE_FULL>
		<STBTT_MAC_EID_ROMAN public="1" get="inline" set="null" expr="0" line="215" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</STBTT_MAC_EID_ROMAN>
		<STBTT_MAC_EID_ARABIC public="1" get="inline" set="null" expr="4" line="216" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</STBTT_MAC_EID_ARABIC>
		<STBTT_MAC_EID_JAPANESE public="1" get="inline" set="null" expr="1" line="217" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</STBTT_MAC_EID_JAPANESE>
		<STBTT_MAC_EID_HEBREW public="1" get="inline" set="null" expr="5" line="218" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</STBTT_MAC_EID_HEBREW>
		<STBTT_MAC_EID_CHINESE_TRAD public="1" get="inline" set="null" expr="2" line="219" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</STBTT_MAC_EID_CHINESE_TRAD>
		<STBTT_MAC_EID_GREEK public="1" get="inline" set="null" expr="6" line="220" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</STBTT_MAC_EID_GREEK>
		<STBTT_MAC_EID_KOREAN public="1" get="inline" set="null" expr="3" line="221" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</STBTT_MAC_EID_KOREAN>
		<STBTT_MAC_EID_RUSSIAN public="1" get="inline" set="null" expr="7" line="222" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>7</e></m></meta>
		</STBTT_MAC_EID_RUSSIAN>
		<STBTT_MS_LANG_ENGLISH public="1" get="inline" set="null" expr="0x0409" line="226" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0409</e></m></meta>
		</STBTT_MS_LANG_ENGLISH>
		<STBTT_MS_LANG_ITALIAN public="1" get="inline" set="null" expr="0x0410" line="227" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0410</e></m></meta>
		</STBTT_MS_LANG_ITALIAN>
		<STBTT_MS_LANG_CHINESE public="1" get="inline" set="null" expr="0x0804" line="228" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0804</e></m></meta>
		</STBTT_MS_LANG_CHINESE>
		<STBTT_MS_LANG_JAPANESE public="1" get="inline" set="null" expr="0x0411" line="229" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0411</e></m></meta>
		</STBTT_MS_LANG_JAPANESE>
		<STBTT_MS_LANG_DUTCH public="1" get="inline" set="null" expr="0x0413" line="230" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0413</e></m></meta>
		</STBTT_MS_LANG_DUTCH>
		<STBTT_MS_LANG_KOREAN public="1" get="inline" set="null" expr="0x0412" line="231" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0412</e></m></meta>
		</STBTT_MS_LANG_KOREAN>
		<STBTT_MS_LANG_FRENCH public="1" get="inline" set="null" expr="0x040c" line="232" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x040c</e></m></meta>
		</STBTT_MS_LANG_FRENCH>
		<STBTT_MS_LANG_RUSSIAN public="1" get="inline" set="null" expr="0x0419" line="233" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0419</e></m></meta>
		</STBTT_MS_LANG_RUSSIAN>
		<STBTT_MS_LANG_GERMAN public="1" get="inline" set="null" expr="0x0407" line="234" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0407</e></m></meta>
		</STBTT_MS_LANG_GERMAN>
		<STBTT_MS_LANG_SPANISH public="1" get="inline" set="null" expr="0x0409" line="235" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0409</e></m></meta>
		</STBTT_MS_LANG_SPANISH>
		<STBTT_MS_LANG_HEBREW public="1" get="inline" set="null" expr="0x040d" line="236" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x040d</e></m></meta>
		</STBTT_MS_LANG_HEBREW>
		<STBTT_MS_LANG_SWEDISH public="1" get="inline" set="null" expr="0x041D" line="237" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x041D</e></m></meta>
		</STBTT_MS_LANG_SWEDISH>
		<STBTT_MAC_LANG_ENGLISH public="1" get="inline" set="null" expr="0" line="240" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</STBTT_MAC_LANG_ENGLISH>
		<STBTT_MAC_LANG_JAPANESE public="1" get="inline" set="null" expr="11" line="241" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>11</e></m></meta>
		</STBTT_MAC_LANG_JAPANESE>
		<STBTT_MAC_LANG_ARABIC public="1" get="inline" set="null" expr="12" line="242" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</STBTT_MAC_LANG_ARABIC>
		<STBTT_MAC_LANG_KOREAN public="1" get="inline" set="null" expr="23" line="243" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>23</e></m></meta>
		</STBTT_MAC_LANG_KOREAN>
		<STBTT_MAC_LANG_DUTCH public="1" get="inline" set="null" expr="4" line="244" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</STBTT_MAC_LANG_DUTCH>
		<STBTT_MAC_LANG_RUSSIAN public="1" get="inline" set="null" expr="32" line="245" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>32</e></m></meta>
		</STBTT_MAC_LANG_RUSSIAN>
		<STBTT_MAC_LANG_FRENCH public="1" get="inline" set="null" expr="1" line="246" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</STBTT_MAC_LANG_FRENCH>
		<STBTT_MAC_LANG_SPANISH public="1" get="inline" set="null" expr="6" line="247" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</STBTT_MAC_LANG_SPANISH>
		<STBTT_MAC_LANG_GERMAN public="1" get="inline" set="null" expr="2" line="248" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</STBTT_MAC_LANG_GERMAN>
		<STBTT_MAC_LANG_SWEDISH public="1" get="inline" set="null" expr="5" line="249" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</STBTT_MAC_LANG_SWEDISH>
		<STBTT_MAC_LANG_HEBREW public="1" get="inline" set="null" expr="10" line="250" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>10</e></m></meta>
		</STBTT_MAC_LANG_HEBREW>
		<STBTT_MAC_LANG_CHINESE_SIMPLIFIED public="1" get="inline" set="null" expr="33" line="251" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>33</e></m></meta>
		</STBTT_MAC_LANG_CHINESE_SIMPLIFIED>
		<STBTT_MAC_LANG_ITALIAN public="1" get="inline" set="null" expr="3" line="252" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</STBTT_MAC_LANG_ITALIAN>
		<STBTT_MAC_LANG_CHINESE_TRAD public="1" get="inline" set="null" expr="19" line="253" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>19</e></m></meta>
		</STBTT_MAC_LANG_CHINESE_TRAD>
		<STBTT_MAX_OVERSAMPLE public="1" get="inline" set="null" expr="8" line="255" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</STBTT_MAX_OVERSAMPLE>
		<STBTT_RASTERIZER_VERSION public="1" get="inline" set="null" expr="2" line="257" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</STBTT_RASTERIZER_VERSION>
		<ttBYTE get="inline" set="null" line="259" static="1">
			<f a="p:?pos" v=":0">
				<t path="kha.Blob"/>
				<x path="Int"/>
				<t path="kha.graphics2.truetype.Stbtt_uint8"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</ttBYTE>
		<ttCHAR get="inline" set="null" line="263" static="1">
			<f a="p:?pos" v=":0">
				<t path="kha.Blob"/>
				<x path="Int"/>
				<t path="kha.graphics2.truetype.Stbtt_int8"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</ttCHAR>
		<ttUSHORT get="inline" set="null" line="270" static="1">
			<f a="p:?pos" v=":0">
				<t path="kha.Blob"/>
				<x path="Int"/>
				<t path="kha.graphics2.truetype.Stbtt_uint16"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</ttUSHORT>
		<ttSHORT get="inline" set="null" line="276" static="1">
			<f a="p:?pos" v=":0">
				<t path="kha.Blob"/>
				<x path="Int"/>
				<t path="kha.graphics2.truetype.Stbtt_int16"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</ttSHORT>
		<ttULONG get="inline" set="null" line="285" static="1">
			<f a="p:?pos" v=":0">
				<t path="kha.Blob"/>
				<x path="Int"/>
				<t path="kha.graphics2.truetype.Stbtt_uint32"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</ttULONG>
		<ttLONG get="inline" set="null" line="287" static="1">
			<f a="p:?pos" v=":0">
				<t path="kha.Blob"/>
				<x path="Int"/>
				<t path="kha.graphics2.truetype.Stbtt_int32"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</ttLONG>
		<to_stbtt_uint16 get="inline" set="null" line="295" static="1"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></to_stbtt_uint16>
		<ttFixed get="inline" set="null" line="299" static="1">
			<f a="p:?pos" v=":0">
				<t path="kha.Blob"/>
				<x path="Int"/>
				<t path="kha.graphics2.truetype.Stbtt_int32"/>
			</f>
			<meta><m n=":value"><e>{ pos : 0 }</e></m></meta>
		</ttFixed>
		<stbtt_tag4 get="inline" set="null" line="301" static="1"><f a="p:pos:c0:c1:c2:c3">
	<t path="kha.Blob"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></stbtt_tag4>
		<stbtt_tag get="inline" set="null" line="302" static="1"><f a="p:pos:str">
	<t path="kha.Blob"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Bool"/>
</f></stbtt_tag>
		<stbtt__isfont set="method" line="304" static="1"><f a="font">
	<t path="kha.Blob"/>
	<x path="Bool"/>
</f></stbtt__isfont>
		<stbtt__find_table set="method" line="314" static="1"><f a="data:fontstart:tag">
	<t path="kha.Blob"/>
	<t path="kha.graphics2.truetype.Stbtt_uint32"/>
	<c path="String"/>
	<t path="kha.graphics2.truetype.Stbtt_uint32"/>
</f></stbtt__find_table>
		<stbtt_GetFontOffsetForIndex public="1" set="method" line="325" static="1"><f a="font_collection:index">
	<t path="kha.Blob"/>
	<x path="Int"/>
	<x path="Int"/>
</f></stbtt_GetFontOffsetForIndex>
		<stbtt_InitFont public="1" set="method" line="343" static="1"><f a="info:data:fontstart">
	<c path="kha.graphics2.truetype.Stbtt_fontinfo"/>
	<t path="kha.Blob"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></stbtt_InitFont>
		<stbtt_FindGlyphIndex public="1" set="method" line="395" static="1"><f a="info:unicode_codepoint">
	<c path="kha.graphics2.truetype.Stbtt_fontinfo"/>
	<x path="Int"/>
	<x path="Int"/>
</f></stbtt_FindGlyphIndex>
		<stbtt_GetCodepointShape public="1" set="method" line="487" static="1"><f a="info:unicode_codepoint">
	<c path="kha.graphics2.truetype.Stbtt_fontinfo"/>
	<x path="Int"/>
	<x path="haxe.ds.Vector"><c path="kha.graphics2.truetype.Stbtt_vertex"/></x>
</f></stbtt_GetCodepointShape>
		<stbtt_setvertex set="method" line="491" static="1"><f a="v:type:x:y:cx:cy">
	<c path="kha.graphics2.truetype.Stbtt_vertex"/>
	<t path="kha.graphics2.truetype.Stbtt_uint8"/>
	<t path="kha.graphics2.truetype.Stbtt_int32"/>
	<t path="kha.graphics2.truetype.Stbtt_int32"/>
	<t path="kha.graphics2.truetype.Stbtt_int32"/>
	<t path="kha.graphics2.truetype.Stbtt_int32"/>
	<x path="Void"/>
</f></stbtt_setvertex>
		<stbtt__GetGlyfOffset set="method" line="499" static="1"><f a="info:glyph_index">
	<c path="kha.graphics2.truetype.Stbtt_fontinfo"/>
	<x path="Int"/>
	<x path="Int"/>
</f></stbtt__GetGlyfOffset>
		<stbtt_GetGlyphBox public="1" set="method" line="516" static="1"><f a="info:glyph_index:rect">
	<c path="kha.graphics2.truetype.Stbtt_fontinfo"/>
	<x path="Int"/>
	<c path="kha.graphics2.truetype.Stbtt_temp_rect"/>
	<x path="Bool"/>
</f></stbtt_GetGlyphBox>
		<stbtt_GetCodepointBox public="1" set="method" line="527" static="1"><f a="info:codepoint:rect">
	<c path="kha.graphics2.truetype.Stbtt_fontinfo"/>
	<x path="Int"/>
	<c path="kha.graphics2.truetype.Stbtt_temp_rect"/>
	<x path="Bool"/>
</f></stbtt_GetCodepointBox>
		<stbtt_IsGlyphEmpty public="1" set="method" line="531" static="1"><f a="info:glyph_index">
	<c path="kha.graphics2.truetype.Stbtt_fontinfo"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></stbtt_IsGlyphEmpty>
		<stbtt__close_shape set="method" line="539" static="1"><f a="vertices:num_vertices:was_off:start_off:sx:sy:scx:scy:cx:cy">
	<x path="haxe.ds.Vector"><c path="kha.graphics2.truetype.Stbtt_vertex"/></x>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<t path="kha.graphics2.truetype.Stbtt_int32"/>
	<t path="kha.graphics2.truetype.Stbtt_int32"/>
	<t path="kha.graphics2.truetype.Stbtt_int32"/>
	<t path="kha.graphics2.truetype.Stbtt_int32"/>
	<t path="kha.graphics2.truetype.Stbtt_int32"/>
	<t path="kha.graphics2.truetype.Stbtt_int32"/>
	<x path="Int"/>
</f></stbtt__close_shape>
		<copyVertices set="method" line="554" static="1"><f a="from:to:offset:count">
	<x path="haxe.ds.Vector"><c path="kha.graphics2.truetype.Stbtt_vertex"/></x>
	<x path="haxe.ds.Vector"><c path="kha.graphics2.truetype.Stbtt_vertex"/></x>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copyVertices>
		<stbtt_GetGlyphShape public="1" set="method" line="560" static="1"><f a="info:glyph_index">
	<c path="kha.graphics2.truetype.Stbtt_fontinfo"/>
	<x path="Int"/>
	<x path="haxe.ds.Vector"><c path="kha.graphics2.truetype.Stbtt_vertex"/></x>
</f></stbtt_GetGlyphShape>
		<stbtt_GetGlyphHMetrics public="1" set="method" line="818" static="1"><f a="info:glyph_index">
	<c path="kha.graphics2.truetype.Stbtt_fontinfo"/>
	<x path="Int"/>
	<c path="kha.graphics2.truetype.Stbtt_temp_glyph_h_metrics"/>
</f></stbtt_GetGlyphHMetrics>
		<stbtt_GetGlyphKernAdvance public="1" set="method" line="831" static="1"><f a="info:glyph1:glyph2">
	<c path="kha.graphics2.truetype.Stbtt_fontinfo"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></stbtt_GetGlyphKernAdvance>
		<stbtt_GetCodepointKernAdvance public="1" set="method" line="861" static="1"><f a="info:ch1:ch2">
	<c path="kha.graphics2.truetype.Stbtt_fontinfo"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></stbtt_GetCodepointKernAdvance>
		<stbtt_GetCodepointHMetrics public="1" set="method" line="867" static="1"><f a="info:codepoint">
	<c path="kha.graphics2.truetype.Stbtt_fontinfo"/>
	<x path="Int"/>
	<c path="kha.graphics2.truetype.Stbtt_temp_glyph_h_metrics"/>
</f></stbtt_GetCodepointHMetrics>
		<stbtt_GetFontVMetrics public="1" set="method" line="871" static="1"><f a="info">
	<c path="kha.graphics2.truetype.Stbtt_fontinfo"/>
	<c path="kha.graphics2.truetype.Stbtt_temp_font_v_metrics"/>
</f></stbtt_GetFontVMetrics>
		<stbtt_GetFontBoundingBox public="1" set="method" line="879" static="1"><f a="info">
	<c path="kha.graphics2.truetype.Stbtt_fontinfo"/>
	<c path="kha.graphics2.truetype.Stbtt_temp_rect"/>
</f></stbtt_GetFontBoundingBox>
		<stbtt_ScaleForPixelHeight public="1" set="method" line="888" static="1"><f a="info:height">
	<c path="kha.graphics2.truetype.Stbtt_fontinfo"/>
	<x path="Float"/>
	<x path="Float"/>
</f></stbtt_ScaleForPixelHeight>
		<stbtt_ScaleForMappingEmToPixels public="1" set="method" line="893" static="1"><f a="info:pixels">
	<c path="kha.graphics2.truetype.Stbtt_fontinfo"/>
	<x path="Float"/>
	<x path="Float"/>
</f></stbtt_ScaleForMappingEmToPixels>
		<stbtt_GetGlyphBitmapBoxSubpixel public="1" set="method" line="903" static="1"><f a="font:glyph:scale_x:scale_y:shift_x:shift_y">
	<c path="kha.graphics2.truetype.Stbtt_fontinfo"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="kha.graphics2.truetype.Stbtt_temp_rect"/>
</f></stbtt_GetGlyphBitmapBoxSubpixel>
		<stbtt_GetGlyphBitmapBox public="1" set="method" line="925" static="1"><f a="font:glyph:scale_x:scale_y">
	<c path="kha.graphics2.truetype.Stbtt_fontinfo"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="kha.graphics2.truetype.Stbtt_temp_rect"/>
</f></stbtt_GetGlyphBitmapBox>
		<stbtt_GetCodepointBitmapBoxSubpixel public="1" set="method" line="929" static="1"><f a="font:codepoint:scale_x:scale_y:shift_x:shift_y">
	<c path="kha.graphics2.truetype.Stbtt_fontinfo"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="kha.graphics2.truetype.Stbtt_temp_rect"/>
</f></stbtt_GetCodepointBitmapBoxSubpixel>
		<stbtt_GetCodepointBitmapBox public="1" set="method" line="933" static="1"><f a="font:codepoint:scale_x:scale_y">
	<c path="kha.graphics2.truetype.Stbtt_fontinfo"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="kha.graphics2.truetype.Stbtt_temp_rect"/>
</f></stbtt_GetCodepointBitmapBox>
		<stbtt__new_active set="method" line="941" static="1"><f a="e:eIndex:off_x:start_point">
	<x path="haxe.ds.Vector"><c path="kha.graphics2.truetype.Stbtt__edge"/></x>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<c path="kha.graphics2.truetype.Stbtt__active_edge"/>
</f></stbtt__new_active>
		<stbtt__handle_clipped_edge set="method" line="959" static="1"><f a="scanline:scanlineIndex:x:e:x0:y0:x1:y1">
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="Int"/>
	<x path="Int"/>
	<c path="kha.graphics2.truetype.Stbtt__active_edge"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></stbtt__handle_clipped_edge>
		<stbtt__fill_active_edges_new set="method" line="995" static="1"><f a="scanline:scanline_fill:scanline_fillIndex:len:e:y_top">
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="haxe.ds.Vector"><x path="Float"/></x>
	<x path="Int"/>
	<x path="Int"/>
	<c path="kha.graphics2.truetype.Stbtt__active_edge"/>
	<x path="Float"/>
	<x path="Void"/>
</f></stbtt__fill_active_edges_new>
		<stbtt__rasterize_sorted_edges set="method" line="1156" static="1"><f a="result:e:n:vsubsample:off_x:off_y">
	<c path="kha.graphics2.truetype.Stbtt__bitmap"/>
	<x path="haxe.ds.Vector"><c path="kha.graphics2.truetype.Stbtt__edge"/></x>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stbtt__rasterize_sorted_edges>
		<STBTT__COMPARE set="method" line="1252" static="1"><f a="a:b">
	<c path="kha.graphics2.truetype.Stbtt__edge"/>
	<c path="kha.graphics2.truetype.Stbtt__edge"/>
	<x path="Bool"/>
</f></STBTT__COMPARE>
		<stbtt__sort_edges_ins_sort set="method" line="1254" static="1"><f a="p:n">
	<x path="haxe.ds.Vector"><c path="kha.graphics2.truetype.Stbtt__edge"/></x>
	<x path="Int"/>
	<x path="Void"/>
</f></stbtt__sort_edges_ins_sort>
		<stbtt__sort_edges_quicksort set="method" line="1272" static="1"><f a="p:pIndex:n">
	<x path="haxe.ds.Vector"><c path="kha.graphics2.truetype.Stbtt__edge"/></x>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stbtt__sort_edges_quicksort>
		<stbtt__sort_edges set="method" line="1336" static="1"><f a="p:n">
	<x path="haxe.ds.Vector"><c path="kha.graphics2.truetype.Stbtt__edge"/></x>
	<x path="Int"/>
	<x path="Void"/>
</f></stbtt__sort_edges>
		<stbtt__rasterize set="method" line="1341" static="1"><f a="result:pts:wcount:windings:scale_x:scale_y:shift_x:shift_y:off_x:off_y:invert">
	<c path="kha.graphics2.truetype.Stbtt__bitmap"/>
	<x path="haxe.ds.Vector"><c path="kha.graphics2.truetype.Stbtt__point"/></x>
	<x path="haxe.ds.Vector"><x path="Int"/></x>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></stbtt__rasterize>
		<stbtt__add_point set="method" line="1400" static="1"><f a="points:n:x:y">
	<x path="haxe.ds.Vector"><c path="kha.graphics2.truetype.Stbtt__point"/></x>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></stbtt__add_point>
		<stbtt__tesselate_curve set="method" line="1407" static="1"><f a="points:num_points:x0:y0:x1:y1:x2:y2:objspace_flatness_squared:n">
	<x path="haxe.ds.Vector"><c path="kha.graphics2.truetype.Stbtt__point"/></x>
	<a><value><x path="Int"/></value></a>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
</f></stbtt__tesselate_curve>
		<stbtt_FlattenCurves set="method" line="1427" static="1"><f a="vertices:num_verts:objspace_flatness:contour_lengths:num_contours">
	<x path="haxe.ds.Vector"><c path="kha.graphics2.truetype.Stbtt_vertex"/></x>
	<x path="Int"/>
	<x path="Float"/>
	<c path="kha.graphics2.truetype.VectorOfIntPointer"/>
	<a><value><x path="Int"/></value></a>
	<x path="haxe.ds.Vector"><c path="kha.graphics2.truetype.Stbtt__point"/></x>
</f></stbtt_FlattenCurves>
		<stbtt_Rasterize public="1" set="method" line="1497" static="1"><f a="result:flatness_in_pixels:vertices:num_verts:scale_x:scale_y:shift_x:shift_y:x_off:y_off:invert">
	<c path="kha.graphics2.truetype.Stbtt__bitmap"/>
	<x path="Float"/>
	<x path="haxe.ds.Vector"><c path="kha.graphics2.truetype.Stbtt_vertex"/></x>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></stbtt_Rasterize>
		<stbtt_GetGlyphBitmapSubpixel public="1" set="method" line="1511" static="1"><f a="info:scale_x:scale_y:shift_x:shift_y:glyph:region">
	<c path="kha.graphics2.truetype.Stbtt_fontinfo"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<c path="kha.graphics2.truetype.Stbtt_temp_region"/>
	<t path="kha.Blob"/>
</f></stbtt_GetGlyphBitmapSubpixel>
		<stbtt_GetGlyphBitmap public="1" set="method" line="1550" static="1"><f a="info:scale_x:scale_y:glyph:region">
	<c path="kha.graphics2.truetype.Stbtt_fontinfo"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<c path="kha.graphics2.truetype.Stbtt_temp_region"/>
	<t path="kha.Blob"/>
</f></stbtt_GetGlyphBitmap>
		<stbtt_MakeGlyphBitmapSubpixel public="1" set="method" line="1554" static="1"><f a="info:output:output_offset:out_w:out_h:out_stride:scale_x:scale_y:shift_x:shift_y:glyph">
	<c path="kha.graphics2.truetype.Stbtt_fontinfo"/>
	<t path="kha.Blob"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stbtt_MakeGlyphBitmapSubpixel>
		<stbtt_MakeGlyphBitmap public="1" set="method" line="1573" static="1"><f a="info:output:output_offset:out_w:out_h:out_stride:scale_x:scale_y:glyph">
	<c path="kha.graphics2.truetype.Stbtt_fontinfo"/>
	<t path="kha.Blob"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stbtt_MakeGlyphBitmap>
		<stbtt_GetCodepointBitmapSubpixel public="1" set="method" line="1577" static="1"><f a="info:scale_x:scale_y:shift_x:shift_y:codepoint:region">
	<c path="kha.graphics2.truetype.Stbtt_fontinfo"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<c path="kha.graphics2.truetype.Stbtt_temp_region"/>
	<t path="kha.Blob"/>
</f></stbtt_GetCodepointBitmapSubpixel>
		<stbtt_MakeCodepointBitmapSubpixel public="1" set="method" line="1581" static="1"><f a="info:output:output_offset:out_w:out_h:out_stride:scale_x:scale_y:shift_x:shift_y:codepoint">
	<c path="kha.graphics2.truetype.Stbtt_fontinfo"/>
	<t path="kha.Blob"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stbtt_MakeCodepointBitmapSubpixel>
		<stbtt_GetCodepointBitmap public="1" set="method" line="1585" static="1"><f a="info:scale_x:scale_y:codepoint:region">
	<c path="kha.graphics2.truetype.Stbtt_fontinfo"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<c path="kha.graphics2.truetype.Stbtt_temp_region"/>
	<t path="kha.Blob"/>
</f></stbtt_GetCodepointBitmap>
		<stbtt_MakeCodepointBitmap public="1" set="method" line="1589" static="1"><f a="info:output:output_offset:out_w:out_h:out_stride:scale_x:scale_y:codepoint">
	<c path="kha.graphics2.truetype.Stbtt_fontinfo"/>
	<t path="kha.Blob"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></stbtt_MakeCodepointBitmap>
		<stbtt_BakeFontBitmap public="1" set="method" line="1599" static="1"><f a="data:offset:pixel_height:pixels:pw:ph:chars:chardata">
	<t path="kha.Blob"/>
	<x path="Int"/>
	<x path="Float"/>
	<t path="kha.Blob"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<x path="haxe.ds.Vector"><c path="kha.graphics2.truetype.Stbtt_bakedchar"/></x>
	<x path="Int"/>
</f></stbtt_BakeFontBitmap>
		<stbtt_GetBakedQuad public="1" set="method" line="1660" static="1"><f a="chardata:pw:ph:char_index:xpos:ypos:q:opengl_fillrule">
	<x path="haxe.ds.Vector"><c path="kha.graphics2.truetype.Stbtt_bakedchar"/></x>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<a><value><x path="Float"/></value></a>
	<a><value><x path="Float"/></value></a>
	<c path="kha.graphics2.truetype.Stbtt_aligned_quad"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></stbtt_GetBakedQuad>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="kha.graphics4.BlendingFactor" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/BlendingFactor.hx">
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="kha.graphics4._BlendingFactor.BlendingFactor_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/BlendingFactor.hx" private="1" module="kha.graphics4.BlendingFactor" extern="1">
	<Undefined public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
		<x path="kha.graphics4.BlendingFactor"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Undefined>
	<BlendOne public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
		<x path="kha.graphics4.BlendingFactor"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BlendOne>
	<BlendZero public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
		<x path="kha.graphics4.BlendingFactor"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BlendZero>
	<SourceAlpha public="1" get="inline" set="null" expr="cast 3" line="7" static="1">
		<x path="kha.graphics4.BlendingFactor"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SourceAlpha>
	<DestinationAlpha public="1" get="inline" set="null" expr="cast 4" line="8" static="1">
		<x path="kha.graphics4.BlendingFactor"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DestinationAlpha>
	<InverseSourceAlpha public="1" get="inline" set="null" expr="cast 5" line="9" static="1">
		<x path="kha.graphics4.BlendingFactor"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</InverseSourceAlpha>
	<InverseDestinationAlpha public="1" get="inline" set="null" expr="cast 6" line="10" static="1">
		<x path="kha.graphics4.BlendingFactor"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</InverseDestinationAlpha>
	<SourceColor public="1" get="inline" set="null" expr="cast 7" line="11" static="1">
		<x path="kha.graphics4.BlendingFactor"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SourceColor>
	<DestinationColor public="1" get="inline" set="null" expr="cast 8" line="12" static="1">
		<x path="kha.graphics4.BlendingFactor"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DestinationColor>
	<InverseSourceColor public="1" get="inline" set="null" expr="cast 9" line="13" static="1">
		<x path="kha.graphics4.BlendingFactor"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</InverseSourceColor>
	<InverseDestinationColor public="1" get="inline" set="null" expr="cast 10" line="14" static="1">
		<x path="kha.graphics4.BlendingFactor"/>
		<meta>
			<m n=":value"><e>cast 10</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</InverseDestinationColor>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="kha.graphics4._BlendingFactor.BlendingFactor_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/BlendingFactor.hx" private="1" module="kha.graphics4.BlendingFactor" extern="1">
		<Undefined public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
			<x path="kha.graphics4.BlendingFactor"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Undefined>
		<BlendOne public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
			<x path="kha.graphics4.BlendingFactor"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BlendOne>
		<BlendZero public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
			<x path="kha.graphics4.BlendingFactor"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BlendZero>
		<SourceAlpha public="1" get="inline" set="null" expr="cast 3" line="7" static="1">
			<x path="kha.graphics4.BlendingFactor"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SourceAlpha>
		<DestinationAlpha public="1" get="inline" set="null" expr="cast 4" line="8" static="1">
			<x path="kha.graphics4.BlendingFactor"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DestinationAlpha>
		<InverseSourceAlpha public="1" get="inline" set="null" expr="cast 5" line="9" static="1">
			<x path="kha.graphics4.BlendingFactor"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</InverseSourceAlpha>
		<InverseDestinationAlpha public="1" get="inline" set="null" expr="cast 6" line="10" static="1">
			<x path="kha.graphics4.BlendingFactor"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</InverseDestinationAlpha>
		<SourceColor public="1" get="inline" set="null" expr="cast 7" line="11" static="1">
			<x path="kha.graphics4.BlendingFactor"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SourceColor>
		<DestinationColor public="1" get="inline" set="null" expr="cast 8" line="12" static="1">
			<x path="kha.graphics4.BlendingFactor"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DestinationColor>
		<InverseSourceColor public="1" get="inline" set="null" expr="cast 9" line="13" static="1">
			<x path="kha.graphics4.BlendingFactor"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</InverseSourceColor>
		<InverseDestinationColor public="1" get="inline" set="null" expr="cast 10" line="14" static="1">
			<x path="kha.graphics4.BlendingFactor"/>
			<meta>
				<m n=":value"><e>cast 10</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</InverseDestinationColor>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="kha.graphics4.BlendingOperation" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/BlendingOperation.hx">
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="kha.graphics4._BlendingOperation.BlendingOperation_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/BlendingOperation.hx" private="1" module="kha.graphics4.BlendingOperation" extern="1">
	<Add public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
		<x path="kha.graphics4.BlendingOperation"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Add>
	<Subtract public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
		<x path="kha.graphics4.BlendingOperation"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Subtract>
	<ReverseSubtract public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
		<x path="kha.graphics4.BlendingOperation"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ReverseSubtract>
	<Min public="1" get="inline" set="null" expr="cast 3" line="7" static="1">
		<x path="kha.graphics4.BlendingOperation"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Min>
	<Max public="1" get="inline" set="null" expr="cast 4" line="8" static="1">
		<x path="kha.graphics4.BlendingOperation"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Max>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="kha.graphics4._BlendingOperation.BlendingOperation_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/BlendingOperation.hx" private="1" module="kha.graphics4.BlendingOperation" extern="1">
		<Add public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
			<x path="kha.graphics4.BlendingOperation"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Add>
		<Subtract public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
			<x path="kha.graphics4.BlendingOperation"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Subtract>
		<ReverseSubtract public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
			<x path="kha.graphics4.BlendingOperation"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ReverseSubtract>
		<Min public="1" get="inline" set="null" expr="cast 3" line="7" static="1">
			<x path="kha.graphics4.BlendingOperation"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Min>
		<Max public="1" get="inline" set="null" expr="cast 4" line="8" static="1">
			<x path="kha.graphics4.BlendingOperation"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Max>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="kha.graphics4.CompareMode" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/CompareMode.hx">
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="kha.graphics4._CompareMode.CompareMode_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/CompareMode.hx" private="1" module="kha.graphics4.CompareMode" extern="1">
	<Always public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
		<x path="kha.graphics4.CompareMode"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Always>
	<Never public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
		<x path="kha.graphics4.CompareMode"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Never>
	<Equal public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
		<x path="kha.graphics4.CompareMode"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Equal>
	<NotEqual public="1" get="inline" set="null" expr="cast 3" line="7" static="1">
		<x path="kha.graphics4.CompareMode"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NotEqual>
	<Less public="1" get="inline" set="null" expr="cast 4" line="8" static="1">
		<x path="kha.graphics4.CompareMode"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Less>
	<LessEqual public="1" get="inline" set="null" expr="cast 5" line="9" static="1">
		<x path="kha.graphics4.CompareMode"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LessEqual>
	<Greater public="1" get="inline" set="null" expr="cast 6" line="10" static="1">
		<x path="kha.graphics4.CompareMode"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Greater>
	<GreaterEqual public="1" get="inline" set="null" expr="cast 7" line="11" static="1">
		<x path="kha.graphics4.CompareMode"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GreaterEqual>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="kha.graphics4._CompareMode.CompareMode_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/CompareMode.hx" private="1" module="kha.graphics4.CompareMode" extern="1">
		<Always public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
			<x path="kha.graphics4.CompareMode"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Always>
		<Never public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
			<x path="kha.graphics4.CompareMode"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Never>
		<Equal public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
			<x path="kha.graphics4.CompareMode"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Equal>
		<NotEqual public="1" get="inline" set="null" expr="cast 3" line="7" static="1">
			<x path="kha.graphics4.CompareMode"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NotEqual>
		<Less public="1" get="inline" set="null" expr="cast 4" line="8" static="1">
			<x path="kha.graphics4.CompareMode"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Less>
		<LessEqual public="1" get="inline" set="null" expr="cast 5" line="9" static="1">
			<x path="kha.graphics4.CompareMode"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LessEqual>
		<Greater public="1" get="inline" set="null" expr="cast 6" line="10" static="1">
			<x path="kha.graphics4.CompareMode"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Greater>
		<GreaterEqual public="1" get="inline" set="null" expr="cast 7" line="11" static="1">
			<x path="kha.graphics4.CompareMode"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GreaterEqual>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="kha.graphics4.ConstantLocation" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/ConstantLocation.hx" interface="1"/>
	<class path="kha.graphics4.CubeMap" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/graphics4/CubeMap.hx">
		<implements path="kha.Resource"/>
		<implements path="kha.Canvas"/>
		<createRenderTarget public="1" set="method" line="21" static="1">
			<f a="size:?format:?depthStencil:?contextId" v=":null:null:0">
				<x path="Int"/>
				<x path="kha.graphics4.TextureFormat"/>
				<x path="kha.graphics4.DepthStencilFormat"/>
				<x path="Int"/>
				<c path="kha.graphics4.CubeMap"/>
			</f>
			<meta><m n=":value"><e>{ contextId : 0, depthStencil : null, format : null }</e></m></meta>
		</createRenderTarget>
		<create2 public="1" set="method" line="25" static="1"><f a="size:format:readable:renderTarget:depthStencil:contextId">
	<x path="Int"/>
	<x path="kha.graphics4.TextureFormat"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="kha.graphics4.DepthStencilFormat"/>
	<x path="Int"/>
	<c path="kha.graphics4.CubeMap"/>
</f></create2>
		<getRenderTargetFormat set="method" line="37" static="1"><f a="format">
	<x path="kha.graphics4.TextureFormat"/>
	<x path="Int"/>
</f></getRenderTargetFormat>
		<getDepthBufferBits set="method" line="52" static="1"><f a="depthAndStencil">
	<x path="kha.graphics4.DepthStencilFormat"/>
	<x path="Int"/>
</f></getDepthBufferBits>
		<getStencilBufferBits set="method" line="63" static="1"><f a="depthAndStencil">
	<x path="kha.graphics4.DepthStencilFormat"/>
	<x path="Int"/>
</f></getStencilBufferBits>
		<getTextureFormat set="method" line="74" static="1"><f a="format">
	<x path="kha.graphics4.TextureFormat"/>
	<x path="Int"/>
</f></getTextureFormat>
		<format><x path="kha.graphics4.TextureFormat"/></format>
		<graphics4><c path="kha.graphics4.Graphics"/></graphics4>
		<initRenderTarget set="method" line="33">
			<f a="cubeMapSize:depthBufferBits:format:stencilBufferBits:contextId">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"renderTarget = new Kore::Graphics4::RenderTarget(cubeMapSize, depthBufferBits, false, (Kore::Graphics4::RenderTargetFormat)format, stencilBufferBits, contextId); texture = nullptr;"</e></m></meta>
		</initRenderTarget>
		<unload public="1" set="method" line="89"><f a=""><x path="Void"/></f></unload>
		<lock public="1" set="method" line="93">
			<f a="?level" v="0">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ level : 0 }</e></m></meta>
		</lock>
		<unlock public="1" set="method" line="97"><f a=""><x path="Void"/></f></unlock>
		<width public="1" get="accessor" set="null"><x path="Int"/></width>
		<height public="1" get="accessor" set="null"><x path="Int"/></height>
		<get_width public="1" set="method" line="105">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e><![CDATA["if (texture != nullptr) return texture->width; else return renderTarget->width;"]]></e></m></meta>
		</get_width>
		<get_height public="1" set="method" line="110">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e><![CDATA["if (texture != nullptr) return texture->height; else return renderTarget->height;"]]></e></m></meta>
		</get_height>
		<g1 public="1" get="accessor" set="null"><c path="kha.graphics1.Graphics"/></g1>
		<get_g1 set="method" line="115"><f a=""><c path="kha.graphics1.Graphics"/></f></get_g1>
		<g2 public="1" get="accessor" set="null"><c path="kha.graphics2.Graphics"/></g2>
		<get_g2 set="method" line="120"><f a=""><c path="kha.graphics2.Graphics"/></f></get_g2>
		<g4 public="1" get="accessor" set="null"><c path="kha.graphics4.Graphics"/></g4>
		<get_g4 set="method" line="125"><f a=""><c path="kha.graphics4.Graphics"/></f></get_g4>
		<new set="method" line="17"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":headerCode"><e><![CDATA["\r\n#include <Kore/pch.h>\r\n#include <Kore/Graphics4/Graphics.h>\r\n"]]></e></m>
			<m n=":headerClassCode"><e>"Kore::Graphics4::Texture* texture; Kore::Graphics4::RenderTarget* renderTarget;"</e></m>
		</meta>
	</class>
	<abstract path="kha.graphics4.CullMode" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/CullMode.hx">
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="kha.graphics4._CullMode.CullMode_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/CullMode.hx" private="1" module="kha.graphics4.CullMode" extern="1">
	<Clockwise public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
		<x path="kha.graphics4.CullMode"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Clockwise>
	<CounterClockwise public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
		<x path="kha.graphics4.CullMode"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CounterClockwise>
	<None public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
		<x path="kha.graphics4.CullMode"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</None>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="kha.graphics4._CullMode.CullMode_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/CullMode.hx" private="1" module="kha.graphics4.CullMode" extern="1">
		<Clockwise public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
			<x path="kha.graphics4.CullMode"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Clockwise>
		<CounterClockwise public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
			<x path="kha.graphics4.CullMode"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CounterClockwise>
		<None public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
			<x path="kha.graphics4.CullMode"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</None>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="kha.graphics4.DepthStencilFormat" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/DepthStencilFormat.hx">
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="kha.graphics4._DepthStencilFormat.DepthStencilFormat_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/DepthStencilFormat.hx" private="1" module="kha.graphics4.DepthStencilFormat" extern="1">
	<NoDepthAndStencil public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
		<x path="kha.graphics4.DepthStencilFormat"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NoDepthAndStencil>
	<DepthOnly public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
		<x path="kha.graphics4.DepthStencilFormat"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DepthOnly>
	<DepthAutoStencilAuto public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
		<x path="kha.graphics4.DepthStencilFormat"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DepthAutoStencilAuto>
	<Depth24Stencil8 public="1" get="inline" set="null" expr="cast 3" line="9" static="1">
		<x path="kha.graphics4.DepthStencilFormat"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Depth24Stencil8>
	<Depth32Stencil8 public="1" get="inline" set="null" expr="cast 4" line="10" static="1">
		<x path="kha.graphics4.DepthStencilFormat"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Depth32Stencil8>
	<Depth16 public="1" get="inline" set="null" expr="cast 5" line="11" static="1">
		<x path="kha.graphics4.DepthStencilFormat"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Depth16>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="kha.graphics4._DepthStencilFormat.DepthStencilFormat_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/DepthStencilFormat.hx" private="1" module="kha.graphics4.DepthStencilFormat" extern="1">
		<NoDepthAndStencil public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
			<x path="kha.graphics4.DepthStencilFormat"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NoDepthAndStencil>
		<DepthOnly public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
			<x path="kha.graphics4.DepthStencilFormat"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DepthOnly>
		<DepthAutoStencilAuto public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
			<x path="kha.graphics4.DepthStencilFormat"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DepthAutoStencilAuto>
		<Depth24Stencil8 public="1" get="inline" set="null" expr="cast 3" line="9" static="1">
			<x path="kha.graphics4.DepthStencilFormat"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Depth24Stencil8>
		<Depth32Stencil8 public="1" get="inline" set="null" expr="cast 4" line="10" static="1">
			<x path="kha.graphics4.DepthStencilFormat"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Depth32Stencil8>
		<Depth16 public="1" get="inline" set="null" expr="cast 5" line="11" static="1">
			<x path="kha.graphics4.DepthStencilFormat"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Depth16>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="kha.graphics4.FragmentShader" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/graphics4/FragmentShader.hx">
		<fromSource public="1" set="method" line="23" static="1">
			<f a="source">
				<c path="String"/>
				<c path="kha.graphics4.FragmentShader"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</fromSource>
		<init set="method" line="19">
			<f a="source:file">
				<t path="kha.Blob"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</init>
		<delete public="1" set="method" line="29">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</delete>
		<_forceInclude set="method" line="34">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</_forceInclude>
		<new public="1" set="method" line="13"><f a="sources:files">
	<c path="Array"><t path="kha.Blob"/></c>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":headerCode"><e><![CDATA["\r\n#include <Kore/pch.h>\r\n#include <Kore/Graphics4/Graphics.h>\r\n"]]></e></m>
			<m n=":headerClassCode"><e>"Kore::Graphics4::Shader* shader;"</e></m>
		</meta>
	</class>
	<class path="kha.graphics4.GeometryShader" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/graphics4/GeometryShader.hx">
		<init set="method" line="17">
			<f a="source:file">
				<t path="kha.Blob"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</init>
		<delete public="1" set="method" line="21">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</delete>
		<_forceInclude set="method" line="26">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</_forceInclude>
		<new public="1" set="method" line="13"><f a="sources:files">
	<c path="Array"><t path="kha.Blob"/></c>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":headerCode"><e><![CDATA["\n#include <Kore/pch.h>\n#include <Kore/Graphics4/Graphics.h>\n"]]></e></m>
			<m n=":headerClassCode"><e>"Kore::Graphics4::Shader* shader;"</e></m>
		</meta>
	</class>
	<class path="kha.graphics4.Graphics" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/Graphics.hx" interface="1">
		<begin public="1" set="method">
			<f a="?additionalRenderTargets" v="null">
				<c path="Array"><c path="kha.Canvas"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ additionalRenderTargets : null }</e></m></meta>
		</begin>
		<beginFace public="1" set="method"><f a="face">
	<x path="Int"/>
	<x path="Void"/>
</f></beginFace>
		<beginEye public="1" set="method"><f a="eye">
	<x path="Int"/>
	<x path="Void"/>
</f></beginEye>
		<end public="1" set="method"><f a=""><x path="Void"/></f></end>
		<vsynced public="1" set="method"><f a=""><x path="Bool"/></f></vsynced>
		<refreshRate public="1" set="method"><f a=""><x path="Int"/></f></refreshRate>
		<clear public="1" set="method"><f a="?color:?depth:?stencil">
	<x path="kha.Color"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></clear>
		<viewport public="1" set="method"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></viewport>
		<scissor public="1" set="method"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scissor>
		<disableScissor public="1" set="method"><f a=""><x path="Void"/></f></disableScissor>
		<setVertexBuffer public="1" set="method"><f a="vertexBuffer">
	<c path="kha.graphics4.VertexBuffer"/>
	<x path="Void"/>
</f></setVertexBuffer>
		<setVertexBuffers public="1" set="method"><f a="vertexBuffers">
	<c path="Array"><c path="kha.graphics4.VertexBuffer"/></c>
	<x path="Void"/>
</f></setVertexBuffers>
		<setIndexBuffer public="1" set="method"><f a="indexBuffer">
	<c path="kha.graphics4.IndexBuffer"/>
	<x path="Void"/>
</f></setIndexBuffer>
		<setTexture public="1" set="method"><f a="unit:texture">
	<c path="kha.graphics4.TextureUnit"/>
	<c path="kha.Image"/>
	<x path="Void"/>
</f></setTexture>
		<setTextureDepth public="1" set="method"><f a="unit:texture">
	<c path="kha.graphics4.TextureUnit"/>
	<c path="kha.Image"/>
	<x path="Void"/>
</f></setTextureDepth>
		<setTextureArray public="1" set="method"><f a="unit:texture">
	<c path="kha.graphics4.TextureUnit"/>
	<c path="kha.Image"/>
	<x path="Void"/>
</f></setTextureArray>
		<setVideoTexture public="1" set="method"><f a="unit:texture">
	<c path="kha.graphics4.TextureUnit"/>
	<c path="kha.Video"/>
	<x path="Void"/>
</f></setVideoTexture>
		<setImageTexture public="1" set="method"><f a="unit:texture">
	<c path="kha.graphics4.TextureUnit"/>
	<c path="kha.Image"/>
	<x path="Void"/>
</f></setImageTexture>
		<setTextureParameters public="1" set="method"><f a="texunit:uAddressing:vAddressing:minificationFilter:magnificationFilter:mipmapFilter">
	<c path="kha.graphics4.TextureUnit"/>
	<x path="kha.graphics4.TextureAddressing"/>
	<x path="kha.graphics4.TextureAddressing"/>
	<x path="kha.graphics4.TextureFilter"/>
	<x path="kha.graphics4.TextureFilter"/>
	<x path="kha.graphics4.MipMapFilter"/>
	<x path="Void"/>
</f></setTextureParameters>
		<setTexture3DParameters public="1" set="method"><f a="texunit:uAddressing:vAddressing:wAddressing:minificationFilter:magnificationFilter:mipmapFilter">
	<c path="kha.graphics4.TextureUnit"/>
	<x path="kha.graphics4.TextureAddressing"/>
	<x path="kha.graphics4.TextureAddressing"/>
	<x path="kha.graphics4.TextureAddressing"/>
	<x path="kha.graphics4.TextureFilter"/>
	<x path="kha.graphics4.TextureFilter"/>
	<x path="kha.graphics4.MipMapFilter"/>
	<x path="Void"/>
</f></setTexture3DParameters>
		<setTextureCompareMode public="1" set="method"><f a="texunit:enabled">
	<c path="kha.graphics4.TextureUnit"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setTextureCompareMode>
		<setCubeMapCompareMode public="1" set="method"><f a="texunit:enabled">
	<c path="kha.graphics4.TextureUnit"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setCubeMapCompareMode>
		<setCubeMap public="1" set="method"><f a="unit:cubeMap">
	<c path="kha.graphics4.TextureUnit"/>
	<c path="kha.graphics4.CubeMap"/>
	<x path="Void"/>
</f></setCubeMap>
		<setCubeMapDepth public="1" set="method"><f a="unit:cubeMap">
	<c path="kha.graphics4.TextureUnit"/>
	<c path="kha.graphics4.CubeMap"/>
	<x path="Void"/>
</f></setCubeMapDepth>
		<setStencilReferenceValue public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></setStencilReferenceValue>
		<instancedRenderingAvailable public="1" set="method"><f a=""><x path="Bool"/></f></instancedRenderingAvailable>
		<setPipeline public="1" set="method"><f a="pipeline">
	<c path="kha.graphics4.PipelineState"/>
	<x path="Void"/>
</f></setPipeline>
		<setBool public="1" set="method"><f a="location:value">
	<c path="kha.graphics4.ConstantLocation"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setBool>
		<setInt public="1" set="method"><f a="location:value">
	<c path="kha.graphics4.ConstantLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt>
		<setInt2 public="1" set="method"><f a="location:value1:value2">
	<c path="kha.graphics4.ConstantLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt2>
		<setInt3 public="1" set="method"><f a="location:value1:value2:value3">
	<c path="kha.graphics4.ConstantLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt3>
		<setInt4 public="1" set="method"><f a="location:value1:value2:value3:value4">
	<c path="kha.graphics4.ConstantLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt4>
		<setInts public="1" set="method"><f a="location:ints">
	<c path="kha.graphics4.ConstantLocation"/>
	<x path="kha.arrays.Int32Array"/>
	<x path="Void"/>
</f></setInts>
		<setFloat public="1" set="method"><f a="location:value">
	<c path="kha.graphics4.ConstantLocation"/>
	<t path="kha.FastFloat"/>
	<x path="Void"/>
</f></setFloat>
		<setFloat2 public="1" set="method"><f a="location:value1:value2">
	<c path="kha.graphics4.ConstantLocation"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<x path="Void"/>
</f></setFloat2>
		<setFloat3 public="1" set="method"><f a="location:value1:value2:value3">
	<c path="kha.graphics4.ConstantLocation"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<x path="Void"/>
</f></setFloat3>
		<setFloat4 public="1" set="method"><f a="location:value1:value2:value3:value4">
	<c path="kha.graphics4.ConstantLocation"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<x path="Void"/>
</f></setFloat4>
		<setFloats public="1" set="method"><f a="location:floats">
	<c path="kha.graphics4.ConstantLocation"/>
	<x path="kha.arrays.Float32Array"/>
	<x path="Void"/>
</f></setFloats>
		<setVector2 public="1" set="method"><f a="location:value">
	<c path="kha.graphics4.ConstantLocation"/>
	<c path="kha.math.FastVector2"/>
	<x path="Void"/>
</f></setVector2>
		<setVector3 public="1" set="method"><f a="location:value">
	<c path="kha.graphics4.ConstantLocation"/>
	<c path="kha.math.FastVector3"/>
	<x path="Void"/>
</f></setVector3>
		<setVector4 public="1" set="method"><f a="location:value">
	<c path="kha.graphics4.ConstantLocation"/>
	<c path="kha.math.FastVector4"/>
	<x path="Void"/>
</f></setVector4>
		<setMatrix public="1" set="method"><f a="location:value">
	<c path="kha.graphics4.ConstantLocation"/>
	<c path="kha.math.FastMatrix4"/>
	<x path="Void"/>
</f></setMatrix>
		<setMatrix3 public="1" set="method"><f a="location:value">
	<c path="kha.graphics4.ConstantLocation"/>
	<c path="kha.math.FastMatrix3"/>
	<x path="Void"/>
</f></setMatrix3>
		<drawIndexedVertices public="1" set="method">
			<f a="?start:?count" v="0:-1">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ count : -1, start : 0 }</e></m></meta>
		</drawIndexedVertices>
		<drawIndexedVerticesInstanced public="1" set="method">
			<f a="instanceCount:?start:?count" v=":0:-1">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ count : -1, start : 0 }</e></m></meta>
		</drawIndexedVerticesInstanced>
		<flush public="1" set="method"><f a=""><x path="Void"/></f></flush>
	</class>
	<class path="kha.graphics4.PipelineCache" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/Graphics2.hx" module="kha.graphics4.Graphics2">
		<pipeline public="1"><c path="kha.graphics4.PipelineState"/></pipeline>
		<projectionLocation public="1"><c path="kha.graphics4.ConstantLocation"/></projectionLocation>
		<textureLocation public="1"><c path="kha.graphics4.TextureUnit"/></textureLocation>
		<new public="1" set="method" line="37"><f a="pipeline">
	<c path="kha.graphics4.PipelineState"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.graphics4.ImageShaderPainter" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/Graphics2.hx" module="kha.graphics4.Graphics2">
		<standardImagePipeline expr="null" line="46" static="1">
			<c path="kha.graphics4.PipelineCache"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</standardImagePipeline>
		<structure expr="null" line="47" static="1">
			<c path="kha.graphics4.VertexStructure"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</structure>
		<bufferSize get="inline" set="null" expr="1500" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1500</e></m></meta>
		</bufferSize>
		<vertexSize get="inline" set="null" expr="9" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>9</e></m></meta>
		</vertexSize>
		<bufferIndex static="1"><x path="Int"/></bufferIndex>
		<rectVertexBuffer static="1"><c path="kha.graphics4.VertexBuffer"/></rectVertexBuffer>
		<rectVertices static="1"><x path="kha.arrays.Float32Array"/></rectVertices>
		<indexBuffer static="1"><c path="kha.graphics4.IndexBuffer"/></indexBuffer>
		<lastTexture static="1"><c path="kha.Image"/></lastTexture>
		<initShaders set="method" line="82" static="1"><f a=""><x path="Void"/></f></initShaders>
		<projectionMatrix><c path="kha.math.FastMatrix4"/></projectionMatrix>
		<bilinear expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</bilinear>
		<bilinearMipmaps expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</bilinearMipmaps>
		<g><c path="kha.graphics4.Graphics"/></g>
		<myPipeline expr="null">
			<c path="kha.graphics4.PipelineCache"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</myPipeline>
		<pipeline public="1" get="accessor" set="accessor"><c path="kha.graphics4.PipelineCache"/></pipeline>
		<get_pipeline set="method" line="69"><f a=""><c path="kha.graphics4.PipelineCache"/></f></get_pipeline>
		<set_pipeline set="method" line="73"><f a="pipe">
	<c path="kha.graphics4.PipelineCache"/>
	<c path="kha.graphics4.PipelineCache"/>
</f></set_pipeline>
		<setProjection public="1" set="method" line="78"><f a="projectionMatrix">
	<c path="kha.math.FastMatrix4"/>
	<x path="Void"/>
</f></setProjection>
		<initBuffers set="method" line="93"><f a=""><x path="Void"/></f></initBuffers>
		<setRectVertices get="inline" set="null" line="112"><f a="bottomleftx:bottomlefty:topleftx:toplefty:toprightx:toprighty:bottomrightx:bottomrighty">
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<x path="Void"/>
</f></setRectVertices>
		<setRectTexCoords get="inline" set="null" line="135"><f a="left:top:right:bottom">
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<x path="Void"/>
</f></setRectTexCoords>
		<setRectColor get="inline" set="null" line="150"><f a="r:g:b:a">
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<x path="Void"/>
</f></setRectColor>
		<drawBuffer set="method" line="173"><f a=""><x path="Void"/></f></drawBuffer>
		<setBilinearFilter public="1" set="method" line="189"><f a="bilinear">
	<x path="Bool"/>
	<x path="Void"/>
</f></setBilinearFilter>
		<setBilinearMipmapFilter public="1" set="method" line="194"><f a="bilinear">
	<x path="Bool"/>
	<x path="Void"/>
</f></setBilinearMipmapFilter>
		<drawImage public="1" get="inline" set="null" line="199"><f a="img:bottomleftx:bottomlefty:topleftx:toplefty:toprightx:toprighty:bottomrightx:bottomrighty:opacity:color">
	<c path="kha.Image"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<x path="kha.Color"/>
	<x path="Void"/>
</f></drawImage>
		<drawImage2 public="1" get="inline" set="null" line="216"><f a="img:sx:sy:sw:sh:bottomleftx:bottomlefty:topleftx:toplefty:toprightx:toprighty:bottomrightx:bottomrighty:opacity:color">
	<c path="kha.Image"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<x path="kha.Color"/>
	<x path="Void"/>
</f></drawImage2>
		<drawImageScale public="1" get="inline" set="null" line="233"><f a="img:sx:sy:sw:sh:left:top:right:bottom:opacity:color">
	<c path="kha.Image"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<x path="kha.Color"/>
	<x path="Void"/>
</f></drawImageScale>
		<end public="1" set="method" line="245"><f a=""><x path="Void"/></f></end>
		<new public="1" set="method" line="61"><f a="g4">
	<c path="kha.graphics4.Graphics"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.graphics4.ColoredShaderPainter" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/Graphics2.hx" module="kha.graphics4.Graphics2">
		<standardColorPipeline expr="null" line="253" static="1">
			<c path="kha.graphics4.PipelineCache"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</standardColorPipeline>
		<structure expr="null" line="254" static="1">
			<c path="kha.graphics4.VertexStructure"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</structure>
		<bufferSize get="inline" set="null" expr="1000" line="256" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1000</e></m></meta>
		</bufferSize>
		<bufferIndex static="1"><x path="Int"/></bufferIndex>
		<rectVertexBuffer static="1"><c path="kha.graphics4.VertexBuffer"/></rectVertexBuffer>
		<rectVertices static="1"><x path="kha.arrays.Float32Array"/></rectVertices>
		<indexBuffer static="1"><c path="kha.graphics4.IndexBuffer"/></indexBuffer>
		<triangleBufferSize get="inline" set="null" expr="1000" line="262" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1000</e></m></meta>
		</triangleBufferSize>
		<triangleBufferIndex static="1"><x path="Int"/></triangleBufferIndex>
		<triangleVertexBuffer static="1"><c path="kha.graphics4.VertexBuffer"/></triangleVertexBuffer>
		<triangleVertices static="1"><x path="kha.arrays.Float32Array"/></triangleVertices>
		<triangleIndexBuffer static="1"><c path="kha.graphics4.IndexBuffer"/></triangleIndexBuffer>
		<initShaders set="method" line="294" static="1"><f a=""><x path="Void"/></f></initShaders>
		<projectionMatrix><c path="kha.math.FastMatrix4"/></projectionMatrix>
		<g><c path="kha.graphics4.Graphics"/></g>
		<myPipeline expr="null">
			<c path="kha.graphics4.PipelineCache"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</myPipeline>
		<pipeline public="1" get="accessor" set="accessor"><c path="kha.graphics4.PipelineCache"/></pipeline>
		<get_pipeline set="method" line="281"><f a=""><c path="kha.graphics4.PipelineCache"/></f></get_pipeline>
		<set_pipeline set="method" line="285"><f a="pipe">
	<c path="kha.graphics4.PipelineCache"/>
	<c path="kha.graphics4.PipelineCache"/>
</f></set_pipeline>
		<setProjection public="1" set="method" line="290"><f a="projectionMatrix">
	<c path="kha.math.FastMatrix4"/>
	<x path="Void"/>
</f></setProjection>
		<initBuffers set="method" line="305"><f a=""><x path="Void"/></f></initBuffers>
		<setRectVertices public="1" set="method" line="336"><f a="bottomleftx:bottomlefty:topleftx:toplefty:toprightx:toprighty:bottomrightx:bottomrighty">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setRectVertices>
		<setRectColors public="1" set="method" line="359"><f a="opacity:color">
	<t path="kha.FastFloat"/>
	<x path="kha.Color"/>
	<x path="Void"/>
</f></setRectColors>
		<setTriVertices set="method" line="388"><f a="x1:y1:x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setTriVertices>
		<setTriColors set="method" line="403"><f a="opacity:color">
	<t path="kha.FastFloat"/>
	<x path="kha.Color"/>
	<x path="Void"/>
</f></setTriColors>
		<drawBuffer set="method" line="427"><f a="trisDone">
	<x path="Bool"/>
	<x path="Void"/>
</f></drawBuffer>
		<drawTriBuffer set="method" line="442"><f a="rectsDone">
	<x path="Bool"/>
	<x path="Void"/>
</f></drawTriBuffer>
		<fillRect public="1" set="method" line="457"><f a="opacity:color:bottomleftx:bottomlefty:topleftx:toplefty:toprightx:toprighty:bottomrightx:bottomrighty">
	<t path="kha.FastFloat"/>
	<x path="kha.Color"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fillRect>
		<fillTriangle public="1" set="method" line="471"><f a="opacity:color:x1:y1:x2:y2:x3:y3">
	<t path="kha.FastFloat"/>
	<x path="kha.Color"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fillTriangle>
		<endTris public="1" get="inline" set="null" line="481"><f a="rectsDone">
	<x path="Bool"/>
	<x path="Void"/>
</f></endTris>
		<endRects public="1" get="inline" set="null" line="485"><f a="trisDone">
	<x path="Bool"/>
	<x path="Void"/>
</f></endRects>
		<end public="1" get="inline" set="null" line="489"><f a=""><x path="Void"/></f></end>
		<new public="1" set="method" line="272"><f a="g4">
	<c path="kha.graphics4.Graphics"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.graphics4.TextShaderPainter" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/Graphics2.hx" module="kha.graphics4.Graphics2">
		<standardTextPipeline expr="null" line="497" static="1">
			<c path="kha.graphics4.PipelineCache"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</standardTextPipeline>
		<structure expr="null" line="498" static="1">
			<c path="kha.graphics4.VertexStructure"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</structure>
		<bufferSize get="inline" set="null" expr="1000" line="499" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1000</e></m></meta>
		</bufferSize>
		<bufferIndex static="1"><x path="Int"/></bufferIndex>
		<rectVertexBuffer static="1"><c path="kha.graphics4.VertexBuffer"/></rectVertexBuffer>
		<rectVertices static="1"><x path="kha.arrays.Float32Array"/></rectVertices>
		<indexBuffer static="1"><c path="kha.graphics4.IndexBuffer"/></indexBuffer>
		<lastTexture static="1"><c path="kha.Image"/></lastTexture>
		<initShaders set="method" line="533" static="1"><f a=""><x path="Void"/></f></initShaders>
		<findIndex set="method" line="650" static="1"><f a="charCode">
	<x path="Int"/>
	<x path="Int"/>
</f></findIndex>
		<projectionMatrix><c path="kha.math.FastMatrix4"/></projectionMatrix>
		<font><c path="kha.Kravur"/></font>
		<g><c path="kha.graphics4.Graphics"/></g>
		<myPipeline expr="null">
			<c path="kha.graphics4.PipelineCache"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</myPipeline>
		<pipeline public="1" get="accessor" set="accessor"><c path="kha.graphics4.PipelineCache"/></pipeline>
		<fontSize public="1"><x path="Int"/></fontSize>
		<bilinear expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</bilinear>
		<get_pipeline set="method" line="520"><f a=""><c path="kha.graphics4.PipelineCache"/></f></get_pipeline>
		<set_pipeline set="method" line="524"><f a="pipe">
	<c path="kha.graphics4.PipelineCache"/>
	<c path="kha.graphics4.PipelineCache"/>
</f></set_pipeline>
		<setProjection public="1" set="method" line="529"><f a="projectionMatrix">
	<c path="kha.math.FastMatrix4"/>
	<x path="Void"/>
</f></setProjection>
		<initBuffers set="method" line="544"><f a=""><x path="Void"/></f></initBuffers>
		<setRectVertices set="method" line="563"><f a="bottomleftx:bottomlefty:topleftx:toplefty:toprightx:toprighty:bottomrightx:bottomrighty">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setRectVertices>
		<setRectTexCoords set="method" line="586"><f a="left:top:right:bottom">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setRectTexCoords>
		<setRectColors set="method" line="601"><f a="opacity:color">
	<t path="kha.FastFloat"/>
	<x path="kha.Color"/>
	<x path="Void"/>
</f></setRectColors>
		<drawBuffer set="method" line="625"><f a=""><x path="Void"/></f></drawBuffer>
		<setBilinearFilter public="1" set="method" line="641"><f a="bilinear">
	<x path="Bool"/>
	<x path="Void"/>
</f></setBilinearFilter>
		<setFont public="1" set="method" line="646"><f a="font">
	<t path="kha.Font"/>
	<x path="Void"/>
</f></setFont>
		<bakedQuadCache expr="new kha.Kravur.AlignedQuad()">
			<c path="kha.AlignedQuad"/>
			<meta><m n=":value"><e>new kha.Kravur.AlignedQuad()</e></m></meta>
		</bakedQuadCache>
		<drawString public="1" set="method" line="665"><f a="text:opacity:color:x:y:transformation">
	<c path="String"/>
	<t path="kha.FastFloat"/>
	<x path="kha.Color"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="kha.math.FastMatrix3"/>
	<x path="Void"/>
</f></drawString>
		<drawCharacters public="1" set="method" line="691"><f a="text:start:length:opacity:color:x:y:transformation">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<t path="kha.FastFloat"/>
	<x path="kha.Color"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="kha.math.FastMatrix3"/>
	<x path="Void"/>
</f></drawCharacters>
		<end public="1" set="method" line="716"><f a=""><x path="Void"/></f></end>
		<new public="1" set="method" line="512"><f a="g4">
	<c path="kha.graphics4.Graphics"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.graphics4.Graphics2" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/Graphics2.hx">
		<extends path="kha.graphics2.Graphics"/>
		<videoPipeline static="1"><c path="kha.graphics4.PipelineState"/></videoPipeline>
		<current expr="null" line="732" static="1">
			<c path="kha.graphics4.Graphics2"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</current>
		<upperPowerOfTwo set="method" line="754" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></upperPowerOfTwo>
		<createImageVertexStructure public="1" set="method" line="1072" static="1"><f a=""><c path="kha.graphics4.VertexStructure"/></f></createImageVertexStructure>
		<createImagePipeline public="1" set="method" line="1080" static="1"><f a="structure">
	<c path="kha.graphics4.VertexStructure"/>
	<c path="kha.graphics4.PipelineState"/>
</f></createImagePipeline>
		<createColoredVertexStructure public="1" set="method" line="1092" static="1"><f a=""><c path="kha.graphics4.VertexStructure"/></f></createColoredVertexStructure>
		<createColoredPipeline public="1" set="method" line="1099" static="1"><f a="structure">
	<c path="kha.graphics4.VertexStructure"/>
	<c path="kha.graphics4.PipelineState"/>
</f></createColoredPipeline>
		<createTextVertexStructure public="1" set="method" line="1111" static="1"><f a=""><c path="kha.graphics4.VertexStructure"/></f></createTextVertexStructure>
		<createTextPipeline public="1" set="method" line="1119" static="1"><f a="structure">
	<c path="kha.graphics4.VertexStructure"/>
	<c path="kha.graphics4.PipelineState"/>
</f></createTextPipeline>
		<myColor><x path="kha.Color"/></myColor>
		<myFont><t path="kha.Font"/></myFont>
		<projectionMatrix><c path="kha.math.FastMatrix4"/></projectionMatrix>
		<imagePainter public="1"><c path="kha.graphics4.ImageShaderPainter"/></imagePainter>
		<coloredPainter><c path="kha.graphics4.ColoredShaderPainter"/></coloredPainter>
		<textPainter><c path="kha.graphics4.TextShaderPainter"/></textPainter>
		<canvas><c path="kha.Canvas"/></canvas>
		<g><c path="kha.graphics4.Graphics"/></g>
		<setProjection set="method" line="765"><f a=""><x path="Void"/></f></setProjection>
		<drawImage public="1" set="method" line="789" override="1"><f a="img:x:y">
	<c path="kha.Image"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<x path="Void"/>
</f></drawImage>
		<drawScaledSubImage public="1" set="method" line="830" override="1"><f a="img:sx:sy:sw:sh:dx:dy:dw:dh">
	<c path="kha.Image"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<x path="Void"/>
</f></drawScaledSubImage>
		<get_color public="1" set="method" line="840" override="1"><f a=""><x path="kha.Color"/></f></get_color>
		<set_color public="1" set="method" line="844" override="1"><f a="color">
	<x path="kha.Color"/>
	<x path="kha.Color"/>
</f></set_color>
		<drawRect public="1" set="method" line="848" override="1">
			<f a="x:y:width:height:?strength" v="::::1.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ strength : 1.0 }</e></m></meta>
		</drawRect>
		<fillRect public="1" set="method" line="877" override="1"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fillRect>
		<drawString public="1" set="method" line="888" override="1"><f a="text:x:y">
	<c path="String"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawString>
		<drawCharacters public="1" set="method" line="895" override="1"><f a="text:start:length:x:y">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawCharacters>
		<get_font public="1" set="method" line="902" override="1"><f a=""><t path="kha.Font"/></f></get_font>
		<set_font public="1" set="method" line="906" override="1"><f a="font">
	<t path="kha.Font"/>
	<t path="kha.Font"/>
</f></set_font>
		<set_fontSize public="1" set="method" line="911" override="1"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_fontSize>
		<drawLine public="1" set="method" line="915" override="1">
			<f a="x1:y1:x2:y2:?strength" v="::::1.0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ strength : 1.0 }</e></m></meta>
		</drawLine>
		<fillTriangle public="1" set="method" line="937" override="1"><f a="x1:y1:x2:y2:x3:y3">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></fillTriangle>
		<myImageScaleQuality expr="ImageScaleQuality.Low">
			<x path="kha.graphics2.ImageScaleQuality"/>
			<meta><m n=":value"><e>ImageScaleQuality.Low</e></m></meta>
		</myImageScaleQuality>
		<get_imageScaleQuality set="method" line="949" override="1"><f a=""><x path="kha.graphics2.ImageScaleQuality"/></f></get_imageScaleQuality>
		<set_imageScaleQuality set="method" line="953" override="1"><f a="value">
	<x path="kha.graphics2.ImageScaleQuality"/>
	<x path="kha.graphics2.ImageScaleQuality"/>
</f></set_imageScaleQuality>
		<myMipmapScaleQuality expr="ImageScaleQuality.Low">
			<x path="kha.graphics2.ImageScaleQuality"/>
			<meta><m n=":value"><e>ImageScaleQuality.Low</e></m></meta>
		</myMipmapScaleQuality>
		<get_mipmapScaleQuality set="method" line="964" override="1"><f a=""><x path="kha.graphics2.ImageScaleQuality"/></f></get_mipmapScaleQuality>
		<set_mipmapScaleQuality set="method" line="968" override="1"><f a="value">
	<x path="kha.graphics2.ImageScaleQuality"/>
	<x path="kha.graphics2.ImageScaleQuality"/>
</f></set_mipmapScaleQuality>
		<pipelineCache expr="new Map&lt;PipelineState,PipelineCache&gt;()">
			<x path="haxe.ds.Map">
				<c path="kha.graphics4.PipelineState"/>
				<c path="kha.graphics4.PipelineCache"/>
			</x>
			<meta><m n=":value"><e><![CDATA[new Map<PipelineState,PipelineCache>()]]></e></m></meta>
		</pipelineCache>
		<lastPipeline expr="null">
			<c path="kha.graphics4.PipelineState"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</lastPipeline>
		<setPipeline set="method" line="977" override="1"><f a="pipeline">
	<c path="kha.graphics4.PipelineState"/>
	<x path="Void"/>
</f></setPipeline>
		<scissorEnabled expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</scissorEnabled>
		<scissorX expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</scissorX>
		<scissorY expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</scissorY>
		<scissorW expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</scissorW>
		<scissorH expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</scissorH>
		<scissor public="1" set="method" line="1006" override="1"><f a="x:y:width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scissor>
		<disableScissor public="1" set="method" line="1018" override="1"><f a=""><x path="Void"/></f></disableScissor>
		<begin public="1" set="method" line="1026" override="1">
			<f a="?clear:?clearColor" v="true:null">
				<x path="Bool"/>
				<x path="kha.Color"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ clearColor : null, clear : true }</e></m></meta>
		</begin>
		<clear public="1" set="method" line="1039" override="1">
			<f a="?color" v="null">
				<x path="kha.Color"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ color : null }</e></m></meta>
		</clear>
		<flush public="1" set="method" line="1044" override="1"><f a=""><x path="Void"/></f></flush>
		<end public="1" set="method" line="1050" override="1"><f a=""><x path="Void"/></f></end>
		<drawVideoInternal set="method" line="1062"><f a="video:x:y:width:height">
	<c path="kha.Video"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawVideoInternal>
		<drawVideo public="1" set="method" line="1066" override="1"><f a="video:x:y:width:height">
	<c path="kha.Video"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawVideo>
		<new public="1" set="method" line="734"><f a="canvas">
	<c path="kha.Canvas"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.graphics4.IndexBuffer" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/graphics4/IndexBuffer.hx">
		<data><x path="kha.arrays.Uint32Array"/></data>
		<myCount><x path="Int"/></myCount>
		<delete public="1" set="method" line="21">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</delete>
		<lockPrivate set="method" line="30">
			<f a="start:count">
				<x path="Int"/>
				<x path="Int"/>
				<x path="kha.arrays.Uint32Array"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tdata->self.data = (unsigned int*)buffer->lock() + start;\r\n\t\tdata->self.myLength = count;\r\n\t\treturn data;\r\n\t"]]></e></m></meta>
		</lockPrivate>
		<lock public="1" set="method" line="34"><f a="?start:?count">
	<x path="Int"/>
	<x path="Int"/>
	<x path="kha.arrays.Uint32Array"/>
</f></lock>
		<unlockPrivate public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<meta><m n=":functionCode"><e><![CDATA["buffer->unlock(); data->self.data = nullptr;"]]></e></m></meta>
		</unlockPrivate>
		<unlock public="1" set="method" line="45"><f a="?count">
	<x path="Int"/>
	<x path="Void"/>
</f></unlock>
		<count public="1" set="method" line="49"><f a=""><x path="Int"/></f></count>
		<new public="1" set="method" line="15">
			<f a="indexCount:usage:?canRead" v="::false">
				<x path="Int"/>
				<x path="kha.graphics4.Usage"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ canRead : false }</e></m>
			</meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":headerCode"><e><![CDATA["\r\n#include <Kore/pch.h>\r\n#include <Kore/Graphics4/Graphics.h>\r\n"]]></e></m>
			<m n=":headerClassCode"><e>"Kore::Graphics4::IndexBuffer* buffer;"</e></m>
		</meta>
	</class>
	<abstract path="kha.graphics4.MipMapFilter" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/MipMapFilter.hx">
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="kha.graphics4._MipMapFilter.MipMapFilter_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/MipMapFilter.hx" private="1" module="kha.graphics4.MipMapFilter" extern="1">
	<NoMipFilter public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
		<x path="kha.graphics4.MipMapFilter"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NoMipFilter>
	<PointMipFilter public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
		<x path="kha.graphics4.MipMapFilter"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PointMipFilter>
	<LinearMipFilter public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
		<x path="kha.graphics4.MipMapFilter"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LinearMipFilter>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="kha.graphics4._MipMapFilter.MipMapFilter_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/MipMapFilter.hx" private="1" module="kha.graphics4.MipMapFilter" extern="1">
		<NoMipFilter public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
			<x path="kha.graphics4.MipMapFilter"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NoMipFilter>
		<PointMipFilter public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
			<x path="kha.graphics4.MipMapFilter"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PointMipFilter>
		<LinearMipFilter public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
			<x path="kha.graphics4.MipMapFilter"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LinearMipFilter>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="kha.graphics4.PipelineStateBase" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/PipelineStateBase.hx">
		<inputLayout public="1"><c path="Array"><c path="kha.graphics4.VertexStructure"/></c></inputLayout>
		<vertexShader public="1"><c path="kha.graphics4.VertexShader"/></vertexShader>
		<fragmentShader public="1"><c path="kha.graphics4.FragmentShader"/></fragmentShader>
		<geometryShader public="1"><c path="kha.graphics4.GeometryShader"/></geometryShader>
		<tessellationControlShader public="1"><c path="kha.graphics4.TessellationControlShader"/></tessellationControlShader>
		<tessellationEvaluationShader public="1"><c path="kha.graphics4.TessellationEvaluationShader"/></tessellationEvaluationShader>
		<cullMode public="1"><x path="kha.graphics4.CullMode"/></cullMode>
		<depthWrite public="1"><x path="Bool"/></depthWrite>
		<depthMode public="1"><x path="kha.graphics4.CompareMode"/></depthMode>
		<stencilMode public="1"><x path="kha.graphics4.CompareMode"/></stencilMode>
		<stencilBothPass public="1"><x path="kha.graphics4.StencilAction"/></stencilBothPass>
		<stencilDepthFail public="1"><x path="kha.graphics4.StencilAction"/></stencilDepthFail>
		<stencilFail public="1"><x path="kha.graphics4.StencilAction"/></stencilFail>
		<stencilReferenceValue public="1"><e path="kha.graphics4.StencilValue"/></stencilReferenceValue>
		<stencilReadMask public="1"><x path="Int"/></stencilReadMask>
		<stencilWriteMask public="1"><x path="Int"/></stencilWriteMask>
		<blendSource public="1"><x path="kha.graphics4.BlendingFactor"/></blendSource>
		<blendDestination public="1"><x path="kha.graphics4.BlendingFactor"/></blendDestination>
		<blendOperation public="1"><x path="kha.graphics4.BlendingOperation"/></blendOperation>
		<alphaBlendSource public="1"><x path="kha.graphics4.BlendingFactor"/></alphaBlendSource>
		<alphaBlendDestination public="1"><x path="kha.graphics4.BlendingFactor"/></alphaBlendDestination>
		<alphaBlendOperation public="1"><x path="kha.graphics4.BlendingOperation"/></alphaBlendOperation>
		<colorWriteMask public="1" get="null" set="accessor"><x path="Bool"/></colorWriteMask>
		<colorWriteMaskRed public="1" get="accessor" set="accessor"><x path="Bool"/></colorWriteMaskRed>
		<colorWriteMaskGreen public="1" get="accessor" set="accessor"><x path="Bool"/></colorWriteMaskGreen>
		<colorWriteMaskBlue public="1" get="accessor" set="accessor"><x path="Bool"/></colorWriteMaskBlue>
		<colorWriteMaskAlpha public="1" get="accessor" set="accessor"><x path="Bool"/></colorWriteMaskAlpha>
		<colorWriteMasksRed public="1"><c path="Array"><x path="Bool"/></c></colorWriteMasksRed>
		<colorWriteMasksGreen public="1"><c path="Array"><x path="Bool"/></c></colorWriteMasksGreen>
		<colorWriteMasksBlue public="1"><c path="Array"><x path="Bool"/></c></colorWriteMasksBlue>
		<colorWriteMasksAlpha public="1"><c path="Array"><x path="Bool"/></c></colorWriteMasksAlpha>
		<set_colorWriteMask get="inline" set="null" line="83"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_colorWriteMask>
		<get_colorWriteMaskRed get="inline" set="null" line="87"><f a=""><x path="Bool"/></f></get_colorWriteMaskRed>
		<set_colorWriteMaskRed get="inline" set="null" line="91"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_colorWriteMaskRed>
		<get_colorWriteMaskGreen get="inline" set="null" line="95"><f a=""><x path="Bool"/></f></get_colorWriteMaskGreen>
		<set_colorWriteMaskGreen get="inline" set="null" line="99"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_colorWriteMaskGreen>
		<get_colorWriteMaskBlue get="inline" set="null" line="103"><f a=""><x path="Bool"/></f></get_colorWriteMaskBlue>
		<set_colorWriteMaskBlue get="inline" set="null" line="107"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_colorWriteMaskBlue>
		<get_colorWriteMaskAlpha get="inline" set="null" line="111"><f a=""><x path="Bool"/></f></get_colorWriteMaskAlpha>
		<set_colorWriteMaskAlpha get="inline" set="null" line="115"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_colorWriteMaskAlpha>
		<conservativeRasterization public="1"><x path="Bool"/></conservativeRasterization>
		<new public="1" set="method" line="4"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="kha.graphics4.PipelineState" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/graphics4/PipelineState.hx">
		<extends path="kha.graphics4.PipelineStateBase"/>
		<getBlendFunc set="method" line="159" static="1"><f a="factor">
	<x path="kha.graphics4.BlendingFactor"/>
	<x path="Int"/>
</f></getBlendFunc>
		<_unused1 public="1" set="method" line="239" static="1">
			<f a=""><c path="kha.graphics4.VertexElement"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_unused1>
		<_unused2 public="1" set="method" line="244" static="1">
			<f a=""><x path="kha.graphics4.VertexData"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_unused2>
		<_unused3 public="1" set="method" line="249" static="1">
			<f a=""><c path="kha.graphics4.VertexShader"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_unused3>
		<_unused4 public="1" set="method" line="254" static="1">
			<f a=""><c path="kha.graphics4.FragmentShader"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_unused4>
		<_unused5 public="1" set="method" line="259" static="1">
			<f a=""><c path="kha.graphics4.GeometryShader"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_unused5>
		<_unused6 public="1" set="method" line="264" static="1">
			<f a=""><c path="kha.graphics4.TessellationControlShader"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_unused6>
		<_unused7 public="1" set="method" line="269" static="1">
			<f a=""><c path="kha.graphics4.TessellationEvaluationShader"/></f>
			<meta><m n=":noCompletion"/></meta>
		</_unused7>
		<delete public="1" set="method" line="69">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</delete>
		<linkWithStructures2 set="method" line="118">
			<f a="structure0:structure1:structure2:structure3:size">
				<c path="kha.graphics4.VertexStructure"/>
				<c path="kha.graphics4.VertexStructure"/>
				<c path="kha.graphics4.VertexStructure"/>
				<c path="kha.graphics4.VertexStructure"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tpipeline->vertexShader = vertexShader->shader;\r\n\t\tpipeline->fragmentShader = fragmentShader->shader;\r\n\t\tif (geometryShader != null()) pipeline->geometryShader = geometryShader->shader;\r\n\t\tif (tessellationControlShader != null()) pipeline->tessellationControlShader = tessellationControlShader->shader;\r\n\t\tif (tessellationEvaluationShader != null()) pipeline->tessellationEvaluationShader = tessellationEvaluationShader->shader;\r\n\t\tKore::Graphics4::VertexStructure s0, s1, s2, s3;\r\n\t\tKore::Graphics4::VertexStructure* structures2[4] = { &s0, &s1, &s2, &s3 };\r\n\t\t::kha::graphics4::VertexStructure* structures[4] = { &structure0, &structure1, &structure2, &structure3 };\r\n\t\tfor (int i1 = 0; i1 < size; ++i1) {\r\n\t\t\tstructures2[i1]->instanced = (*structures[i1])->instanced;\r\n\t\t\tfor (int i2 = 0; i2 < (*structures[i1])->size(); ++i2) {\r\n\t\t\t\tKore::Graphics4::VertexData data;\r\n\t\t\t\tswitch ((*structures[i1])->get(i2)->data) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tdata = Kore::Graphics4::Float1VertexData;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tdata = Kore::Graphics4::Float2VertexData;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tdata = Kore::Graphics4::Float3VertexData;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tdata = Kore::Graphics4::Float4VertexData;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tdata = Kore::Graphics4::Float4x4VertexData;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tdata = Kore::Graphics4::Short2NormVertexData;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 6:\r\n\t\t\t\t\tdata = Kore::Graphics4::Short4NormVertexData;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tpipeline->inputLayout[i1] = structures2[i1];\r\n\t\t\t\tpipeline->inputLayout[i1]->add((*structures[i1])->get(i2)->name, data);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (int i = size; i < 16; ++i) {\r\n\t\t\tpipeline->inputLayout[i] = nullptr;\r\n\t\t}\r\n\t\tpipeline->compile();\r\n\t"]]></e></m></meta>
		</linkWithStructures2>
		<compile public="1" set="method" line="122"><f a=""><x path="Void"/></f></compile>
		<getConstantLocation public="1" set="method" line="137"><f a="name">
	<c path="String"/>
	<c path="kha.graphics4.ConstantLocation"/>
</f></getConstantLocation>
		<initConstantLocation set="method" line="144">
			<f a="location:name">
				<c path="kha.kore.graphics4.ConstantLocation"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["location->location = pipeline->getConstantLocation(name.c_str());"]]></e></m></meta>
		</initConstantLocation>
		<getTextureUnit public="1" set="method" line="148"><f a="name">
	<c path="String"/>
	<c path="kha.graphics4.TextureUnit"/>
</f></getTextureUnit>
		<initTextureUnit set="method" line="155">
			<f a="unit:name">
				<c path="kha.kore.graphics4.TextureUnit"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["unit->unit = pipeline->getTextureUnit(name.c_str());"]]></e></m></meta>
		</initTextureUnit>
		<setStates set="method" line="224">
			<f a="cullMode:depthMode:stencilMode:stencilBothPass:stencilDepthFail:stencilFail:depthWrite:stencilReferenceValue:blendSource:blendDestination:alphaBlendSource:alphaBlendDestination">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tswitch (cullMode) {\r\n\t\tcase 0:\r\n\t\t\tpipeline->cullMode = Kore::Graphics4::Clockwise;\r\n\t\t\tbreak;\r\n\t\tcase 1:\r\n\t\t\tpipeline->cullMode = Kore::Graphics4::CounterClockwise;\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\tpipeline->cullMode = Kore::Graphics4::NoCulling;\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tpipeline->depthMode = convertCompareMode(depthMode);\r\n\t\tpipeline->depthWrite = depthWrite;\r\n\r\n\t\tpipeline->stencilMode = convertCompareMode(stencilMode);\r\n\t\tpipeline->stencilBothPass = convertStencilAction(stencilBothPass);\r\n\t\tpipeline->stencilDepthFail = convertStencilAction(stencilDepthFail);\r\n\t\tpipeline->stencilFail = convertStencilAction(stencilFail);\r\n\t\tpipeline->stencilReferenceValue = stencilReferenceValue;\r\n\t\tpipeline->stencilReadMask = stencilReadMask;\r\n\t\tpipeline->stencilWriteMask = stencilWriteMask;\r\n\r\n\t\tpipeline->blendSource = (Kore::Graphics4::BlendingOperation)blendSource;\r\n\t\tpipeline->blendDestination = (Kore::Graphics4::BlendingOperation)blendDestination;\r\n\t\tpipeline->alphaBlendSource = (Kore::Graphics4::BlendingOperation)alphaBlendSource;\r\n\t\tpipeline->alphaBlendDestination = (Kore::Graphics4::BlendingOperation)alphaBlendDestination;\r\n\r\n\t\tfor (int i = 0; i < 8; ++i) {\r\n\t\t\tpipeline->colorWriteMaskRed[i] = colorWriteMasksRed[i];\r\n\t\t\tpipeline->colorWriteMaskGreen[i] = colorWriteMasksGreen[i];\r\n\t\t\tpipeline->colorWriteMaskBlue[i] = colorWriteMasksBlue[i];\r\n\t\t\tpipeline->colorWriteMaskAlpha[i] = colorWriteMasksAlpha[i];\r\n\t\t}\r\n\r\n\t\tpipeline->conservativeRasterization = conservativeRasterization;\r\n\t"]]></e></m></meta>
		</setStates>
		<set2 set="method" line="230">
			<f a=""><x path="Void"/></f>
			<meta><m n=":functionCode"><e>"Kore::Graphics4::setPipeline(pipeline);"</e></m></meta>
		</set2>
		<set public="1" set="method" line="234"><f a=""><x path="Void"/></f></set>
		<new public="1" set="method" line="64">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":headerCode"><e><![CDATA["\r\n#include <Kore/pch.h>\r\n#include <Kore/Graphics4/Graphics.h>\r\n#include <Kore/Graphics4/PipelineState.h>\r\n"]]></e></m>
			<m n=":cppFileCode"><e>"\r\nstatic Kore::Graphics4::ZCompareMode convertCompareMode(int mode) {\r\n\tswitch (mode) {\r\n\tcase 0:\r\n\t\treturn Kore::Graphics4::ZCompareAlways;\r\n\tcase 1:\r\n\t\treturn Kore::Graphics4::ZCompareNever;\r\n\tcase 2:\r\n\t\treturn Kore::Graphics4::ZCompareEqual;\r\n\tcase 3:\r\n\t\treturn Kore::Graphics4::ZCompareNotEqual;\r\n\tcase 4:\r\n\t\treturn Kore::Graphics4::ZCompareLess;\r\n\tcase 5:\r\n\t\treturn Kore::Graphics4::ZCompareLessEqual;\r\n\tcase 6:\r\n\t\treturn Kore::Graphics4::ZCompareGreater;\r\n\tcase 7:\r\n\tdefault:\r\n\t\treturn Kore::Graphics4::ZCompareGreaterEqual;\r\n\t}\r\n}\r\n\r\nstatic Kore::Graphics4::StencilAction convertStencilAction(int action) {\r\n\tswitch (action) {\r\n\tcase 0:\r\n\t\treturn Kore::Graphics4::Keep;\r\n\tcase 1:\r\n\t\treturn Kore::Graphics4::Zero;\r\n\tcase 2:\r\n\t\treturn Kore::Graphics4::Replace;\r\n\tcase 3:\r\n\t\treturn Kore::Graphics4::Increment;\r\n\tcase 4:\r\n\t\treturn Kore::Graphics4::IncrementWrap;\r\n\tcase 5:\r\n\t\treturn Kore::Graphics4::Decrement;\r\n\tcase 6:\r\n\t\treturn Kore::Graphics4::DecrementWrap;\r\n\tcase 7:\r\n\tdefault:\r\n\t\treturn Kore::Graphics4::Invert;\r\n\t}\r\n}\r\n"</e></m>
			<m n=":headerClassCode"><e>"Kore::Graphics4::PipelineState* pipeline;"</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<abstract path="kha.graphics4.StencilAction" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/StencilAction.hx">
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="kha.graphics4._StencilAction.StencilAction_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/StencilAction.hx" private="1" module="kha.graphics4.StencilAction" extern="1">
	<Keep public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
		<x path="kha.graphics4.StencilAction"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Keep>
	<Zero public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
		<x path="kha.graphics4.StencilAction"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Zero>
	<Replace public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
		<x path="kha.graphics4.StencilAction"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Replace>
	<Increment public="1" get="inline" set="null" expr="cast 3" line="7" static="1">
		<x path="kha.graphics4.StencilAction"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Increment>
	<IncrementWrap public="1" get="inline" set="null" expr="cast 4" line="8" static="1">
		<x path="kha.graphics4.StencilAction"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</IncrementWrap>
	<Decrement public="1" get="inline" set="null" expr="cast 5" line="9" static="1">
		<x path="kha.graphics4.StencilAction"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Decrement>
	<DecrementWrap public="1" get="inline" set="null" expr="cast 6" line="10" static="1">
		<x path="kha.graphics4.StencilAction"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DecrementWrap>
	<Invert public="1" get="inline" set="null" expr="cast 7" line="11" static="1">
		<x path="kha.graphics4.StencilAction"/>
		<meta>
			<m n=":value"><e>cast 7</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Invert>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="kha.graphics4._StencilAction.StencilAction_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/StencilAction.hx" private="1" module="kha.graphics4.StencilAction" extern="1">
		<Keep public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
			<x path="kha.graphics4.StencilAction"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Keep>
		<Zero public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
			<x path="kha.graphics4.StencilAction"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Zero>
		<Replace public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
			<x path="kha.graphics4.StencilAction"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Replace>
		<Increment public="1" get="inline" set="null" expr="cast 3" line="7" static="1">
			<x path="kha.graphics4.StencilAction"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Increment>
		<IncrementWrap public="1" get="inline" set="null" expr="cast 4" line="8" static="1">
			<x path="kha.graphics4.StencilAction"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</IncrementWrap>
		<Decrement public="1" get="inline" set="null" expr="cast 5" line="9" static="1">
			<x path="kha.graphics4.StencilAction"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Decrement>
		<DecrementWrap public="1" get="inline" set="null" expr="cast 6" line="10" static="1">
			<x path="kha.graphics4.StencilAction"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DecrementWrap>
		<Invert public="1" get="inline" set="null" expr="cast 7" line="11" static="1">
			<x path="kha.graphics4.StencilAction"/>
			<meta>
				<m n=":value"><e>cast 7</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Invert>
		<meta><m n=":enum"/></meta>
	</class>
	<enum path="kha.graphics4.StencilValue" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/StencilValue.hx">
		<Dynamic/>
		<Static a="value"><x path="Int"/></Static>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="kha.graphics4.TessellationControlShader" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/graphics4/TessellationControlShader.hx">
		<init set="method" line="17">
			<f a="source:file">
				<t path="kha.Blob"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</init>
		<delete public="1" set="method" line="21">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</delete>
		<_forceInclude set="method" line="26">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</_forceInclude>
		<new public="1" set="method" line="13"><f a="sources:files">
	<c path="Array"><t path="kha.Blob"/></c>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":headerCode"><e><![CDATA["\n#include <Kore/pch.h>\n#include <Kore/Graphics4/Graphics.h>\n"]]></e></m>
			<m n=":headerClassCode"><e>"Kore::Graphics4::Shader* shader;"</e></m>
		</meta>
	</class>
	<class path="kha.graphics4.TessellationEvaluationShader" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/graphics4/TessellationEvaluationShader.hx">
		<init set="method" line="17">
			<f a="source:file">
				<t path="kha.Blob"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</init>
		<delete public="1" set="method" line="21">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</delete>
		<_forceInclude set="method" line="26">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</_forceInclude>
		<new public="1" set="method" line="13"><f a="sources:files">
	<c path="Array"><t path="kha.Blob"/></c>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":headerCode"><e><![CDATA["\n#include <Kore/pch.h>\n#include <Kore/Graphics4/Graphics.h>\n"]]></e></m>
			<m n=":headerClassCode"><e>"Kore::Graphics4::Shader* shader;"</e></m>
		</meta>
	</class>
	<abstract path="kha.graphics4.TexDir" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/TexDir.hx">
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="kha.graphics4._TexDir.TexDir_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/TexDir.hx" private="1" module="kha.graphics4.TexDir" extern="1">
	<U public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
		<x path="kha.graphics4.TexDir"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</U>
	<V public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
		<x path="kha.graphics4.TexDir"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</V>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="kha.graphics4._TexDir.TexDir_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/TexDir.hx" private="1" module="kha.graphics4.TexDir" extern="1">
		<U public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
			<x path="kha.graphics4.TexDir"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</U>
		<V public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
			<x path="kha.graphics4.TexDir"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</V>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="kha.graphics4.TextureAddressing" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/TextureAddressing.hx">
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="kha.graphics4._TextureAddressing.TextureAddressing_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/TextureAddressing.hx" private="1" module="kha.graphics4.TextureAddressing" extern="1">
	<Repeat public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
		<x path="kha.graphics4.TextureAddressing"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Repeat>
	<Mirror public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
		<x path="kha.graphics4.TextureAddressing"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Mirror>
	<Clamp public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
		<x path="kha.graphics4.TextureAddressing"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Clamp>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="kha.graphics4._TextureAddressing.TextureAddressing_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/TextureAddressing.hx" private="1" module="kha.graphics4.TextureAddressing" extern="1">
		<Repeat public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
			<x path="kha.graphics4.TextureAddressing"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Repeat>
		<Mirror public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
			<x path="kha.graphics4.TextureAddressing"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Mirror>
		<Clamp public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
			<x path="kha.graphics4.TextureAddressing"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Clamp>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="kha.graphics4.TextureFilter" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/TextureFilter.hx">
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="kha.graphics4._TextureFilter.TextureFilter_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/TextureFilter.hx" private="1" module="kha.graphics4.TextureFilter" extern="1">
	<PointFilter public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
		<x path="kha.graphics4.TextureFilter"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PointFilter>
	<LinearFilter public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
		<x path="kha.graphics4.TextureFilter"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LinearFilter>
	<AnisotropicFilter public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
		<x path="kha.graphics4.TextureFilter"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AnisotropicFilter>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="kha.graphics4._TextureFilter.TextureFilter_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/TextureFilter.hx" private="1" module="kha.graphics4.TextureFilter" extern="1">
		<PointFilter public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
			<x path="kha.graphics4.TextureFilter"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PointFilter>
		<LinearFilter public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
			<x path="kha.graphics4.TextureFilter"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LinearFilter>
		<AnisotropicFilter public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
			<x path="kha.graphics4.TextureFilter"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AnisotropicFilter>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="kha.graphics4.TextureFormat" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/TextureFormat.hx">
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="kha.graphics4._TextureFormat.TextureFormat_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/TextureFormat.hx" private="1" module="kha.graphics4.TextureFormat" extern="1">
	<RGBA32 public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
		<x path="kha.graphics4.TextureFormat"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RGBA32>
	<L8 public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
		<x path="kha.graphics4.TextureFormat"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</L8>
	<RGBA128 public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
		<x path="kha.graphics4.TextureFormat"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RGBA128>
	<DEPTH16 public="1" get="inline" set="null" expr="cast 3" line="7" static="1">
		<x path="kha.graphics4.TextureFormat"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DEPTH16>
	<RGBA64 public="1" get="inline" set="null" expr="cast 4" line="8" static="1">
		<x path="kha.graphics4.TextureFormat"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</RGBA64>
	<A32 public="1" get="inline" set="null" expr="cast 5" line="9" static="1">
		<x path="kha.graphics4.TextureFormat"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</A32>
	<A16 public="1" get="inline" set="null" expr="cast 6" line="10" static="1">
		<x path="kha.graphics4.TextureFormat"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</A16>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="kha.graphics4._TextureFormat.TextureFormat_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/TextureFormat.hx" private="1" module="kha.graphics4.TextureFormat" extern="1">
		<RGBA32 public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
			<x path="kha.graphics4.TextureFormat"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RGBA32>
		<L8 public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
			<x path="kha.graphics4.TextureFormat"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</L8>
		<RGBA128 public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
			<x path="kha.graphics4.TextureFormat"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RGBA128>
		<DEPTH16 public="1" get="inline" set="null" expr="cast 3" line="7" static="1">
			<x path="kha.graphics4.TextureFormat"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DEPTH16>
		<RGBA64 public="1" get="inline" set="null" expr="cast 4" line="8" static="1">
			<x path="kha.graphics4.TextureFormat"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</RGBA64>
		<A32 public="1" get="inline" set="null" expr="cast 5" line="9" static="1">
			<x path="kha.graphics4.TextureFormat"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</A32>
		<A16 public="1" get="inline" set="null" expr="cast 6" line="10" static="1">
			<x path="kha.graphics4.TextureFormat"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</A16>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="kha.graphics4.TextureUnit" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/TextureUnit.hx" interface="1"/>
	<abstract path="kha.graphics4.Usage" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/Usage.hx">
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="kha.graphics4._Usage.Usage_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/Usage.hx" private="1" module="kha.graphics4.Usage" extern="1">
	<StaticUsage public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
		<x path="kha.graphics4.Usage"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</StaticUsage>
	<DynamicUsage public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
		<x path="kha.graphics4.Usage"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DynamicUsage>
	<ReadableUsage public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
		<x path="kha.graphics4.Usage"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ReadableUsage>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="kha.graphics4._Usage.Usage_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/Usage.hx" private="1" module="kha.graphics4.Usage" extern="1">
		<StaticUsage public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
			<x path="kha.graphics4.Usage"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</StaticUsage>
		<DynamicUsage public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
			<x path="kha.graphics4.Usage"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DynamicUsage>
		<ReadableUsage public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
			<x path="kha.graphics4.Usage"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ReadableUsage>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="kha.graphics4.VertexBuffer" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/graphics4/VertexBuffer.hx">
		<_unused1 public="1" set="method" line="118" static="1">
			<f a=""><c path="kha.graphics4.VertexElement"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</_unused1>
		<_unused2 public="1" set="method" line="124" static="1">
			<f a=""><x path="kha.graphics4.VertexData"/></f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":keep"/>
			</meta>
		</_unused2>
		<data><x path="kha.arrays.Float32Array"/></data>
		<dataInt16>
			<x path="kha.arrays.Int16Array"/>
			<meta><m n=":keep"/></meta>
		</dataInt16>
		<delete public="1" set="method" line="24">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</delete>
		<init set="method" line="59">
			<f a="vertexCount:structure:usage:instanceDataStepRate">
				<x path="Int"/>
				<c path="kha.graphics4.VertexStructure"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tKore::Graphics4::VertexStructure structure2;\r\n\t\tfor (int i = 0; i < structure->size(); ++i) {\r\n\t\t\tKore::Graphics4::VertexData data;\r\n\t\t\tswitch (structure->get(i)->data) {\r\n\t\t\tcase 0:\r\n\t\t\t\tdata = Kore::Graphics4::Float1VertexData;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tdata = Kore::Graphics4::Float2VertexData;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tdata = Kore::Graphics4::Float3VertexData;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tdata = Kore::Graphics4::Float4VertexData;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\tdata = Kore::Graphics4::Float4x4VertexData;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5:\r\n\t\t\t\tdata = Kore::Graphics4::Short2NormVertexData;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 6:\r\n\t\t\t\tdata = Kore::Graphics4::Short4NormVertexData;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tstructure2.add(structure->get(i)->name, data);\r\n\t\t}\r\n\t\tbuffer = new Kore::Graphics4::VertexBuffer(vertexCount, structure2, (Kore::Graphics4::Usage)usage, instanceDataStepRate);\r\n\t"]]></e></m></meta>
		</init>
		<lockPrivate set="method" line="68">
			<f a="start:count">
				<x path="Int"/>
				<x path="Int"/>
				<x path="kha.arrays.Float32Array"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tdata->self.data = buffer->lock() + start * buffer->stride() / 4;\r\n\t\tdata->self.myLength = count * buffer->stride() / 4;\r\n\t\treturn data;\r\n\t"]]></e></m></meta>
		</lockPrivate>
		<lastLockCount expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</lastLockCount>
		<lock public="1" set="method" line="74"><f a="?start:?count">
	<x path="Int"/>
	<x path="Int"/>
	<x path="kha.arrays.Float32Array"/>
</f></lock>
		<lockInt16Private set="method" line="86">
			<f a="start:count">
				<x path="Int"/>
				<x path="Int"/>
				<x path="kha.arrays.Int16Array"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tdataInt16->self.data = (short*)buffer->lock() + start * buffer->stride() / 2;\r\n\t\tdataInt16->self.myLength = count * buffer->stride() / 2;\r\n\t\treturn dataInt16;\r\n\t"]]></e></m></meta>
		</lockInt16Private>
		<lockInt16 public="1" set="method" line="90"><f a="?start:?count">
	<x path="Int"/>
	<x path="Int"/>
	<x path="kha.arrays.Int16Array"/>
</f></lockInt16>
		<unlockPrivate set="method" line="98">
			<f a="count">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["buffer->unlock(count); data->self.data = nullptr; if (!hx::IsNull(dataInt16)) dataInt16->self.data = nullptr;"]]></e></m></meta>
		</unlockPrivate>
		<unlock public="1" set="method" line="102"><f a="?count">
	<x path="Int"/>
	<x path="Void"/>
</f></unlock>
		<stride public="1" set="method" line="107">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e><![CDATA["return buffer->stride();"]]></e></m></meta>
		</stride>
		<count public="1" set="method" line="112">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e><![CDATA["return buffer->count();"]]></e></m></meta>
		</count>
		<new public="1" set="method" line="19">
			<f a="vertexCount:structure:usage:?instanceDataStepRate:?canRead" v=":::0:false">
				<x path="Int"/>
				<c path="kha.graphics4.VertexStructure"/>
				<x path="kha.graphics4.Usage"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ canRead : false, instanceDataStepRate : 0 }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":headerCode"><e><![CDATA["\r\n#include <Kore/pch.h>\r\n#include <Kore/Graphics4/Graphics.h>\r\n"]]></e></m>
			<m n=":headerClassCode"><e>"Kore::Graphics4::VertexBuffer* buffer;"</e></m>
		</meta>
	</class>
	<abstract path="kha.graphics4.VertexData" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/VertexData.hx">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="kha.graphics4._VertexData.VertexData_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/VertexData.hx" private="1" module="kha.graphics4.VertexData" extern="1">
	<Float1 public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
		<x path="kha.graphics4.VertexData"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Float1>
	<Float2 public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
		<x path="kha.graphics4.VertexData"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Float2>
	<Float3 public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
		<x path="kha.graphics4.VertexData"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Float3>
	<Float4 public="1" get="inline" set="null" expr="cast 3" line="7" static="1">
		<x path="kha.graphics4.VertexData"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Float4>
	<Float4x4 public="1" get="inline" set="null" expr="cast 4" line="8" static="1">
		<x path="kha.graphics4.VertexData"/>
		<meta>
			<m n=":value"><e>cast 4</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Float4x4>
	<Short2Norm public="1" get="inline" set="null" expr="cast 5" line="9" static="1">
		<x path="kha.graphics4.VertexData"/>
		<meta>
			<m n=":value"><e>cast 5</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Short2Norm>
	<Short4Norm public="1" get="inline" set="null" expr="cast 6" line="10" static="1">
		<x path="kha.graphics4.VertexData"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Short4Norm>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="kha.graphics4._VertexData.VertexData_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/VertexData.hx" private="1" module="kha.graphics4.VertexData" extern="1">
		<Float1 public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
			<x path="kha.graphics4.VertexData"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Float1>
		<Float2 public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
			<x path="kha.graphics4.VertexData"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Float2>
		<Float3 public="1" get="inline" set="null" expr="cast 2" line="6" static="1">
			<x path="kha.graphics4.VertexData"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Float3>
		<Float4 public="1" get="inline" set="null" expr="cast 3" line="7" static="1">
			<x path="kha.graphics4.VertexData"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Float4>
		<Float4x4 public="1" get="inline" set="null" expr="cast 4" line="8" static="1">
			<x path="kha.graphics4.VertexData"/>
			<meta>
				<m n=":value"><e>cast 4</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Float4x4>
		<Short2Norm public="1" get="inline" set="null" expr="cast 5" line="9" static="1">
			<x path="kha.graphics4.VertexData"/>
			<meta>
				<m n=":value"><e>cast 5</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Short2Norm>
		<Short4Norm public="1" get="inline" set="null" expr="cast 6" line="10" static="1">
			<x path="kha.graphics4.VertexData"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Short4Norm>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="kha.graphics4.VertexElement" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/VertexElement.hx">
		<name public="1"><c path="String"/></name>
		<data public="1"><x path="kha.graphics4.VertexData"/></data>
		<new public="1" set="method" line="7"><f a="name:data">
	<c path="String"/>
	<x path="kha.graphics4.VertexData"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.graphics4.VertexShader" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/graphics4/VertexShader.hx">
		<fromSource public="1" set="method" line="23" static="1">
			<f a="source">
				<c path="String"/>
				<c path="kha.graphics4.VertexShader"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</fromSource>
		<init set="method" line="19">
			<f a="source:file">
				<t path="kha.Blob"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</init>
		<delete public="1" set="method" line="29">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</delete>
		<_forceInclude set="method" line="34">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</_forceInclude>
		<new public="1" set="method" line="13"><f a="sources:files">
	<c path="Array"><t path="kha.Blob"/></c>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":headerCode"><e><![CDATA["\r\n#include <Kore/pch.h>\r\n#include <Kore/Graphics4/Graphics.h>\r\n"]]></e></m>
			<m n=":headerClassCode"><e>"Kore::Graphics4::Shader* shader;"</e></m>
		</meta>
	</class>
	<class path="kha.graphics4.VertexStructure" params="" file="C:\HaxeLibraries\Kha\Sources/kha/graphics4/VertexStructure.hx">
		<elements public="1"><c path="Array"><c path="kha.graphics4.VertexElement"/></c></elements>
		<instanced public="1"><x path="Bool"/></instanced>
		<add public="1" set="method" line="12"><f a="name:data">
	<c path="String"/>
	<x path="kha.graphics4.VertexData"/>
	<x path="Void"/>
</f></add>
		<size public="1" set="method" line="17">
			<f a=""><x path="Int"/></f>
			<meta><m n=":keep"/></meta>
		</size>
		<byteSize public="1" set="method" line="21"><f a=""><x path="Int"/></f></byteSize>
		<dataByteSize set="method" line="31"><f a="data">
	<x path="kha.graphics4.VertexData"/>
	<x path="Int"/>
</f></dataByteSize>
		<get public="1" set="method" line="52">
			<f a="index">
				<x path="Int"/>
				<c path="kha.graphics4.VertexElement"/>
			</f>
			<meta><m n=":keep"/></meta>
		</get>
		<new public="1" set="method" line="7"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.input.Gamepad" params="" file="C:\HaxeLibraries\Kha\Sources/kha/input/Gamepad.hx">
		<get public="1" set="method" line="8" static="1">
			<f a="?index" v="0">
				<x path="Int"/>
				<c path="kha.input.Gamepad"/>
			</f>
			<meta><m n=":value"><e>{ index : 0 }</e></m></meta>
		</get>
		<notifyOnConnect public="1" set="method" line="13" static="1"><f a="connectListener:disconnectListener">
	<f a="">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<f a="">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></notifyOnConnect>
		<removeConnect public="1" set="method" line="18" static="1"><f a="connectListener:disconnectListener">
	<f a="">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<f a="">
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></removeConnect>
		<instances expr="new Array()" line="33" static="1">
			<c path="Array"><c path="kha.input.Gamepad"/></c>
			<meta><m n=":value"><e>new Array()</e></m></meta>
		</instances>
		<connectListeners expr="new Array()" line="36" static="1">
			<c path="Array"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e>new Array()</e></m></meta>
		</connectListeners>
		<disconnectListeners expr="new Array()" line="37" static="1">
			<c path="Array"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e>new Array()</e></m></meta>
		</disconnectListeners>
		<sendConnectEvent set="method" line="74" static="1">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n="input"/></meta>
		</sendConnectEvent>
		<sendDisconnectEvent set="method" line="82" static="1">
			<f a="index">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n="input"/></meta>
		</sendDisconnectEvent>
		<index><x path="Int"/></index>
		<notify public="1" set="method" line="23"><f a="axisListener:buttonListener">
	<f a=":">
		<x path="Int"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<f a=":">
		<x path="Int"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></notify>
		<remove public="1" set="method" line="28"><f a="axisListener:buttonListener">
	<f a=":">
		<x path="Int"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<f a=":">
		<x path="Int"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></remove>
		<axisListeners><c path="Array"><f a=":">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></c></axisListeners>
		<buttonListeners><c path="Array"><f a=":">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></c></buttonListeners>
		<id public="1" get="accessor" set="null"><c path="String"/></id>
		<vendor public="1" get="accessor" set="null"><c path="String"/></vendor>
		<connected public="1" set="null"><x path="Bool"/></connected>
		<get_id set="method" line="51"><f a=""><c path="String"/></f></get_id>
		<get_vendor set="method" line="55"><f a=""><c path="String"/></f></get_vendor>
		<sendAxisEvent set="method" line="60">
			<f a="axis:value">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n="input"/></meta>
		</sendAxisEvent>
		<sendButtonEvent set="method" line="67">
			<f a="button:value">
				<x path="Int"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n="input"/></meta>
		</sendButtonEvent>
		<new set="method" line="39">
			<f a="?index:?id" v="0:&quot;unknown&quot;">
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ id : "unknown", index : 0 }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>kha.SystemImpl</e></m>
			<m n=":expose"/>
		</meta>
	</class>
	<abstract path="kha.input.KeyCode" params="" file="C:\HaxeLibraries\Kha\Sources/kha/input/KeyCode.hx">
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="kha.input._KeyCode.KeyCode_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/input/KeyCode.hx" private="1" module="kha.input.KeyCode" extern="1">
	<Unknown public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Unknown>
	<Back public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Back>
	<Cancel public="1" get="inline" set="null" expr="cast 3" line="6" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Cancel>
	<Help public="1" get="inline" set="null" expr="cast 6" line="7" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 6</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Help>
	<Backspace public="1" get="inline" set="null" expr="cast 8" line="8" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 8</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Backspace>
	<Tab public="1" get="inline" set="null" expr="cast 9" line="9" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 9</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Tab>
	<Clear public="1" get="inline" set="null" expr="cast 12" line="10" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 12</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Clear>
	<Return public="1" get="inline" set="null" expr="cast 13" line="11" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 13</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Return>
	<Shift public="1" get="inline" set="null" expr="cast 16" line="12" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 16</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Shift>
	<Control public="1" get="inline" set="null" expr="cast 17" line="13" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 17</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Control>
	<Alt public="1" get="inline" set="null" expr="cast 18" line="14" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 18</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Alt>
	<Pause public="1" get="inline" set="null" expr="cast 19" line="15" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 19</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Pause>
	<CapsLock public="1" get="inline" set="null" expr="cast 20" line="16" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 20</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CapsLock>
	<Kana public="1" get="inline" set="null" expr="cast 21" line="17" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 21</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Kana>
	<Hangul public="1" get="inline" set="null" expr="cast 21" line="18" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 21</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Hangul>
	<Eisu public="1" get="inline" set="null" expr="cast 22" line="19" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 22</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Eisu>
	<Junja public="1" get="inline" set="null" expr="cast 23" line="20" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 23</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Junja>
	<Final public="1" get="inline" set="null" expr="cast 24" line="21" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 24</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Final>
	<Hanja public="1" get="inline" set="null" expr="cast 25" line="22" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 25</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Hanja>
	<Kanji public="1" get="inline" set="null" expr="cast 25" line="23" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 25</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Kanji>
	<Escape public="1" get="inline" set="null" expr="cast 27" line="24" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 27</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Escape>
	<Convert public="1" get="inline" set="null" expr="cast 28" line="25" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 28</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Convert>
	<NonConvert public="1" get="inline" set="null" expr="cast 29" line="26" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 29</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NonConvert>
	<Accept public="1" get="inline" set="null" expr="cast 30" line="27" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 30</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Accept>
	<ModeChange public="1" get="inline" set="null" expr="cast 31" line="28" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 31</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ModeChange>
	<Space public="1" get="inline" set="null" expr="cast 32" line="29" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 32</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Space>
	<PageUp public="1" get="inline" set="null" expr="cast 33" line="30" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 33</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PageUp>
	<PageDown public="1" get="inline" set="null" expr="cast 34" line="31" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 34</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PageDown>
	<End public="1" get="inline" set="null" expr="cast 35" line="32" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 35</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</End>
	<Home public="1" get="inline" set="null" expr="cast 36" line="33" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 36</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Home>
	<Left public="1" get="inline" set="null" expr="cast 37" line="34" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 37</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Left>
	<Up public="1" get="inline" set="null" expr="cast 38" line="35" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 38</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Up>
	<Right public="1" get="inline" set="null" expr="cast 39" line="36" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 39</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Right>
	<Down public="1" get="inline" set="null" expr="cast 40" line="37" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 40</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Down>
	<Select public="1" get="inline" set="null" expr="cast 41" line="38" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 41</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Select>
	<Print public="1" get="inline" set="null" expr="cast 42" line="39" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 42</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Print>
	<Execute public="1" get="inline" set="null" expr="cast 43" line="40" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 43</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Execute>
	<PrintScreen public="1" get="inline" set="null" expr="cast 44" line="41" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 44</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PrintScreen>
	<Insert public="1" get="inline" set="null" expr="cast 45" line="42" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 45</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Insert>
	<Delete public="1" get="inline" set="null" expr="cast 46" line="43" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 46</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Delete>
	<Zero public="1" get="inline" set="null" expr="cast 48" line="44" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 48</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Zero>
	<One public="1" get="inline" set="null" expr="cast 49" line="45" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 49</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</One>
	<Two public="1" get="inline" set="null" expr="cast 50" line="46" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 50</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Two>
	<Three public="1" get="inline" set="null" expr="cast 51" line="47" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 51</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Three>
	<Four public="1" get="inline" set="null" expr="cast 52" line="48" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 52</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Four>
	<Five public="1" get="inline" set="null" expr="cast 53" line="49" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 53</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Five>
	<Six public="1" get="inline" set="null" expr="cast 54" line="50" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 54</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Six>
	<Seven public="1" get="inline" set="null" expr="cast 55" line="51" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 55</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Seven>
	<Eight public="1" get="inline" set="null" expr="cast 56" line="52" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 56</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Eight>
	<Nine public="1" get="inline" set="null" expr="cast 57" line="53" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 57</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Nine>
	<Colon public="1" get="inline" set="null" expr="cast 58" line="54" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 58</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Colon>
	<Semicolon public="1" get="inline" set="null" expr="cast 59" line="55" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 59</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Semicolon>
	<LessThan public="1" get="inline" set="null" expr="cast 60" line="56" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 60</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</LessThan>
	<Equals public="1" get="inline" set="null" expr="cast 61" line="57" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 61</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Equals>
	<GreaterThan public="1" get="inline" set="null" expr="cast 62" line="58" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 62</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</GreaterThan>
	<QuestionMark public="1" get="inline" set="null" expr="cast 63" line="59" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 63</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</QuestionMark>
	<At public="1" get="inline" set="null" expr="cast 64" line="60" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 64</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</At>
	<A public="1" get="inline" set="null" expr="cast 65" line="61" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 65</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</A>
	<B public="1" get="inline" set="null" expr="cast 66" line="62" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 66</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</B>
	<C public="1" get="inline" set="null" expr="cast 67" line="63" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 67</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</C>
	<D public="1" get="inline" set="null" expr="cast 68" line="64" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 68</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</D>
	<E public="1" get="inline" set="null" expr="cast 69" line="65" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 69</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</E>
	<F public="1" get="inline" set="null" expr="cast 70" line="66" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 70</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F>
	<G public="1" get="inline" set="null" expr="cast 71" line="67" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 71</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</G>
	<H public="1" get="inline" set="null" expr="cast 72" line="68" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 72</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</H>
	<I public="1" get="inline" set="null" expr="cast 73" line="69" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 73</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</I>
	<J public="1" get="inline" set="null" expr="cast 74" line="70" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 74</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</J>
	<K public="1" get="inline" set="null" expr="cast 75" line="71" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 75</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</K>
	<L public="1" get="inline" set="null" expr="cast 76" line="72" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 76</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</L>
	<M public="1" get="inline" set="null" expr="cast 77" line="73" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 77</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</M>
	<N public="1" get="inline" set="null" expr="cast 78" line="74" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 78</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</N>
	<O public="1" get="inline" set="null" expr="cast 79" line="75" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 79</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</O>
	<P public="1" get="inline" set="null" expr="cast 80" line="76" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 80</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</P>
	<Q public="1" get="inline" set="null" expr="cast 81" line="77" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 81</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Q>
	<R public="1" get="inline" set="null" expr="cast 82" line="78" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 82</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</R>
	<S public="1" get="inline" set="null" expr="cast 83" line="79" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 83</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</S>
	<T public="1" get="inline" set="null" expr="cast 84" line="80" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 84</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</T>
	<U public="1" get="inline" set="null" expr="cast 85" line="81" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 85</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</U>
	<V public="1" get="inline" set="null" expr="cast 86" line="82" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 86</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</V>
	<W public="1" get="inline" set="null" expr="cast 87" line="83" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 87</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</W>
	<X public="1" get="inline" set="null" expr="cast 88" line="84" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 88</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</X>
	<Y public="1" get="inline" set="null" expr="cast 89" line="85" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 89</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Y>
	<Z public="1" get="inline" set="null" expr="cast 90" line="86" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 90</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Z>
	<Win public="1" get="inline" set="null" expr="cast 91" line="87" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 91</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Win>
	<ContextMenu public="1" get="inline" set="null" expr="cast 93" line="88" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 93</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ContextMenu>
	<Sleep public="1" get="inline" set="null" expr="cast 95" line="89" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 95</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Sleep>
	<Numpad0 public="1" get="inline" set="null" expr="cast 96" line="90" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 96</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Numpad0>
	<Numpad1 public="1" get="inline" set="null" expr="cast 97" line="91" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 97</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Numpad1>
	<Numpad2 public="1" get="inline" set="null" expr="cast 98" line="92" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 98</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Numpad2>
	<Numpad3 public="1" get="inline" set="null" expr="cast 99" line="93" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 99</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Numpad3>
	<Numpad4 public="1" get="inline" set="null" expr="cast 100" line="94" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 100</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Numpad4>
	<Numpad5 public="1" get="inline" set="null" expr="cast 101" line="95" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 101</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Numpad5>
	<Numpad6 public="1" get="inline" set="null" expr="cast 102" line="96" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 102</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Numpad6>
	<Numpad7 public="1" get="inline" set="null" expr="cast 103" line="97" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 103</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Numpad7>
	<Numpad8 public="1" get="inline" set="null" expr="cast 104" line="98" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 104</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Numpad8>
	<Numpad9 public="1" get="inline" set="null" expr="cast 105" line="99" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 105</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Numpad9>
	<Multiply public="1" get="inline" set="null" expr="cast 106" line="100" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 106</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Multiply>
	<Add public="1" get="inline" set="null" expr="cast 107" line="101" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 107</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Add>
	<Separator public="1" get="inline" set="null" expr="cast 108" line="102" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 108</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Separator>
	<Subtract public="1" get="inline" set="null" expr="cast 109" line="103" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 109</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Subtract>
	<Decimal public="1" get="inline" set="null" expr="cast 110" line="104" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 110</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Decimal>
	<Divide public="1" get="inline" set="null" expr="cast 111" line="105" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 111</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Divide>
	<F1 public="1" get="inline" set="null" expr="cast 112" line="106" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 112</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F1>
	<F2 public="1" get="inline" set="null" expr="cast 113" line="107" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 113</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F2>
	<F3 public="1" get="inline" set="null" expr="cast 114" line="108" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 114</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F3>
	<F4 public="1" get="inline" set="null" expr="cast 115" line="109" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 115</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F4>
	<F5 public="1" get="inline" set="null" expr="cast 116" line="110" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 116</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F5>
	<F6 public="1" get="inline" set="null" expr="cast 117" line="111" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 117</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F6>
	<F7 public="1" get="inline" set="null" expr="cast 118" line="112" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 118</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F7>
	<F8 public="1" get="inline" set="null" expr="cast 119" line="113" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 119</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F8>
	<F9 public="1" get="inline" set="null" expr="cast 120" line="114" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 120</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F9>
	<F10 public="1" get="inline" set="null" expr="cast 121" line="115" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 121</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F10>
	<F11 public="1" get="inline" set="null" expr="cast 122" line="116" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 122</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F11>
	<F12 public="1" get="inline" set="null" expr="cast 123" line="117" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 123</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F12>
	<F13 public="1" get="inline" set="null" expr="cast 124" line="118" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 124</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F13>
	<F14 public="1" get="inline" set="null" expr="cast 125" line="119" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 125</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F14>
	<F15 public="1" get="inline" set="null" expr="cast 126" line="120" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 126</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F15>
	<F16 public="1" get="inline" set="null" expr="cast 127" line="121" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 127</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F16>
	<F17 public="1" get="inline" set="null" expr="cast 128" line="122" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 128</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F17>
	<F18 public="1" get="inline" set="null" expr="cast 129" line="123" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 129</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F18>
	<F19 public="1" get="inline" set="null" expr="cast 130" line="124" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 130</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F19>
	<F20 public="1" get="inline" set="null" expr="cast 131" line="125" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 131</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F20>
	<F21 public="1" get="inline" set="null" expr="cast 132" line="126" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 132</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F21>
	<F22 public="1" get="inline" set="null" expr="cast 133" line="127" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 133</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F22>
	<F23 public="1" get="inline" set="null" expr="cast 134" line="128" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 134</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F23>
	<F24 public="1" get="inline" set="null" expr="cast 135" line="129" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 135</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</F24>
	<NumLock public="1" get="inline" set="null" expr="cast 144" line="130" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 144</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NumLock>
	<ScrollLock public="1" get="inline" set="null" expr="cast 145" line="131" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 145</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ScrollLock>
	<WinOemFjJisho public="1" get="inline" set="null" expr="cast 146" line="132" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 146</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WinOemFjJisho>
	<WinOemFjMasshou public="1" get="inline" set="null" expr="cast 147" line="133" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 147</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WinOemFjMasshou>
	<WinOemFjTouroku public="1" get="inline" set="null" expr="cast 148" line="134" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 148</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WinOemFjTouroku>
	<WinOemFjLoya public="1" get="inline" set="null" expr="cast 149" line="135" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 149</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WinOemFjLoya>
	<WinOemFjRoya public="1" get="inline" set="null" expr="cast 150" line="136" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 150</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WinOemFjRoya>
	<Circumflex public="1" get="inline" set="null" expr="cast 160" line="137" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 160</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Circumflex>
	<Exclamation public="1" get="inline" set="null" expr="cast 161" line="138" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 161</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Exclamation>
	<DoubleQuote public="1" get="inline" set="null" expr="cast 162" line="139" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 162</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DoubleQuote>
	<Hash public="1" get="inline" set="null" expr="cast 163" line="140" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 163</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Hash>
	<Dollar public="1" get="inline" set="null" expr="cast 164" line="141" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 164</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Dollar>
	<Percent public="1" get="inline" set="null" expr="cast 165" line="142" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 165</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Percent>
	<Ampersand public="1" get="inline" set="null" expr="cast 166" line="143" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 166</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Ampersand>
	<Underscore public="1" get="inline" set="null" expr="cast 167" line="144" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 167</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Underscore>
	<OpenParen public="1" get="inline" set="null" expr="cast 168" line="145" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 168</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpenParen>
	<CloseParen public="1" get="inline" set="null" expr="cast 169" line="146" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 169</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CloseParen>
	<Asterisk public="1" get="inline" set="null" expr="cast 170" line="147" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 170</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Asterisk>
	<Plus public="1" get="inline" set="null" expr="cast 171" line="148" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 171</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Plus>
	<Pipe public="1" get="inline" set="null" expr="cast 172" line="149" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 172</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Pipe>
	<HyphenMinus public="1" get="inline" set="null" expr="cast 173" line="150" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 173</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HyphenMinus>
	<OpenCurlyBracket public="1" get="inline" set="null" expr="cast 174" line="151" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 174</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpenCurlyBracket>
	<CloseCurlyBracket public="1" get="inline" set="null" expr="cast 175" line="152" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 175</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CloseCurlyBracket>
	<Tilde public="1" get="inline" set="null" expr="cast 176" line="153" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 176</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Tilde>
	<VolumeMute public="1" get="inline" set="null" expr="cast 181" line="154" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 181</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VolumeMute>
	<VolumeDown public="1" get="inline" set="null" expr="cast 182" line="155" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 182</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VolumeDown>
	<VolumeUp public="1" get="inline" set="null" expr="cast 183" line="156" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 183</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</VolumeUp>
	<Comma public="1" get="inline" set="null" expr="cast 188" line="157" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 188</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Comma>
	<Period public="1" get="inline" set="null" expr="cast 190" line="158" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 190</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Period>
	<Slash public="1" get="inline" set="null" expr="cast 191" line="159" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 191</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Slash>
	<BackQuote public="1" get="inline" set="null" expr="cast 192" line="160" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 192</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BackQuote>
	<OpenBracket public="1" get="inline" set="null" expr="cast 219" line="161" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 219</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OpenBracket>
	<BackSlash public="1" get="inline" set="null" expr="cast 220" line="162" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 220</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BackSlash>
	<CloseBracket public="1" get="inline" set="null" expr="cast 221" line="163" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 221</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CloseBracket>
	<Quote public="1" get="inline" set="null" expr="cast 222" line="164" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 222</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Quote>
	<Meta public="1" get="inline" set="null" expr="cast 224" line="165" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 224</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Meta>
	<AltGr public="1" get="inline" set="null" expr="cast 225" line="166" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 225</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AltGr>
	<WinIcoHelp public="1" get="inline" set="null" expr="cast 227" line="167" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 227</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WinIcoHelp>
	<WinIco00 public="1" get="inline" set="null" expr="cast 228" line="168" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 228</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WinIco00>
	<WinIcoClear public="1" get="inline" set="null" expr="cast 230" line="169" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 230</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WinIcoClear>
	<WinOemReset public="1" get="inline" set="null" expr="cast 233" line="170" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 233</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WinOemReset>
	<WinOemJump public="1" get="inline" set="null" expr="cast 234" line="171" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 234</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WinOemJump>
	<WinOemPA1 public="1" get="inline" set="null" expr="cast 235" line="172" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 235</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WinOemPA1>
	<WinOemPA2 public="1" get="inline" set="null" expr="cast 236" line="173" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 236</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WinOemPA2>
	<WinOemPA3 public="1" get="inline" set="null" expr="cast 237" line="174" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 237</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WinOemPA3>
	<WinOemWSCTRL public="1" get="inline" set="null" expr="cast 238" line="175" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 238</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WinOemWSCTRL>
	<WinOemCUSEL public="1" get="inline" set="null" expr="cast 239" line="176" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 239</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WinOemCUSEL>
	<WinOemATTN public="1" get="inline" set="null" expr="cast 240" line="177" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 240</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WinOemATTN>
	<WinOemFinish public="1" get="inline" set="null" expr="cast 241" line="178" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 241</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WinOemFinish>
	<WinOemCopy public="1" get="inline" set="null" expr="cast 242" line="179" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 242</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WinOemCopy>
	<WinOemAuto public="1" get="inline" set="null" expr="cast 243" line="180" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 243</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WinOemAuto>
	<WinOemENLW public="1" get="inline" set="null" expr="cast 244" line="181" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 244</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WinOemENLW>
	<WinOemBackTab public="1" get="inline" set="null" expr="cast 245" line="182" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 245</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WinOemBackTab>
	<ATTN public="1" get="inline" set="null" expr="cast 246" line="183" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 246</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ATTN>
	<CRSEL public="1" get="inline" set="null" expr="cast 247" line="184" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 247</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</CRSEL>
	<EXSEL public="1" get="inline" set="null" expr="cast 248" line="185" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 248</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EXSEL>
	<EREOF public="1" get="inline" set="null" expr="cast 249" line="186" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 249</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EREOF>
	<Play public="1" get="inline" set="null" expr="cast 250" line="187" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 250</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Play>
	<Zoom public="1" get="inline" set="null" expr="cast 251" line="188" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 251</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Zoom>
	<PA1 public="1" get="inline" set="null" expr="cast 253" line="189" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 253</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PA1>
	<WinOemClear public="1" get="inline" set="null" expr="cast 254" line="190" static="1">
		<x path="kha.input.KeyCode"/>
		<meta>
			<m n=":value"><e>cast 254</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</WinOemClear>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="kha.input._KeyCode.KeyCode_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/input/KeyCode.hx" private="1" module="kha.input.KeyCode" extern="1">
		<Unknown public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Unknown>
		<Back public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Back>
		<Cancel public="1" get="inline" set="null" expr="cast 3" line="6" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Cancel>
		<Help public="1" get="inline" set="null" expr="cast 6" line="7" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 6</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Help>
		<Backspace public="1" get="inline" set="null" expr="cast 8" line="8" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 8</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Backspace>
		<Tab public="1" get="inline" set="null" expr="cast 9" line="9" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 9</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Tab>
		<Clear public="1" get="inline" set="null" expr="cast 12" line="10" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 12</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Clear>
		<Return public="1" get="inline" set="null" expr="cast 13" line="11" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 13</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Return>
		<Shift public="1" get="inline" set="null" expr="cast 16" line="12" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 16</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Shift>
		<Control public="1" get="inline" set="null" expr="cast 17" line="13" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 17</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Control>
		<Alt public="1" get="inline" set="null" expr="cast 18" line="14" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 18</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Alt>
		<Pause public="1" get="inline" set="null" expr="cast 19" line="15" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 19</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Pause>
		<CapsLock public="1" get="inline" set="null" expr="cast 20" line="16" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 20</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CapsLock>
		<Kana public="1" get="inline" set="null" expr="cast 21" line="17" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 21</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Kana>
		<Hangul public="1" get="inline" set="null" expr="cast 21" line="18" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 21</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Hangul>
		<Eisu public="1" get="inline" set="null" expr="cast 22" line="19" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 22</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Eisu>
		<Junja public="1" get="inline" set="null" expr="cast 23" line="20" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 23</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Junja>
		<Final public="1" get="inline" set="null" expr="cast 24" line="21" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 24</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Final>
		<Hanja public="1" get="inline" set="null" expr="cast 25" line="22" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 25</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Hanja>
		<Kanji public="1" get="inline" set="null" expr="cast 25" line="23" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 25</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Kanji>
		<Escape public="1" get="inline" set="null" expr="cast 27" line="24" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 27</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Escape>
		<Convert public="1" get="inline" set="null" expr="cast 28" line="25" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 28</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Convert>
		<NonConvert public="1" get="inline" set="null" expr="cast 29" line="26" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 29</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NonConvert>
		<Accept public="1" get="inline" set="null" expr="cast 30" line="27" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 30</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Accept>
		<ModeChange public="1" get="inline" set="null" expr="cast 31" line="28" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 31</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ModeChange>
		<Space public="1" get="inline" set="null" expr="cast 32" line="29" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 32</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Space>
		<PageUp public="1" get="inline" set="null" expr="cast 33" line="30" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 33</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PageUp>
		<PageDown public="1" get="inline" set="null" expr="cast 34" line="31" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 34</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PageDown>
		<End public="1" get="inline" set="null" expr="cast 35" line="32" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 35</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</End>
		<Home public="1" get="inline" set="null" expr="cast 36" line="33" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 36</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Home>
		<Left public="1" get="inline" set="null" expr="cast 37" line="34" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 37</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Left>
		<Up public="1" get="inline" set="null" expr="cast 38" line="35" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 38</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Up>
		<Right public="1" get="inline" set="null" expr="cast 39" line="36" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 39</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Right>
		<Down public="1" get="inline" set="null" expr="cast 40" line="37" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 40</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Down>
		<Select public="1" get="inline" set="null" expr="cast 41" line="38" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 41</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Select>
		<Print public="1" get="inline" set="null" expr="cast 42" line="39" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 42</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Print>
		<Execute public="1" get="inline" set="null" expr="cast 43" line="40" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 43</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Execute>
		<PrintScreen public="1" get="inline" set="null" expr="cast 44" line="41" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 44</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PrintScreen>
		<Insert public="1" get="inline" set="null" expr="cast 45" line="42" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 45</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Insert>
		<Delete public="1" get="inline" set="null" expr="cast 46" line="43" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 46</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Delete>
		<Zero public="1" get="inline" set="null" expr="cast 48" line="44" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 48</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Zero>
		<One public="1" get="inline" set="null" expr="cast 49" line="45" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 49</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</One>
		<Two public="1" get="inline" set="null" expr="cast 50" line="46" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 50</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Two>
		<Three public="1" get="inline" set="null" expr="cast 51" line="47" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 51</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Three>
		<Four public="1" get="inline" set="null" expr="cast 52" line="48" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 52</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Four>
		<Five public="1" get="inline" set="null" expr="cast 53" line="49" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 53</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Five>
		<Six public="1" get="inline" set="null" expr="cast 54" line="50" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 54</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Six>
		<Seven public="1" get="inline" set="null" expr="cast 55" line="51" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 55</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Seven>
		<Eight public="1" get="inline" set="null" expr="cast 56" line="52" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 56</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Eight>
		<Nine public="1" get="inline" set="null" expr="cast 57" line="53" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 57</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Nine>
		<Colon public="1" get="inline" set="null" expr="cast 58" line="54" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 58</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Colon>
		<Semicolon public="1" get="inline" set="null" expr="cast 59" line="55" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 59</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Semicolon>
		<LessThan public="1" get="inline" set="null" expr="cast 60" line="56" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 60</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</LessThan>
		<Equals public="1" get="inline" set="null" expr="cast 61" line="57" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 61</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Equals>
		<GreaterThan public="1" get="inline" set="null" expr="cast 62" line="58" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 62</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</GreaterThan>
		<QuestionMark public="1" get="inline" set="null" expr="cast 63" line="59" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 63</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</QuestionMark>
		<At public="1" get="inline" set="null" expr="cast 64" line="60" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 64</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</At>
		<A public="1" get="inline" set="null" expr="cast 65" line="61" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 65</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</A>
		<B public="1" get="inline" set="null" expr="cast 66" line="62" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 66</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</B>
		<C public="1" get="inline" set="null" expr="cast 67" line="63" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 67</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</C>
		<D public="1" get="inline" set="null" expr="cast 68" line="64" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 68</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</D>
		<E public="1" get="inline" set="null" expr="cast 69" line="65" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 69</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</E>
		<F public="1" get="inline" set="null" expr="cast 70" line="66" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 70</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F>
		<G public="1" get="inline" set="null" expr="cast 71" line="67" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 71</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</G>
		<H public="1" get="inline" set="null" expr="cast 72" line="68" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 72</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</H>
		<I public="1" get="inline" set="null" expr="cast 73" line="69" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 73</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</I>
		<J public="1" get="inline" set="null" expr="cast 74" line="70" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 74</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</J>
		<K public="1" get="inline" set="null" expr="cast 75" line="71" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 75</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</K>
		<L public="1" get="inline" set="null" expr="cast 76" line="72" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 76</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</L>
		<M public="1" get="inline" set="null" expr="cast 77" line="73" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 77</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</M>
		<N public="1" get="inline" set="null" expr="cast 78" line="74" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 78</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</N>
		<O public="1" get="inline" set="null" expr="cast 79" line="75" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 79</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</O>
		<P public="1" get="inline" set="null" expr="cast 80" line="76" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 80</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</P>
		<Q public="1" get="inline" set="null" expr="cast 81" line="77" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 81</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Q>
		<R public="1" get="inline" set="null" expr="cast 82" line="78" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 82</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</R>
		<S public="1" get="inline" set="null" expr="cast 83" line="79" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 83</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</S>
		<T public="1" get="inline" set="null" expr="cast 84" line="80" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 84</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</T>
		<U public="1" get="inline" set="null" expr="cast 85" line="81" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 85</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</U>
		<V public="1" get="inline" set="null" expr="cast 86" line="82" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 86</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</V>
		<W public="1" get="inline" set="null" expr="cast 87" line="83" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 87</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</W>
		<X public="1" get="inline" set="null" expr="cast 88" line="84" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 88</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</X>
		<Y public="1" get="inline" set="null" expr="cast 89" line="85" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 89</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Y>
		<Z public="1" get="inline" set="null" expr="cast 90" line="86" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 90</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Z>
		<Win public="1" get="inline" set="null" expr="cast 91" line="87" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 91</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Win>
		<ContextMenu public="1" get="inline" set="null" expr="cast 93" line="88" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 93</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ContextMenu>
		<Sleep public="1" get="inline" set="null" expr="cast 95" line="89" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 95</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Sleep>
		<Numpad0 public="1" get="inline" set="null" expr="cast 96" line="90" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 96</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Numpad0>
		<Numpad1 public="1" get="inline" set="null" expr="cast 97" line="91" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 97</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Numpad1>
		<Numpad2 public="1" get="inline" set="null" expr="cast 98" line="92" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 98</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Numpad2>
		<Numpad3 public="1" get="inline" set="null" expr="cast 99" line="93" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 99</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Numpad3>
		<Numpad4 public="1" get="inline" set="null" expr="cast 100" line="94" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 100</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Numpad4>
		<Numpad5 public="1" get="inline" set="null" expr="cast 101" line="95" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 101</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Numpad5>
		<Numpad6 public="1" get="inline" set="null" expr="cast 102" line="96" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 102</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Numpad6>
		<Numpad7 public="1" get="inline" set="null" expr="cast 103" line="97" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 103</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Numpad7>
		<Numpad8 public="1" get="inline" set="null" expr="cast 104" line="98" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 104</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Numpad8>
		<Numpad9 public="1" get="inline" set="null" expr="cast 105" line="99" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 105</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Numpad9>
		<Multiply public="1" get="inline" set="null" expr="cast 106" line="100" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 106</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Multiply>
		<Add public="1" get="inline" set="null" expr="cast 107" line="101" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 107</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Add>
		<Separator public="1" get="inline" set="null" expr="cast 108" line="102" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 108</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Separator>
		<Subtract public="1" get="inline" set="null" expr="cast 109" line="103" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 109</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Subtract>
		<Decimal public="1" get="inline" set="null" expr="cast 110" line="104" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 110</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Decimal>
		<Divide public="1" get="inline" set="null" expr="cast 111" line="105" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 111</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Divide>
		<F1 public="1" get="inline" set="null" expr="cast 112" line="106" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 112</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F1>
		<F2 public="1" get="inline" set="null" expr="cast 113" line="107" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 113</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F2>
		<F3 public="1" get="inline" set="null" expr="cast 114" line="108" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 114</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F3>
		<F4 public="1" get="inline" set="null" expr="cast 115" line="109" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 115</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F4>
		<F5 public="1" get="inline" set="null" expr="cast 116" line="110" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 116</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F5>
		<F6 public="1" get="inline" set="null" expr="cast 117" line="111" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 117</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F6>
		<F7 public="1" get="inline" set="null" expr="cast 118" line="112" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 118</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F7>
		<F8 public="1" get="inline" set="null" expr="cast 119" line="113" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 119</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F8>
		<F9 public="1" get="inline" set="null" expr="cast 120" line="114" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 120</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F9>
		<F10 public="1" get="inline" set="null" expr="cast 121" line="115" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 121</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F10>
		<F11 public="1" get="inline" set="null" expr="cast 122" line="116" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 122</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F11>
		<F12 public="1" get="inline" set="null" expr="cast 123" line="117" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 123</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F12>
		<F13 public="1" get="inline" set="null" expr="cast 124" line="118" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 124</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F13>
		<F14 public="1" get="inline" set="null" expr="cast 125" line="119" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 125</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F14>
		<F15 public="1" get="inline" set="null" expr="cast 126" line="120" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 126</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F15>
		<F16 public="1" get="inline" set="null" expr="cast 127" line="121" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 127</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F16>
		<F17 public="1" get="inline" set="null" expr="cast 128" line="122" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 128</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F17>
		<F18 public="1" get="inline" set="null" expr="cast 129" line="123" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 129</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F18>
		<F19 public="1" get="inline" set="null" expr="cast 130" line="124" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 130</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F19>
		<F20 public="1" get="inline" set="null" expr="cast 131" line="125" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 131</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F20>
		<F21 public="1" get="inline" set="null" expr="cast 132" line="126" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 132</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F21>
		<F22 public="1" get="inline" set="null" expr="cast 133" line="127" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 133</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F22>
		<F23 public="1" get="inline" set="null" expr="cast 134" line="128" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 134</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F23>
		<F24 public="1" get="inline" set="null" expr="cast 135" line="129" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 135</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</F24>
		<NumLock public="1" get="inline" set="null" expr="cast 144" line="130" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 144</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NumLock>
		<ScrollLock public="1" get="inline" set="null" expr="cast 145" line="131" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 145</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ScrollLock>
		<WinOemFjJisho public="1" get="inline" set="null" expr="cast 146" line="132" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 146</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WinOemFjJisho>
		<WinOemFjMasshou public="1" get="inline" set="null" expr="cast 147" line="133" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 147</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WinOemFjMasshou>
		<WinOemFjTouroku public="1" get="inline" set="null" expr="cast 148" line="134" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 148</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WinOemFjTouroku>
		<WinOemFjLoya public="1" get="inline" set="null" expr="cast 149" line="135" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 149</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WinOemFjLoya>
		<WinOemFjRoya public="1" get="inline" set="null" expr="cast 150" line="136" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 150</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WinOemFjRoya>
		<Circumflex public="1" get="inline" set="null" expr="cast 160" line="137" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 160</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Circumflex>
		<Exclamation public="1" get="inline" set="null" expr="cast 161" line="138" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 161</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Exclamation>
		<DoubleQuote public="1" get="inline" set="null" expr="cast 162" line="139" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 162</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DoubleQuote>
		<Hash public="1" get="inline" set="null" expr="cast 163" line="140" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 163</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Hash>
		<Dollar public="1" get="inline" set="null" expr="cast 164" line="141" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 164</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Dollar>
		<Percent public="1" get="inline" set="null" expr="cast 165" line="142" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 165</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Percent>
		<Ampersand public="1" get="inline" set="null" expr="cast 166" line="143" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 166</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Ampersand>
		<Underscore public="1" get="inline" set="null" expr="cast 167" line="144" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 167</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Underscore>
		<OpenParen public="1" get="inline" set="null" expr="cast 168" line="145" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 168</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpenParen>
		<CloseParen public="1" get="inline" set="null" expr="cast 169" line="146" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 169</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CloseParen>
		<Asterisk public="1" get="inline" set="null" expr="cast 170" line="147" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 170</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Asterisk>
		<Plus public="1" get="inline" set="null" expr="cast 171" line="148" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 171</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Plus>
		<Pipe public="1" get="inline" set="null" expr="cast 172" line="149" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 172</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Pipe>
		<HyphenMinus public="1" get="inline" set="null" expr="cast 173" line="150" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 173</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HyphenMinus>
		<OpenCurlyBracket public="1" get="inline" set="null" expr="cast 174" line="151" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 174</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpenCurlyBracket>
		<CloseCurlyBracket public="1" get="inline" set="null" expr="cast 175" line="152" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 175</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CloseCurlyBracket>
		<Tilde public="1" get="inline" set="null" expr="cast 176" line="153" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 176</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Tilde>
		<VolumeMute public="1" get="inline" set="null" expr="cast 181" line="154" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 181</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VolumeMute>
		<VolumeDown public="1" get="inline" set="null" expr="cast 182" line="155" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 182</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VolumeDown>
		<VolumeUp public="1" get="inline" set="null" expr="cast 183" line="156" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 183</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</VolumeUp>
		<Comma public="1" get="inline" set="null" expr="cast 188" line="157" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 188</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Comma>
		<Period public="1" get="inline" set="null" expr="cast 190" line="158" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 190</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Period>
		<Slash public="1" get="inline" set="null" expr="cast 191" line="159" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 191</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Slash>
		<BackQuote public="1" get="inline" set="null" expr="cast 192" line="160" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 192</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BackQuote>
		<OpenBracket public="1" get="inline" set="null" expr="cast 219" line="161" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 219</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OpenBracket>
		<BackSlash public="1" get="inline" set="null" expr="cast 220" line="162" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 220</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BackSlash>
		<CloseBracket public="1" get="inline" set="null" expr="cast 221" line="163" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 221</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CloseBracket>
		<Quote public="1" get="inline" set="null" expr="cast 222" line="164" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 222</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Quote>
		<Meta public="1" get="inline" set="null" expr="cast 224" line="165" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 224</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Meta>
		<AltGr public="1" get="inline" set="null" expr="cast 225" line="166" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 225</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AltGr>
		<WinIcoHelp public="1" get="inline" set="null" expr="cast 227" line="167" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 227</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WinIcoHelp>
		<WinIco00 public="1" get="inline" set="null" expr="cast 228" line="168" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 228</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WinIco00>
		<WinIcoClear public="1" get="inline" set="null" expr="cast 230" line="169" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 230</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WinIcoClear>
		<WinOemReset public="1" get="inline" set="null" expr="cast 233" line="170" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 233</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WinOemReset>
		<WinOemJump public="1" get="inline" set="null" expr="cast 234" line="171" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 234</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WinOemJump>
		<WinOemPA1 public="1" get="inline" set="null" expr="cast 235" line="172" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 235</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WinOemPA1>
		<WinOemPA2 public="1" get="inline" set="null" expr="cast 236" line="173" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 236</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WinOemPA2>
		<WinOemPA3 public="1" get="inline" set="null" expr="cast 237" line="174" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 237</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WinOemPA3>
		<WinOemWSCTRL public="1" get="inline" set="null" expr="cast 238" line="175" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 238</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WinOemWSCTRL>
		<WinOemCUSEL public="1" get="inline" set="null" expr="cast 239" line="176" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 239</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WinOemCUSEL>
		<WinOemATTN public="1" get="inline" set="null" expr="cast 240" line="177" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 240</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WinOemATTN>
		<WinOemFinish public="1" get="inline" set="null" expr="cast 241" line="178" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 241</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WinOemFinish>
		<WinOemCopy public="1" get="inline" set="null" expr="cast 242" line="179" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 242</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WinOemCopy>
		<WinOemAuto public="1" get="inline" set="null" expr="cast 243" line="180" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 243</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WinOemAuto>
		<WinOemENLW public="1" get="inline" set="null" expr="cast 244" line="181" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 244</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WinOemENLW>
		<WinOemBackTab public="1" get="inline" set="null" expr="cast 245" line="182" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 245</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WinOemBackTab>
		<ATTN public="1" get="inline" set="null" expr="cast 246" line="183" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 246</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ATTN>
		<CRSEL public="1" get="inline" set="null" expr="cast 247" line="184" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 247</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</CRSEL>
		<EXSEL public="1" get="inline" set="null" expr="cast 248" line="185" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 248</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EXSEL>
		<EREOF public="1" get="inline" set="null" expr="cast 249" line="186" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 249</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EREOF>
		<Play public="1" get="inline" set="null" expr="cast 250" line="187" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 250</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Play>
		<Zoom public="1" get="inline" set="null" expr="cast 251" line="188" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 251</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Zoom>
		<PA1 public="1" get="inline" set="null" expr="cast 253" line="189" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 253</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PA1>
		<WinOemClear public="1" get="inline" set="null" expr="cast 254" line="190" static="1">
			<x path="kha.input.KeyCode"/>
			<meta>
				<m n=":value"><e>cast 254</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</WinOemClear>
		<meta><m n=":enum"/></meta>
	</class>
	<enum path="kha.input.BlockInterventions" params="" file="C:\HaxeLibraries\Kha\Sources/kha/input/Keyboard.hx" module="kha.input.Keyboard">
		<Default/>
		<Full/>
		<None/>
		<Custom a="func"><f a="code">
	<x path="kha.input.KeyCode"/>
	<x path="Bool"/>
</f></Custom>
		<haxe_doc>See `Keyboard.disableSystemInterventions`</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="kha.netsync.Controller" params="" file="C:\HaxeLibraries\Kha\Sources/kha/netsync/Controller.hx">
		<__id><x path="Int"/></__id>
		<_inputBufferIndex public="1"><x path="Int"/></_inputBufferIndex>
		<_inputBuffer public="1"><c path="haxe.io.Bytes"/></_inputBuffer>
		<_id public="1" set="method" line="16"><f a=""><x path="Int"/></f></_id>
		<_receive public="1" set="method" line="21"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></_receive>
		<new public="1" set="method" line="11"><f a=""><x path="Void"/></f></new>
		<meta><m n=":autoBuild"><e>kha.netsync.ControllerBuilder.build()</e></m></meta>
	</class>
	<class path="kha.input.Keyboard" params="" file="C:\HaxeLibraries\Kha\Sources/kha/input/Keyboard.hx">
		<extends path="kha.netsync.Controller"/>
		<keyBehavior expr="BlockInterventions.Default" line="16" static="1">
			<e path="kha.input.BlockInterventions"/>
			<meta><m n=":value"><e>BlockInterventions.Default</e></m></meta>
		</keyBehavior>
		<get public="1" set="method" line="22" static="1">
			<f a="?num" v="0">
				<x path="Int"/>
				<c path="kha.input.Keyboard"/>
			</f>
			<meta><m n=":value"><e>{ num : 0 }</e></m></meta>
			<haxe_doc>* Get current Keyboard.
	 * @param num (optional) keyboard id (0 by default).</haxe_doc>
		</get>
		<disableSystemInterventions public="1" set="method" line="34" static="1">
			<f a="behavior">
				<e path="kha.input.BlockInterventions"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Disables system hotkeys (html5 only).
	 * @param behavior can be:
	 *   Default - allow F-keys and char keys.
	 *   Full - disable all keys (that browser allows).
	 *   None - do not block any key.
	 *   Custom(func:(code:Int)->Bool) - set custom handler for keydown event (should return true if keycode blocked).]]></haxe_doc>
		</disableSystemInterventions>
		<instance static="1"><c path="kha.input.Keyboard"/></instance>
		<notify public="1" set="method" line="44">
			<f a="downListener:upListener:?pressListener" v="::null">
				<f a="key">
					<x path="kha.input.KeyCode"/>
					<x path="Void"/>
				</f>
				<f a="key">
					<x path="kha.input.KeyCode"/>
					<x path="Void"/>
				</f>
				<f a="char">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ pressListener : null }</e></m></meta>
			<haxe_doc>* Creates event handlers from passed functions.
	 * @param downListener function with `key:KeyCode` argument, fired when a key is pressed down.
	 * @param upListener function with `key:KeyCode` argument, fired when a key is released.
	 * @param pressListener (optional) function with `char:String` argument, fired when a key that produces a character value is pressed down.</haxe_doc>
		</notify>
		<remove public="1" set="method" line="53">
			<f a="downListener:upListener:pressListener">
				<f a="key">
					<x path="kha.input.KeyCode"/>
					<x path="Void"/>
				</f>
				<f a="key">
					<x path="kha.input.KeyCode"/>
					<x path="Void"/>
				</f>
				<f a="char">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>* Removes event handlers from the passed functions that were passed to `notify` function.</haxe_doc>
		</remove>
		<show public="1" set="method" line="62">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Show virtual keyboard (if it exists).</haxe_doc>
		</show>
		<hide public="1" set="method" line="69">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Hide virtual keyboard (if it exists).</haxe_doc>
		</hide>
		<downListeners><c path="Array"><f a="key">
	<x path="kha.input.KeyCode"/>
	<x path="Void"/>
</f></c></downListeners>
		<upListeners><c path="Array"><f a="key">
	<x path="kha.input.KeyCode"/>
	<x path="Void"/>
</f></c></upListeners>
		<pressListeners><c path="Array"><f a="char">
	<c path="String"/>
	<x path="Void"/>
</f></c></pressListeners>
		<sendDownEvent set="method" line="87">
			<f a="code">
				<x path="kha.input.KeyCode"/>
				<x path="Void"/>
			</f>
			<meta><m n="input"/></meta>
		</sendDownEvent>
		<sendUpEvent set="method" line="97">
			<f a="code">
				<x path="kha.input.KeyCode"/>
				<x path="Void"/>
			</f>
			<meta><m n="input"/></meta>
		</sendUpEvent>
		<sendPressEvent set="method" line="107">
			<f a="char">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n="input"/></meta>
		</sendPressEvent>
		<_receive public="1" set="method" line="15" override="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></_receive>
		<new set="method" line="78"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":build"><e>kha.netsync.ControllerBuilder.build()</e></m>
			<m n=":autoBuild"><e>kha.netsync.ControllerBuilder.build()</e></m>
			<m n=":allow"><e>kha.SystemImpl</e></m>
			<m n=":expose"/>
		</meta>
	</class>
	<class path="kha.input.Mouse" params="" file="C:\HaxeLibraries\Kha\Sources/kha/input/Mouse.hx">
		<extends path="kha.netsync.Controller"/>
		<get public="1" set="method" line="12" static="1">
			<f a="?num" v="0">
				<x path="Int"/>
				<c path="kha.input.Mouse"/>
			</f>
			<meta><m n=":value"><e>{ num : 0 }</e></m></meta>
			<haxe_doc>* Get current Mouse.
	 * @param num (optional) mouse id (0 by default).</haxe_doc>
		</get>
		<instance static="1"><c path="kha.input.Mouse"/></instance>
		<notify public="1" set="method" line="24">
			<f a="downListener:upListener:moveListener:wheelListener:?leaveListener" v="::::null">
				<f a="button:x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<f a="button:x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<f a="x:y:moveX:moveY">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<f a="delta">
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ leaveListener : null }</e></m></meta>
			<haxe_doc>* Creates event handlers from passed functions.
	 * @param downListener function with `button:Int`,`x:Int`,`y:Int` arguments, fired when a mouse is pressed down. `button:Int` is `0` for left button, `1` for right and `2` for middle.
	 * @param upListener function with `button:Int`,`x:Int`,`y:Int` arguments, fired when a mouse is released.
	 * @param moveListener function with `x:Int`,`y:Int`,`moveX:Int`,`moveY:Int` arguments, fired when a mouse is moved. `moveX`/`moveY` is the difference between the current coordinates and the last position of the mouse.
	 * @param wheelListener function with `delta:Int` argument, fired when the wheel rotates. It can have a value of `1` or `-1` depending on the rotation.
	 * @param leaveListener (optional) function without` arguments, when fired mouse leave canvas.</haxe_doc>
		</notify>
		<remove public="1" set="method" line="31">
			<f a="downListener:upListener:moveListener:wheelListener:?leaveListener" v="::::null">
				<f a="button:x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<f a="button:x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<f a="x:y:moveX:moveY">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<f a="delta">
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ leaveListener : null }</e></m></meta>
			<haxe_doc>* Removes event handlers from the passed functions that were passed to `notify` function.</haxe_doc>
		</remove>
		<notifyWindowed public="1" set="method" line="38">
			<f a="windowId:downListener:upListener:moveListener:wheelListener:?leaveListener" v=":::::null">
				<x path="Int"/>
				<f a="::">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<f a="::">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<f a=":::">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<f a="">
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ leaveListener : null }</e></m></meta>
			<haxe_doc>* Creates event handlers from passed functions like `notify` function, but only for window with `windowId:Int` id argument. The windows are not supported by all the targets.</haxe_doc>
		</notifyWindowed>
		<removeWindowed public="1" set="method" line="103">
			<f a="windowId:downListener:upListener:moveListener:wheelListener:?leaveListener" v=":::::null">
				<x path="Int"/>
				<f a="::">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<f a="::">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<f a=":::">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<f a="">
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ leaveListener : null }</e></m></meta>
			<haxe_doc>* Removes event handlers for `windowId:Int` from the passed functions that were passed to `notifyWindowed` function.</haxe_doc>
		</removeWindowed>
		<lock public="1" set="method" line="178">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Locks the cursor position and hides it. For catching movements, use the `moveX`/`moveY` arguments of your `moveListener` handler.</haxe_doc>
		</lock>
		<unlock public="1" set="method" line="185">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Unlock the cursor position and hides it. For catching movements, use the `moveX`/`moveY` arguments of your `moveListener` handler.</haxe_doc>
		</unlock>
		<canLock public="1" set="method" line="192">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Unlocks the cursor position and displays it.</haxe_doc>
		</canLock>
		<isLocked public="1" set="method" line="199">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>* Returns the status of the cursor lock</haxe_doc>
		</isLocked>
		<notifyOnLockChange public="1" set="method" line="208">
			<f a="change:error">
				<f a=""><x path="Void"/></f>
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates event handlers from passed functions.
	 * @param change function fired when the lock is turned on / off.
	 * @param error function fired when a toggle error occurs.</haxe_doc>
		</notifyOnLockChange>
		<removeFromLockChange public="1" set="method" line="215">
			<f a="change:error">
				<f a=""><x path="Void"/></f>
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>* Removes event handlers from the passed functions that were passed to `notifyOnLockChange` function.</haxe_doc>
		</removeFromLockChange>
		<hideSystemCursor public="1" set="method" line="222">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Hides the system cursor (without locking)</haxe_doc>
		</hideSystemCursor>
		<showSystemCursor public="1" set="method" line="229">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Show the system cursor</haxe_doc>
		</showSystemCursor>
		<windowDownListeners><c path="Array"><c path="Array"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></c></c></windowDownListeners>
		<windowUpListeners><c path="Array"><c path="Array"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></c></c></windowUpListeners>
		<windowMoveListeners><c path="Array"><c path="Array"><f a=":::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></c></c></windowMoveListeners>
		<windowWheelListeners><c path="Array"><c path="Array"><f a="">
	<x path="Int"/>
	<x path="Void"/>
</f></c></c></windowWheelListeners>
		<windowLeaveListeners><c path="Array"><c path="Array"><f a=""><x path="Void"/></f></c></c></windowLeaveListeners>
		<sendLeaveEvent set="method" line="246">
			<f a="windowId">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n="input"/></meta>
		</sendLeaveEvent>
		<sendDownEvent set="method" line="255">
			<f a="windowId:button:x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n="input"/></meta>
		</sendDownEvent>
		<sendUpEvent set="method" line="264">
			<f a="windowId:button:x:y">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n="input"/></meta>
		</sendUpEvent>
		<sendMoveEvent set="method" line="273">
			<f a="windowId:x:y:movementX:movementY">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n="input"/></meta>
		</sendMoveEvent>
		<sendWheelEvent set="method" line="282">
			<f a="windowId:delta">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n="input"/></meta>
		</sendWheelEvent>
		<_receive public="1" set="method" line="7" override="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></_receive>
		<new set="method" line="240"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":build"><e>kha.netsync.ControllerBuilder.build()</e></m>
			<m n=":autoBuild"><e>kha.netsync.ControllerBuilder.build()</e></m>
			<m n=":allow"><e>kha.SystemImpl</e></m>
			<m n=":expose"/>
		</meta>
	</class>
	<class path="kha.input.MouseImpl" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/input/MouseImpl.hx">
		<extends path="kha.input.Mouse"/>
		<lock public="1" set="method" line="10" override="1"><f a=""><x path="Void"/></f></lock>
		<unlock public="1" set="method" line="14" override="1"><f a=""><x path="Void"/></f></unlock>
		<canLock public="1" set="method" line="18" override="1"><f a=""><x path="Bool"/></f></canLock>
		<isLocked public="1" set="method" line="22" override="1"><f a=""><x path="Bool"/></f></isLocked>
		<notifyOnLockChange public="1" set="method" line="26" override="1"><f a="func:error">
	<f a=""><x path="Void"/></f>
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></notifyOnLockChange>
		<removeFromLockChange public="1" set="method" line="30" override="1"><f a="func:error">
	<f a=""><x path="Void"/></f>
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></removeFromLockChange>
		<hideSystemCursor public="1" set="method" line="34" override="1"><f a=""><x path="Void"/></f></hideSystemCursor>
		<showSystemCursor public="1" set="method" line="38" override="1"><f a=""><x path="Void"/></f></showSystemCursor>
		<_receive public="1" set="method" line="5" override="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></_receive>
		<new public="1" set="method" line="6"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":build"><e>kha.netsync.ControllerBuilder.build()</e></m>
			<m n=":autoBuild"><e>kha.netsync.ControllerBuilder.build()</e></m>
		</meta>
	</class>
	<class path="kha.input.Pen" params="" file="C:\HaxeLibraries\Kha\Sources/kha/input/Pen.hx">
		<get public="1" set="method" line="9" static="1">
			<f a="?num" v="0">
				<x path="Int"/>
				<c path="kha.input.Pen"/>
			</f>
			<meta><m n=":value"><e>{ num : 0 }</e></m></meta>
			<haxe_doc>* Get current Pen.
	 * @param num (optional) pen id (0 by default).</haxe_doc>
		</get>
		<instance static="1"><c path="kha.input.Pen"/></instance>
		<notify public="1" set="method" line="19">
			<f a="downListener:upListener:moveListener">
				<f a="::">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<f a="::">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<f a="::">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates event handlers from passed functions.
	 * @param downListener function with `x:Int`,`y:Int`,`pressure:Float` arguments, fired when a pen is pressed down. `pressure` is force of pressure on the screen in the range from `0` to `1`.
	 * @param upListener function with `x:Int`,`y:Int`,`pressure:Float` arguments, fired when a pen is released.
	 * @param moveListener function with `x:Int`,`y:Int`,`pressure:Float` arguments, fired when a pen is moved.</haxe_doc>
		</notify>
		<remove public="1" set="method" line="26">
			<f a="downListener:upListener:moveListener">
				<f a="::">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<f a="::">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<f a="::">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>* Removes event handlers from the passed functions that were passed to `notify` function.</haxe_doc>
		</remove>
		<notifyWindowed public="1" set="method" line="33">
			<f a="windowId:downListener:upListener:moveListener">
				<x path="Int"/>
				<f a="::">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<f a="::">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<f a="::">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates event handlers from passed functions like `notify` function, but only for window with `windowId:Int` id argument. The windows are not supported by all the targets.</haxe_doc>
		</notifyWindowed>
		<removeWindowed public="1" set="method" line="68">
			<f a="windowId:downListener:upListener:moveListener">
				<x path="Int"/>
				<f a="::">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<f a="::">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<f a="::">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>* Removes event handlers for `windowId:Int` from the passed functions that were passed to `notifyWindowed` function.</haxe_doc>
		</removeWindowed>
		<windowDownListeners><c path="Array"><c path="Array"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></c></c></windowDownListeners>
		<windowUpListeners><c path="Array"><c path="Array"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></c></c></windowUpListeners>
		<windowMoveListeners><c path="Array"><c path="Array"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></c></c></windowMoveListeners>
		<sendDownEvent set="method" line="97"><f a="windowId:x:y:pressure">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></sendDownEvent>
		<sendUpEvent set="method" line="105"><f a="windowId:x:y:pressure">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></sendUpEvent>
		<sendMoveEvent set="method" line="113"><f a="windowId:x:y:pressure">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></sendMoveEvent>
		<new set="method" line="93"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>kha.SystemImpl</e></m>
		</meta>
	</class>
	<class path="kha.input.Sensor" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/input/Sensor.hx">
		<accelerometer expr="new Sensor()" line="5" static="1">
			<c path="kha.input.Sensor"/>
			<meta><m n=":value"><e>new Sensor()</e></m></meta>
		</accelerometer>
		<gyroscope expr="new Sensor()" line="6" static="1">
			<c path="kha.input.Sensor"/>
			<meta><m n=":value"><e>new Sensor()</e></m></meta>
		</gyroscope>
		<get public="1" set="method" line="9" static="1"><f a="type">
	<x path="kha.input.SensorType"/>
	<c path="kha.input.Sensor"/>
</f></get>
		<_changed public="1" set="method" line="26" static="1"><f a="type:x:y:z">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></_changed>
		<listeners expr="new Array()">
			<c path="Array"><f a="::">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></c>
			<meta><m n=":value"><e>new Array()</e></m></meta>
		</listeners>
		<notify public="1" set="method" line="18"><f a="listener">
	<f a="::">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></notify>
		<new set="method" line="22"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
		</meta>
	</class>
	<abstract path="kha.input.SensorType" params="" file="C:\HaxeLibraries\Kha\Sources/kha/input/SensorType.hx">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="kha.input._SensorType.SensorType_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/input/SensorType.hx" private="1" module="kha.input.SensorType" extern="1">
	<Accelerometer public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
		<x path="kha.input.SensorType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Accelerometer>
	<Gyroscope public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
		<x path="kha.input.SensorType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Gyroscope>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="kha.input._SensorType.SensorType_Impl_" params="" file="C:\HaxeLibraries\Kha\Sources/kha/input/SensorType.hx" private="1" module="kha.input.SensorType" extern="1">
		<Accelerometer public="1" get="inline" set="null" expr="cast 0" line="4" static="1">
			<x path="kha.input.SensorType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Accelerometer>
		<Gyroscope public="1" get="inline" set="null" expr="cast 1" line="5" static="1">
			<x path="kha.input.SensorType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Gyroscope>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="kha.input.Surface" params="" file="C:\HaxeLibraries\Kha\Sources/kha/input/Surface.hx">
		<get public="1" set="method" line="10" static="1">
			<f a="?num" v="0">
				<x path="Int"/>
				<c path="kha.input.Surface"/>
			</f>
			<meta><m n=":value"><e>{ num : 0 }</e></m></meta>
			<haxe_doc>* Get current Surface.
	 * @param num (optional) surface id (0 by default).</haxe_doc>
		</get>
		<instance static="1"><c path="kha.input.Surface"/></instance>
		<notify public="1" set="method" line="21">
			<f a="touchStartListener:touchEndListener:moveListener">
				<f a="id:x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<f a="id:x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<f a="id:x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates event handlers from passed functions.
	 * @param touchStartListener function with `id:Int`,`x:Int`,`y:Int` arguments, fired when a surface is pressed down. The finger `id` goes from 0 increasing by one. When the finger releases the screen, the old `id` is freed up and will be occupied with pressing the next finger (when releasing a finger, the shift of ids does not occur).
	 * @param touchEndListener function with `id:Int`,`x:Int`,`y:Int` arguments, fired when a surface is released.
	 * @param moveListener function with `id:Int`,`x:Int`,`y:Int` arguments, fired when a surface is moved.</haxe_doc>
		</notify>
		<remove public="1" set="method" line="30">
			<f a="touchStartListener:touchEndListener:moveListener">
				<f a="id:x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<f a="id:x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<f a="id:x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>* Removes event handlers from the passed functions that were passed to `notify` function.</haxe_doc>
		</remove>
		<touchStartListeners><c path="Array"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></c></touchStartListeners>
		<touchEndListeners><c path="Array"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></c></touchEndListeners>
		<moveListeners><c path="Array"><f a="::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></c></moveListeners>
		<sendTouchStartEvent set="method" line="48"><f a="index:x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></sendTouchStartEvent>
		<sendTouchEndEvent set="method" line="54"><f a="index:x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></sendTouchEndEvent>
		<sendMoveEvent set="method" line="60"><f a="index:x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></sendMoveEvent>
		<new set="method" line="41"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":allow"><e>kha.SystemImpl</e></m>
			<m n=":expose"/>
		</meta>
	</class>
	<class path="kha.internal.BytesBlob" params="" file="C:\HaxeLibraries\Kha\Sources/kha/internal/BytesBlob.hx">
		<implements path="kha.Resource"/>
		<bufferSize get="inline" set="null" expr="2000" line="7" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2000</e></m></meta>
		</bufferSize>
		<fromBytes public="1" set="method" line="15" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<t path="kha.Blob"/>
</f></fromBytes>
		<alloc public="1" set="method" line="19" static="1"><f a="size">
	<x path="Int"/>
	<t path="kha.Blob"/>
</f></alloc>
		<readF32 set="method" line="138" static="1"><f a="i">
	<x path="Int"/>
	<x path="Float"/>
</f></readF32>
		<bit set="method" line="159" static="1"><f a="value:position">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></bit>
		<toText set="method" line="173" static="1"><f a="chars:length">
	<x path="haxe.ds.Vector"><x path="Int"/></x>
	<x path="Int"/>
	<c path="String"/>
</f></toText>
		<bytes public="1"><c path="haxe.io.Bytes"/></bytes>
		<sub public="1" set="method" line="23"><f a="start:length">
	<x path="Int"/>
	<x path="Int"/>
	<t path="kha.Blob"/>
</f></sub>
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<get_length public="1" set="method" line="30">
			<f a=""><x path="Int"/></f>
			<meta><m n=":keep"/></meta>
		</get_length>
		<writeU8 public="1" set="method" line="34"><f a="position:value">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeU8>
		<readU8 public="1" set="method" line="38"><f a="position">
	<x path="Int"/>
	<x path="Int"/>
</f></readU8>
		<readS8 public="1" set="method" line="44"><f a="position">
	<x path="Int"/>
	<x path="Int"/>
</f></readS8>
		<readU16BE public="1" set="method" line="52"><f a="position">
	<x path="Int"/>
	<x path="Int"/>
</f></readU16BE>
		<readU16LE public="1" set="method" line="59"><f a="position">
	<x path="Int"/>
	<x path="Int"/>
</f></readU16LE>
		<readU32LE public="1" set="method" line="66"><f a="position">
	<x path="Int"/>
	<x path="Int"/>
</f></readU32LE>
		<readU32BE public="1" set="method" line="76"><f a="position">
	<x path="Int"/>
	<x path="Int"/>
</f></readU32BE>
		<readS16BE public="1" set="method" line="86"><f a="position">
	<x path="Int"/>
	<x path="Int"/>
</f></readS16BE>
		<readS16LE public="1" set="method" line="96"><f a="position">
	<x path="Int"/>
	<x path="Int"/>
</f></readS16LE>
		<readS32LE public="1" set="method" line="106"><f a="position">
	<x path="Int"/>
	<x path="Int"/>
</f></readS32LE>
		<readS32BE public="1" set="method" line="118"><f a="position">
	<x path="Int"/>
	<x path="Int"/>
</f></readS32BE>
		<readF32LE public="1" set="method" line="130"><f a="position">
	<x path="Int"/>
	<x path="Float"/>
</f></readF32LE>
		<readF32BE public="1" set="method" line="134"><f a="position">
	<x path="Int"/>
	<x path="Float"/>
</f></readF32BE>
		<toString public="1" set="method" line="155"><f a=""><c path="String"/></f></toString>
		<readUtf8String public="1" set="method" line="179"><f a=""><c path="String"/></f></readUtf8String>
		<toBytes public="1" set="method" line="183"><f a=""><c path="haxe.io.Bytes"/></f></toBytes>
		<unload public="1" set="method" line="187"><f a=""><x path="Void"/></f></unload>
		<new set="method" line="11">
			<f a="bytes">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<meta><m n=":allow"><e>kha.LoaderImpl</e></m></meta>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.kore.Keyboard" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/kore/Keyboard.hx">
		<extends path="kha.input.Keyboard"/>
		<show public="1" set="method" line="15" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":functionCode"><e>"Kore::System::showKeyboard();"</e></m></meta>
		</show>
		<hide public="1" set="method" line="20" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":functionCode"><e>"Kore::System::hideKeyboard();"</e></m></meta>
		</hide>
		<_receive public="1" set="method" line="9" override="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></_receive>
		<new set="method" line="10"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":build"><e>kha.netsync.ControllerBuilder.build()</e></m>
			<m n=":autoBuild"><e>kha.netsync.ControllerBuilder.build()</e></m>
			<m n=":headerCode"><e><![CDATA["\n#include <Kore/pch.h>\n#include <Kore/System.h>\n"]]></e></m>
			<m n=":allow"><e>kha.SystemImpl</e></m>
		</meta>
	</class>
	<class path="kha.kore.Video" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/kore/Video.hx">
		<extends path="kha.Video"/>
		<init set="method" line="16">
			<f a="filename">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"video = new Kore::Video(filename.c_str());"</e></m></meta>
		</init>
		<play public="1" set="method" line="21" override="1">
			<f a="?loop" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":value"><e>{ loop : false }</e></m>
				<m n=":functionCode"><e><![CDATA["video->play();"]]></e></m>
			</meta>
		</play>
		<pause public="1" set="method" line="26" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":functionCode"><e><![CDATA["video->pause();"]]></e></m></meta>
		</pause>
		<stop public="1" set="method" line="31" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":functionCode"><e><![CDATA["video->stop();"]]></e></m></meta>
		</stop>
		<getLength public="1" set="method" line="36" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e><![CDATA["return static_cast<int>(video->duration * 1000.0);"]]></e></m></meta>
		</getLength>
		<getCurrentPos public="1" set="method" line="41" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e><![CDATA["return static_cast<int>(video->position * 1000.0);"]]></e></m></meta>
		</getCurrentPos>
		<get_position set="method" line="45" override="1"><f a=""><x path="Int"/></f></get_position>
		<set_position set="method" line="50" override="1">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["video->update(value / 1000.0); return value;"]]></e></m></meta>
		</set_position>
		<isFinished public="1" set="method" line="55" override="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":functionCode"><e><![CDATA["return video->finished;"]]></e></m></meta>
		</isFinished>
		<width public="1" set="method" line="60" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e><![CDATA["return video->width();"]]></e></m></meta>
		</width>
		<height public="1" set="method" line="65" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e><![CDATA["return video->height();"]]></e></m></meta>
		</height>
		<unload public="1" set="method" line="73" override="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":functionCode"><e>"\r\n\tdelete video;\r\n\tvideo = nullptr;\r\n\t"</e></m></meta>
		</unload>
		<new public="1" set="method" line="10"><f a="filename">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":headerCode"><e><![CDATA["\r\n#include <Kore/pch.h>\r\n#include <Kore/Video.h>\r\n"]]></e></m>
			<m n=":headerClassCode"><e>"Kore::Video* video;"</e></m>
		</meta>
	</class>
	<class path="kha.kore.graphics4.ConstantLocation" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/kore/graphics4/ConstantLocation.hx">
		<implements path="kha.graphics4.ConstantLocation"/>
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":headerCode"><e><![CDATA["\r\n#include <Kore/pch.h>\r\n#include <Kore/Graphics4/Shader.h>\r\n"]]></e></m>
			<m n=":headerClassCode"><e>"Kore::Graphics4::ConstantLocation location;"</e></m>
		</meta>
	</class>
	<class path="kha.kore.graphics4.Graphics" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/kore/graphics4/Graphics.hx">
		<implements path="kha.graphics4.Graphics"/>
		<lastWindow public="1" expr="-1" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</lastWindow>
		<current expr="null" line="48" static="1">
			<c path="kha.kore.graphics4.Graphics"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</current>
		<target><c path="kha.Canvas"/></target>
		<window public="1"><x path="Null"><x path="Int"/></x></window>
		<init set="method" line="55">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
		</init>
		<vsynced public="1" set="method" line="68">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":functionCode"><e><![CDATA["return Kore::Window::get(0)->vSynced();"]]></e></m></meta>
		</vsynced>
		<refreshRate public="1" set="method" line="73">
			<f a=""><x path="Int"/></f>
			<meta><m n=":functionCode"><e><![CDATA["return Kore::Display::primary()->frequency();"]]></e></m></meta>
		</refreshRate>
		<clear public="1" set="method" line="77"><f a="?color:?z:?stencil">
	<x path="kha.Color"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></clear>
		<viewport public="1" set="method" line="88">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"\r\n\t\tKore::Graphics4::viewport(x,y,width,height);\r\n\t"</e></m></meta>
		</viewport>
		<clear2 set="method" line="95">
			<f a="flags:color:z:stencil">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"\r\n\t\tKore::Graphics4::clear(flags, color, z, stencil);\r\n\t"</e></m></meta>
		</clear2>
		<setVertexBuffer public="1" set="method" line="104">
			<f a="vertexBuffer">
				<c path="kha.graphics4.VertexBuffer"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["Kore::Graphics4::setVertexBuffer(*vertexBuffer->buffer);"]]></e></m></meta>
		</setVertexBuffer>
		<setVertexBuffersInternal set="method" line="117">
			<f a="vb0:vb1:vb2:vb3:count">
				<c path="kha.graphics4.VertexBuffer"/>
				<c path="kha.graphics4.VertexBuffer"/>
				<c path="kha.graphics4.VertexBuffer"/>
				<c path="kha.graphics4.VertexBuffer"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tKore::Graphics4::VertexBuffer* vertexBuffers[4] = {\r\n\t\t\tvb0 == null() ? nullptr : vb0->buffer,\r\n\t\t\tvb1 == null() ? nullptr : vb1->buffer,\r\n\t\t\tvb2 == null() ? nullptr : vb2->buffer,\r\n\t\t\tvb3 == null() ? nullptr : vb3->buffer\r\n\t\t};\r\n\t\tKore::Graphics4::setVertexBuffers(vertexBuffers, count);\r\n\t"]]></e></m></meta>
		</setVertexBuffersInternal>
		<setVertexBuffers public="1" set="method" line="121"><f a="vertexBuffers">
	<c path="Array"><c path="kha.graphics4.VertexBuffer"/></c>
	<x path="Void"/>
</f></setVertexBuffers>
		<setIndexBuffer public="1" set="method" line="135">
			<f a="indexBuffer">
				<c path="kha.graphics4.IndexBuffer"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["Kore::Graphics4::setIndexBuffer(*indexBuffer->buffer);"]]></e></m></meta>
		</setIndexBuffer>
		<maxTextureSize public="1" set="method" line="147"><f a=""><x path="Int"/></f></maxTextureSize>
		<supportsNonPow2Textures public="1" set="method" line="151"><f a=""><x path="Bool"/></f></supportsNonPow2Textures>
		<setCubeMap public="1" set="method" line="155">
			<f a="unit:cubeMap">
				<c path="kha.graphics4.TextureUnit"/>
				<c path="kha.graphics4.CubeMap"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setCubeMap>
		<setCubeMapDepth public="1" set="method" line="164">
			<f a="unit:cubeMap">
				<c path="kha.graphics4.TextureUnit"/>
				<c path="kha.graphics4.CubeMap"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setCubeMapDepth>
		<scissor public="1" set="method" line="171">
			<f a="x:y:width:height">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"Kore::Graphics4::scissor(x, y, width, height);"</e></m></meta>
		</scissor>
		<disableScissor public="1" set="method" line="176">
			<f a=""><x path="Void"/></f>
			<meta><m n=":functionCode"><e>"Kore::Graphics4::disableScissor();"</e></m></meta>
		</disableScissor>
		<instancedRenderingAvailable public="1" set="method" line="180"><f a=""><x path="Bool"/></f></instancedRenderingAvailable>
		<setTextureWrapNative set="method" line="188">
			<f a="unit:uWrap:vWrap">
				<c path="kha.kore.graphics4.TextureUnit"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tKore::Graphics4::setTextureAddressing(unit->unit, Kore::Graphics4::U, (Kore::Graphics4::TextureAddressing)uWrap);\r\n\t\tKore::Graphics4::setTextureAddressing(unit->unit, Kore::Graphics4::V, (Kore::Graphics4::TextureAddressing)vWrap);\r\n\t"]]></e></m></meta>
		</setTextureWrapNative>
		<setTexture3DWrapNative set="method" line="197">
			<f a="unit:uWrap:vWrap:wWrap">
				<c path="kha.kore.graphics4.TextureUnit"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tKore::Graphics4::setTexture3DAddressing(unit->unit, Kore::Graphics4::U, (Kore::Graphics4::TextureAddressing)uWrap);\r\n\t\tKore::Graphics4::setTexture3DAddressing(unit->unit, Kore::Graphics4::V, (Kore::Graphics4::TextureAddressing)vWrap);\r\n\t\tKore::Graphics4::setTexture3DAddressing(unit->unit, Kore::Graphics4::W, (Kore::Graphics4::TextureAddressing)wWrap);\r\n\t"]]></e></m></meta>
		</setTexture3DWrapNative>
		<setTextureFiltersNative set="method" line="206">
			<f a="unit:minificationFilter:magnificationFilter:mipMapFilter">
				<c path="kha.kore.graphics4.TextureUnit"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tKore::Graphics4::setTextureMinificationFilter(unit->unit, (Kore::Graphics4::TextureFilter)minificationFilter);\r\n\t\tKore::Graphics4::setTextureMagnificationFilter(unit->unit, (Kore::Graphics4::TextureFilter)magnificationFilter);\r\n\t\tKore::Graphics4::setTextureMipmapFilter(unit->unit, (Kore::Graphics4::MipmapFilter)mipMapFilter);\r\n\t"]]></e></m></meta>
		</setTextureFiltersNative>
		<setTexture3DFiltersNative set="method" line="215">
			<f a="unit:minificationFilter:magnificationFilter:mipMapFilter">
				<c path="kha.kore.graphics4.TextureUnit"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tKore::Graphics4::setTexture3DMinificationFilter(unit->unit, (Kore::Graphics4::TextureFilter)minificationFilter);\r\n\t\tKore::Graphics4::setTexture3DMagnificationFilter(unit->unit, (Kore::Graphics4::TextureFilter)magnificationFilter);\r\n\t\tKore::Graphics4::setTexture3DMipmapFilter(unit->unit, (Kore::Graphics4::MipmapFilter)mipMapFilter);\r\n\t"]]></e></m></meta>
		</setTexture3DFiltersNative>
		<setTextureParameters public="1" set="method" line="219"><f a="texunit:uAddressing:vAddressing:minificationFilter:magnificationFilter:mipmapFilter">
	<c path="kha.graphics4.TextureUnit"/>
	<x path="kha.graphics4.TextureAddressing"/>
	<x path="kha.graphics4.TextureAddressing"/>
	<x path="kha.graphics4.TextureFilter"/>
	<x path="kha.graphics4.TextureFilter"/>
	<x path="kha.graphics4.MipMapFilter"/>
	<x path="Void"/>
</f></setTextureParameters>
		<setTexture3DParameters public="1" set="method" line="224"><f a="texunit:uAddressing:vAddressing:wAddressing:minificationFilter:magnificationFilter:mipmapFilter">
	<c path="kha.graphics4.TextureUnit"/>
	<x path="kha.graphics4.TextureAddressing"/>
	<x path="kha.graphics4.TextureAddressing"/>
	<x path="kha.graphics4.TextureAddressing"/>
	<x path="kha.graphics4.TextureFilter"/>
	<x path="kha.graphics4.TextureFilter"/>
	<x path="kha.graphics4.MipMapFilter"/>
	<x path="Void"/>
</f></setTexture3DParameters>
		<setTextureCompareMode public="1" set="method" line="229">
			<f a="texunit:enabled">
				<c path="kha.graphics4.TextureUnit"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setTextureCompareMode>
		<setCubeMapCompareMode public="1" set="method" line="234">
			<f a="texunit:enabled">
				<c path="kha.graphics4.TextureUnit"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setCubeMapCompareMode>
		<setTextureInternal set="method" line="243">
			<f a="unit:texture">
				<c path="kha.kore.graphics4.TextureUnit"/>
				<c path="kha.Image"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tif (texture->texture != nullptr) Kore::Graphics4::setTexture(unit->unit, texture->texture);\r\n\t\telse texture->renderTarget->useColorAsTexture(unit->unit);\r\n\t"]]></e></m></meta>
		</setTextureInternal>
		<setTexture public="1" set="method" line="247"><f a="unit:texture">
	<c path="kha.graphics4.TextureUnit"/>
	<c path="kha.Image"/>
	<x path="Void"/>
</f></setTexture>
		<setTextureDepth public="1" set="method" line="252">
			<f a="unit:texture">
				<c path="kha.graphics4.TextureUnit"/>
				<c path="kha.Image"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setTextureDepth>
		<setTextureArray public="1" set="method" line="258">
			<f a="unit:texture">
				<c path="kha.graphics4.TextureUnit"/>
				<c path="kha.Image"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</setTextureArray>
		<setVideoTexture public="1" set="method" line="264"><f a="unit:texture">
	<c path="kha.graphics4.TextureUnit"/>
	<c path="kha.Video"/>
	<x path="Void"/>
</f></setVideoTexture>
		<setImageTextureInternal set="method" line="272">
			<f a="unit:texture">
				<c path="kha.kore.graphics4.TextureUnit"/>
				<c path="kha.Image"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tKore::Graphics4::setImageTexture(unit->unit, texture->texture);\r\n\t"]]></e></m></meta>
		</setImageTextureInternal>
		<setImageTexture public="1" set="method" line="276"><f a="unit:texture">
	<c path="kha.graphics4.TextureUnit"/>
	<c path="kha.Image"/>
	<x path="Void"/>
</f></setImageTexture>
		<setPipeline public="1" set="method" line="293"><f a="pipe">
	<c path="kha.graphics4.PipelineState"/>
	<x path="Void"/>
</f></setPipeline>
		<setStencilReferenceValue public="1" set="method" line="300">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"\r\n\t\tKore::Graphics4::setStencilReferenceValue(value);\r\n\t"</e></m></meta>
		</setStencilReferenceValue>
		<setBool public="1" set="method" line="304"><f a="location:value">
	<c path="kha.graphics4.ConstantLocation"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setBool>
		<setBoolPrivate set="method" line="311">
			<f a="location:value">
				<c path="kha.kore.graphics4.ConstantLocation"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tKore::Graphics4::setBool(location->location, value);\r\n\t"]]></e></m></meta>
		</setBoolPrivate>
		<setInt public="1" set="method" line="315"><f a="location:value">
	<c path="kha.graphics4.ConstantLocation"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt>
		<setIntPrivate set="method" line="322">
			<f a="location:value">
				<c path="kha.kore.graphics4.ConstantLocation"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tKore::Graphics4::setInt(location->location, value);\r\n\t"]]></e></m></meta>
		</setIntPrivate>
		<setInt2 public="1" set="method" line="326"><f a="location:value1:value2">
	<c path="kha.graphics4.ConstantLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt2>
		<setInt2Private set="method" line="333">
			<f a="location:value1:value2">
				<c path="kha.kore.graphics4.ConstantLocation"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tKore::Graphics4::setInt2(location->location, value1, value2);\r\n\t"]]></e></m></meta>
		</setInt2Private>
		<setInt3 public="1" set="method" line="337"><f a="location:value1:value2:value3">
	<c path="kha.graphics4.ConstantLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt3>
		<setInt3Private set="method" line="344">
			<f a="location:value1:value2:value3">
				<c path="kha.kore.graphics4.ConstantLocation"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tKore::Graphics4::setInt3(location->location, value1, value2, value3);\r\n\t"]]></e></m></meta>
		</setInt3Private>
		<setInt4 public="1" set="method" line="348"><f a="location:value1:value2:value3:value4">
	<c path="kha.graphics4.ConstantLocation"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setInt4>
		<setInt4Private set="method" line="355">
			<f a="location:value1:value2:value3:value4">
				<c path="kha.kore.graphics4.ConstantLocation"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tKore::Graphics4::setInt4(location->location, value1, value2, value3, value4);\r\n\t"]]></e></m></meta>
		</setInt4Private>
		<setInts public="1" set="method" line="359"><f a="location:values">
	<c path="kha.graphics4.ConstantLocation"/>
	<x path="kha.arrays.Int32Array"/>
	<x path="Void"/>
</f></setInts>
		<setIntsPrivate set="method" line="366">
			<f a="location:values">
				<c path="kha.kore.graphics4.ConstantLocation"/>
				<x path="kha.arrays.Int32Array"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tKore::Graphics4::setInts(location->location, values->self.data, values->self.length());\r\n\t"]]></e></m></meta>
		</setIntsPrivate>
		<setFloat public="1" set="method" line="370"><f a="location:value">
	<c path="kha.graphics4.ConstantLocation"/>
	<t path="kha.FastFloat"/>
	<x path="Void"/>
</f></setFloat>
		<setFloatPrivate set="method" line="377">
			<f a="location:value">
				<c path="kha.kore.graphics4.ConstantLocation"/>
				<t path="kha.FastFloat"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tKore::Graphics4::setFloat(location->location, value);\r\n\t"]]></e></m></meta>
		</setFloatPrivate>
		<setFloat2 public="1" set="method" line="381"><f a="location:value1:value2">
	<c path="kha.graphics4.ConstantLocation"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<x path="Void"/>
</f></setFloat2>
		<setFloat2Private set="method" line="388">
			<f a="location:value1:value2">
				<c path="kha.kore.graphics4.ConstantLocation"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tKore::Graphics4::setFloat2(location->location, value1, value2);\r\n\t"]]></e></m></meta>
		</setFloat2Private>
		<setFloat3 public="1" set="method" line="392"><f a="location:value1:value2:value3">
	<c path="kha.graphics4.ConstantLocation"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<x path="Void"/>
</f></setFloat3>
		<setFloat3Private set="method" line="399">
			<f a="location:value1:value2:value3">
				<c path="kha.kore.graphics4.ConstantLocation"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tKore::Graphics4::setFloat3(location->location, value1, value2, value3);\r\n\t"]]></e></m></meta>
		</setFloat3Private>
		<setFloat4 public="1" set="method" line="403"><f a="location:value1:value2:value3:value4">
	<c path="kha.graphics4.ConstantLocation"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<x path="Void"/>
</f></setFloat4>
		<setFloat4Private set="method" line="410">
			<f a="location:value1:value2:value3:value4">
				<c path="kha.kore.graphics4.ConstantLocation"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tKore::Graphics4::setFloat4(location->location, value1, value2, value3, value4);\r\n\t"]]></e></m></meta>
		</setFloat4Private>
		<setVector2 public="1" set="method" line="414"><f a="location:value">
	<c path="kha.graphics4.ConstantLocation"/>
	<c path="kha.math.FastVector2"/>
	<x path="Void"/>
</f></setVector2>
		<setVector2Private set="method" line="421">
			<f a="location:x:y">
				<c path="kha.kore.graphics4.ConstantLocation"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tKore::Graphics4::setFloat2(location->location, x, y);\r\n\t"]]></e></m></meta>
		</setVector2Private>
		<setVector3 public="1" set="method" line="425"><f a="location:value">
	<c path="kha.graphics4.ConstantLocation"/>
	<c path="kha.math.FastVector3"/>
	<x path="Void"/>
</f></setVector3>
		<setVector3Private set="method" line="432">
			<f a="location:x:y:z">
				<c path="kha.kore.graphics4.ConstantLocation"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tKore::Graphics4::setFloat3(location->location, x, y, z);\r\n\t"]]></e></m></meta>
		</setVector3Private>
		<setVector4 public="1" set="method" line="436"><f a="location:value">
	<c path="kha.graphics4.ConstantLocation"/>
	<c path="kha.math.FastVector4"/>
	<x path="Void"/>
</f></setVector4>
		<setVector4Private set="method" line="443">
			<f a="location:x:y:z:w">
				<c path="kha.kore.graphics4.ConstantLocation"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tKore::Graphics4::setFloat4(location->location, x, y, z, w);\r\n\t"]]></e></m></meta>
		</setVector4Private>
		<setFloats public="1" set="method" line="447"><f a="location:values">
	<c path="kha.graphics4.ConstantLocation"/>
	<x path="kha.arrays.Float32Array"/>
	<x path="Void"/>
</f></setFloats>
		<setFloatsPrivate set="method" line="454">
			<f a="location:values">
				<c path="kha.kore.graphics4.ConstantLocation"/>
				<x path="kha.arrays.Float32Array"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tKore::Graphics4::setFloats(location->location, values->self.data, values->self.length());\r\n\t"]]></e></m></meta>
		</setFloatsPrivate>
		<setMatrix public="1" set="method" line="458"><f a="location:matrix">
	<c path="kha.graphics4.ConstantLocation"/>
	<c path="kha.math.FastMatrix4"/>
	<x path="Void"/>
</f></setMatrix>
		<setMatrixPrivate set="method" line="470">
			<f a="location:matrix">
				<c path="kha.kore.graphics4.ConstantLocation"/>
				<c path="kha.math.FastMatrix4"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tKore::mat4 value;\r\n\t\tvalue.Set(0, 0, matrix->_00); value.Set(0, 1, matrix->_10); value.Set(0, 2, matrix->_20); value.Set(0, 3, matrix->_30);\r\n\t\tvalue.Set(1, 0, matrix->_01); value.Set(1, 1, matrix->_11); value.Set(1, 2, matrix->_21); value.Set(1, 3, matrix->_31);\r\n\t\tvalue.Set(2, 0, matrix->_02); value.Set(2, 1, matrix->_12); value.Set(2, 2, matrix->_22); value.Set(2, 3, matrix->_32);\r\n\t\tvalue.Set(3, 0, matrix->_03); value.Set(3, 1, matrix->_13); value.Set(3, 2, matrix->_23); value.Set(3, 3, matrix->_33);\r\n\t\tKore::Graphics4::setMatrix(location->location, value);\r\n\t"]]></e></m></meta>
		</setMatrixPrivate>
		<setMatrix3 public="1" set="method" line="474"><f a="location:matrix">
	<c path="kha.graphics4.ConstantLocation"/>
	<c path="kha.math.FastMatrix3"/>
	<x path="Void"/>
</f></setMatrix3>
		<setMatrix3Private set="method" line="485">
			<f a="location:matrix">
				<c path="kha.kore.graphics4.ConstantLocation"/>
				<c path="kha.math.FastMatrix3"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tKore::mat3 value;\r\n\t\tvalue.Set(0, 0, matrix->_00); value.Set(0, 1, matrix->_10); value.Set(0, 2, matrix->_20);\r\n\t\tvalue.Set(1, 0, matrix->_01); value.Set(1, 1, matrix->_11); value.Set(1, 2, matrix->_21);\r\n\t\tvalue.Set(2, 0, matrix->_02); value.Set(2, 1, matrix->_12); value.Set(2, 2, matrix->_22);\r\n\t\tKore::Graphics4::setMatrix(location->location, value);\r\n\t"]]></e></m></meta>
		</setMatrix3Private>
		<drawIndexedVertices public="1" set="method" line="489">
			<f a="?start:?count" v="0:-1">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ count : -1, start : 0 }</e></m></meta>
		</drawIndexedVertices>
		<drawAllIndexedVertices set="method" line="497">
			<f a=""><x path="Void"/></f>
			<meta><m n=":functionCode"><e>"\r\n\t\tKore::Graphics4::drawIndexedVertices();\r\n\t"</e></m></meta>
		</drawAllIndexedVertices>
		<drawSomeIndexedVertices public="1" set="method" line="504">
			<f a="start:count">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"\r\n\t\tKore::Graphics4::drawIndexedVertices(start, count);\r\n\t"</e></m></meta>
		</drawSomeIndexedVertices>
		<drawIndexedVerticesInstanced public="1" set="method" line="508">
			<f a="instanceCount:?start:?count" v=":0:-1">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ count : -1, start : 0 }</e></m></meta>
		</drawIndexedVerticesInstanced>
		<drawAllIndexedVerticesInstanced set="method" line="516">
			<f a="instanceCount">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"\r\n\t\tKore::Graphics4::drawIndexedVerticesInstanced(instanceCount);\r\n\t"</e></m></meta>
		</drawAllIndexedVerticesInstanced>
		<drawSomeIndexedVerticesInstanced set="method" line="523">
			<f a="instanceCount:start:count">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e>"\r\n\t\tKore::Graphics4::drawIndexedVerticesInstanced(instanceCount, start, count);\r\n\t"</e></m></meta>
		</drawSomeIndexedVerticesInstanced>
		<renderToTexture set="method" line="527">
			<f a="additionalRenderTargets">
				<c path="Array"><c path="kha.Canvas"/></c>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</renderToTexture>
		<renderToBackbuffer set="method" line="547">
			<f a=""><x path="Void"/></f>
			<meta><m n=":functionCode"><e>"Kore::Graphics4::restoreRenderTarget();"</e></m></meta>
		</renderToBackbuffer>
		<begin public="1" set="method" line="551">
			<f a="?additionalRenderTargets" v="null">
				<c path="Array"><c path="kha.Canvas"/></c>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ additionalRenderTargets : null }</e></m>
			</meta>
		</begin>
		<beginFace public="1" set="method" line="573">
			<f a="face">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</beginFace>
		<beginEye public="1" set="method" line="584"><f a="eye">
	<x path="Int"/>
	<x path="Void"/>
</f></beginEye>
		<end public="1" set="method" line="588"><f a=""><x path="Void"/></f></end>
		<flush public="1" set="method" line="598">
			<f a=""><x path="Void"/></f>
			<meta><m n=":functionCode"><e>"Kore::Graphics4::flush();"</e></m></meta>
		</flush>
		<new public="1" set="method" line="50">
			<f a="?target" v="null">
				<c path="kha.Canvas"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ target : null }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":headerCode"><e><![CDATA["\r\n#include <Kore/pch.h>\r\n#include <Kore/Graphics4/Graphics.h>\r\n#include <Kore/Display.h>\r\n#include <Kore/Window.h>\r\n"]]></e></m>
			<m n=":headerClassCode"><e>"Kore::Graphics4::RenderTarget* renderTarget;"</e></m>
		</meta>
	</class>
	<class path="kha.kore.graphics4.Graphics2" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/kore/graphics4/Graphics2.hx">
		<extends path="kha.graphics4.Graphics2"/>
		<drawVideoInternal public="1" set="method" line="13" override="1"><f a="video:x:y:width:height">
	<c path="kha.Video"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawVideoInternal>
		<new public="1" set="method" line="9"><f a="canvas">
	<c path="kha.Canvas"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.kore.graphics4.TextureUnit" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/kore/graphics4/TextureUnit.hx">
		<implements path="kha.graphics4.TextureUnit"/>
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":headerCode"><e><![CDATA["\r\n#include <Kore/pch.h>\r\n#include <Kore/Graphics4/Graphics.h>\r\n"]]></e></m>
			<m n=":headerClassCode"><e>"Kore::Graphics4::TextureUnit unit;"</e></m>
		</meta>
	</class>
	<class path="kha.math.FastMatrix3" params="" file="C:\HaxeLibraries\Kha\Sources/kha/math/FastMatrix3.hx">
		<width get="inline" set="null" expr="3" line="4" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</width>
		<height get="inline" set="null" expr="3" line="5" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</height>
		<fromMatrix3 public="1" get="inline" set="null" line="19" static="1"><f a="m">
	<c path="kha.math.Matrix3"/>
	<c path="kha.math.FastMatrix3"/>
</f></fromMatrix3>
		<translation public="1" get="inline" set="null" line="44" static="1">
			<f a="x:y">
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<c path="kha.math.FastMatrix3"/>
			</f>
			<meta><m n=":extern"/></meta>
		</translation>
		<empty public="1" get="inline" set="null" line="52" static="1">
			<f a=""><c path="kha.math.FastMatrix3"/></f>
			<meta><m n=":extern"/></meta>
		</empty>
		<identity public="1" get="inline" set="null" line="60" static="1">
			<f a=""><c path="kha.math.FastMatrix3"/></f>
			<meta><m n=":extern"/></meta>
		</identity>
		<scale public="1" get="inline" set="null" line="68" static="1">
			<f a="x:y">
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<c path="kha.math.FastMatrix3"/>
			</f>
			<meta><m n=":extern"/></meta>
		</scale>
		<rotation public="1" get="inline" set="null" line="76" static="1">
			<f a="alpha">
				<t path="kha.FastFloat"/>
				<c path="kha.math.FastMatrix3"/>
			</f>
			<meta><m n=":extern"/></meta>
		</rotation>
		<_00 public="1"><t path="kha.FastFloat"/></_00>
		<_10 public="1"><t path="kha.FastFloat"/></_10>
		<_20 public="1"><t path="kha.FastFloat"/></_20>
		<_01 public="1"><t path="kha.FastFloat"/></_01>
		<_11 public="1"><t path="kha.FastFloat"/></_11>
		<_21 public="1"><t path="kha.FastFloat"/></_21>
		<_02 public="1"><t path="kha.FastFloat"/></_02>
		<_12 public="1"><t path="kha.FastFloat"/></_12>
		<_22 public="1"><t path="kha.FastFloat"/></_22>
		<setFrom public="1" get="inline" set="null" line="38">
			<f a="m">
				<c path="kha.math.FastMatrix3"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</setFrom>
		<add public="1" get="inline" set="null" line="84">
			<f a="m">
				<c path="kha.math.FastMatrix3"/>
				<c path="kha.math.FastMatrix3"/>
			</f>
			<meta><m n=":extern"/></meta>
		</add>
		<sub public="1" get="inline" set="null" line="92">
			<f a="m">
				<c path="kha.math.FastMatrix3"/>
				<c path="kha.math.FastMatrix3"/>
			</f>
			<meta><m n=":extern"/></meta>
		</sub>
		<mult public="1" get="inline" set="null" line="100">
			<f a="value">
				<t path="kha.FastFloat"/>
				<c path="kha.math.FastMatrix3"/>
			</f>
			<meta><m n=":extern"/></meta>
		</mult>
		<transpose public="1" get="inline" set="null" line="108">
			<f a=""><c path="kha.math.FastMatrix3"/></f>
			<meta><m n=":extern"/></meta>
		</transpose>
		<trace public="1" get="inline" set="null" line="116">
			<f a=""><t path="kha.FastFloat"/></f>
			<meta><m n=":extern"/></meta>
		</trace>
		<multmat public="1" get="inline" set="null" line="120">
			<f a="m">
				<c path="kha.math.FastMatrix3"/>
				<c path="kha.math.FastMatrix3"/>
			</f>
			<meta><m n=":extern"/></meta>
		</multmat>
		<multvec public="1" get="inline" set="null" line="128">
			<f a="value">
				<c path="kha.math.FastVector2"/>
				<c path="kha.math.FastVector2"/>
			</f>
			<meta><m n=":extern"/></meta>
		</multvec>
		<cofactor public="1" get="inline" set="null" line="137">
			<f a="m0:m1:m2:m3">
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<x path="Float"/>
			</f>
			<meta><m n=":extern"/></meta>
		</cofactor>
		<determinant public="1" get="inline" set="null" line="141">
			<f a=""><t path="kha.FastFloat"/></f>
			<meta><m n=":extern"/></meta>
		</determinant>
		<inverse public="1" get="inline" set="null" line="148">
			<f a=""><c path="kha.math.FastMatrix3"/></f>
			<meta><m n=":extern"/></meta>
		</inverse>
		<new public="1" get="inline" set="null" line="11"><f a="_00:_10:_20:_01:_11:_21:_02:_12:_22">
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.math.FastMatrix4" params="" file="C:\HaxeLibraries\Kha\Sources/kha/math/FastMatrix4.hx">
		<width get="inline" set="null" expr="4" line="4" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</width>
		<height get="inline" set="null" expr="4" line="5" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</height>
		<fromMatrix4 public="1" get="inline" set="null" line="22" static="1"><f a="m">
	<c path="kha.math.Matrix4"/>
	<c path="kha.math.FastMatrix4"/>
</f></fromMatrix4>
		<translation public="1" get="inline" set="null" line="36" static="1">
			<f a="x:y:z">
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<c path="kha.math.FastMatrix4"/>
			</f>
			<meta><m n=":extern"/></meta>
		</translation>
		<empty public="1" get="inline" set="null" line="45" static="1">
			<f a=""><c path="kha.math.FastMatrix4"/></f>
			<meta><m n=":extern"/></meta>
		</empty>
		<identity public="1" get="inline" set="null" line="54" static="1">
			<f a=""><c path="kha.math.FastMatrix4"/></f>
			<meta><m n=":extern"/></meta>
		</identity>
		<scale public="1" get="inline" set="null" line="63" static="1">
			<f a="x:y:z">
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<c path="kha.math.FastMatrix4"/>
			</f>
			<meta><m n=":extern"/></meta>
		</scale>
		<rotationX public="1" get="inline" set="null" line="72" static="1">
			<f a="alpha">
				<t path="kha.FastFloat"/>
				<c path="kha.math.FastMatrix4"/>
			</f>
			<meta><m n=":extern"/></meta>
		</rotationX>
		<rotationY public="1" get="inline" set="null" line="83" static="1">
			<f a="alpha">
				<t path="kha.FastFloat"/>
				<c path="kha.math.FastMatrix4"/>
			</f>
			<meta><m n=":extern"/></meta>
		</rotationY>
		<rotationZ public="1" get="inline" set="null" line="94" static="1">
			<f a="alpha">
				<t path="kha.FastFloat"/>
				<c path="kha.math.FastMatrix4"/>
			</f>
			<meta><m n=":extern"/></meta>
		</rotationZ>
		<rotation public="1" get="inline" set="null" line="105" static="1">
			<f a="yaw:pitch:roll">
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<c path="kha.math.FastMatrix4"/>
			</f>
			<meta><m n=":extern"/></meta>
		</rotation>
		<orthogonalProjection public="1" get="inline" set="null" line="121" static="1"><f a="left:right:bottom:top:zn:zf">
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<c path="kha.math.FastMatrix4"/>
</f></orthogonalProjection>
		<perspectiveProjection public="1" get="inline" set="null" line="133" static="1"><f a="fovY:aspect:zn:zf">
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<c path="kha.math.FastMatrix4"/>
</f></perspectiveProjection>
		<lookAt public="1" get="inline" set="null" line="144" static="1"><f a="eye:at:up">
	<c path="kha.math.FastVector3"/>
	<c path="kha.math.FastVector3"/>
	<c path="kha.math.FastVector3"/>
	<c path="kha.math.FastMatrix4"/>
</f></lookAt>
		<_00 public="1"><t path="kha.FastFloat"/></_00>
		<_10 public="1"><t path="kha.FastFloat"/></_10>
		<_20 public="1"><t path="kha.FastFloat"/></_20>
		<_30 public="1"><t path="kha.FastFloat"/></_30>
		<_01 public="1"><t path="kha.FastFloat"/></_01>
		<_11 public="1"><t path="kha.FastFloat"/></_11>
		<_21 public="1"><t path="kha.FastFloat"/></_21>
		<_31 public="1"><t path="kha.FastFloat"/></_31>
		<_02 public="1"><t path="kha.FastFloat"/></_02>
		<_12 public="1"><t path="kha.FastFloat"/></_12>
		<_22 public="1"><t path="kha.FastFloat"/></_22>
		<_32 public="1"><t path="kha.FastFloat"/></_32>
		<_03 public="1"><t path="kha.FastFloat"/></_03>
		<_13 public="1"><t path="kha.FastFloat"/></_13>
		<_23 public="1"><t path="kha.FastFloat"/></_23>
		<_33 public="1"><t path="kha.FastFloat"/></_33>
		<setFrom public="1" get="inline" set="null" line="29">
			<f a="m">
				<c path="kha.math.FastMatrix4"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</setFrom>
		<add public="1" get="inline" set="null" line="157">
			<f a="m">
				<c path="kha.math.FastMatrix4"/>
				<c path="kha.math.FastMatrix4"/>
			</f>
			<meta><m n=":extern"/></meta>
		</add>
		<sub public="1" get="inline" set="null" line="166">
			<f a="m">
				<c path="kha.math.FastMatrix4"/>
				<c path="kha.math.FastMatrix4"/>
			</f>
			<meta><m n=":extern"/></meta>
		</sub>
		<mult public="1" get="inline" set="null" line="175">
			<f a="value">
				<t path="kha.FastFloat"/>
				<c path="kha.math.FastMatrix4"/>
			</f>
			<meta><m n=":extern"/></meta>
		</mult>
		<transpose public="1" get="inline" set="null" line="184">
			<f a=""><c path="kha.math.FastMatrix4"/></f>
			<meta><m n=":extern"/></meta>
		</transpose>
		<transpose3x3 public="1" get="inline" set="null" line="193">
			<f a=""><c path="kha.math.FastMatrix4"/></f>
			<meta><m n=":extern"/></meta>
		</transpose3x3>
		<trace public="1" get="inline" set="null" line="202">
			<f a=""><t path="kha.FastFloat"/></f>
			<meta><m n=":extern"/></meta>
		</trace>
		<multmat public="1" get="inline" set="null" line="206">
			<f a="m">
				<c path="kha.math.FastMatrix4"/>
				<c path="kha.math.FastMatrix4"/>
			</f>
			<meta><m n=":extern"/></meta>
		</multmat>
		<multvec public="1" get="inline" set="null" line="215">
			<f a="value">
				<c path="kha.math.FastVector4"/>
				<c path="kha.math.FastVector4"/>
			</f>
			<meta><m n=":extern"/></meta>
		</multvec>
		<cofactor public="1" get="inline" set="null" line="224">
			<f a="m0:m1:m2:m3:m4:m5:m6:m7:m8">
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
			</f>
			<meta><m n=":extern"/></meta>
		</cofactor>
		<determinant public="1" get="inline" set="null" line="230">
			<f a=""><t path="kha.FastFloat"/></f>
			<meta><m n=":extern"/></meta>
		</determinant>
		<inverse public="1" get="inline" set="null" line="238">
			<f a=""><c path="kha.math.FastMatrix4"/></f>
			<meta><m n=":extern"/></meta>
		</inverse>
		<new public="1" get="inline" set="null" line="12"><f a="_00:_10:_20:_30:_01:_11:_21:_31:_02:_12:_22:_32:_03:_13:_23:_33">
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.math.FastVector2" params="" file="C:\HaxeLibraries\Kha\Sources/kha/math/FastVector2.hx">
		<fromVector2 public="1" set="method" line="10" static="1"><f a="v">
	<c path="kha.math.Vector2"/>
	<c path="kha.math.FastVector2"/>
</f></fromVector2>
		<x public="1"><t path="kha.FastFloat"/></x>
		<y public="1"><t path="kha.FastFloat"/></y>
		<length public="1" get="accessor" set="accessor"><t path="kha.FastFloat"/></length>
		<setFrom public="1" get="inline" set="null" line="18">
			<f a="v">
				<c path="kha.math.FastVector2"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</setFrom>
		<get_length get="inline" set="null" line="23"><f a=""><t path="kha.FastFloat"/></f></get_length>
		<set_length get="inline" set="null" line="27"><f a="length">
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
</f></set_length>
		<add public="1" get="inline" set="null" line="36">
			<f a="vec">
				<c path="kha.math.FastVector2"/>
				<c path="kha.math.FastVector2"/>
			</f>
			<meta><m n=":extern"/></meta>
		</add>
		<sub public="1" get="inline" set="null" line="40">
			<f a="vec">
				<c path="kha.math.FastVector2"/>
				<c path="kha.math.FastVector2"/>
			</f>
			<meta><m n=":extern"/></meta>
		</sub>
		<mult public="1" get="inline" set="null" line="44">
			<f a="value">
				<t path="kha.FastFloat"/>
				<c path="kha.math.FastVector2"/>
			</f>
			<meta><m n=":extern"/></meta>
		</mult>
		<div public="1" get="inline" set="null" line="48">
			<f a="value">
				<t path="kha.FastFloat"/>
				<c path="kha.math.FastVector2"/>
			</f>
			<meta><m n=":extern"/></meta>
		</div>
		<dot public="1" get="inline" set="null" line="52">
			<f a="v">
				<c path="kha.math.FastVector2"/>
				<t path="kha.FastFloat"/>
			</f>
			<meta><m n=":extern"/></meta>
		</dot>
		<normalize public="1" get="inline" set="null" line="57">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":deprecated"><e>"normalize() will be deprecated soon, use the immutable normalized() instead"</e></m>
				<m n=":extern"/>
			</meta>
		</normalize>
		<normalized public="1" get="inline" set="null" line="61">
			<f a=""><c path="kha.math.FastVector2"/></f>
			<meta><m n=":extern"/></meta>
		</normalized>
		<angle public="1" get="inline" set="null" line="67">
			<f a="v">
				<c path="kha.math.FastVector2"/>
				<t path="kha.FastFloat"/>
			</f>
			<meta><m n=":extern"/></meta>
		</angle>
		<toString public="1" set="method" line="71"><f a=""><c path="String"/></f></toString>
		<new public="1" get="inline" set="null" line="5">
			<f a="?x:?y" v="0:0">
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ y : 0, x : 0 }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="kha.math.FastVector3" params="" file="C:\HaxeLibraries\Kha\Sources/kha/math/FastVector3.hx">
		<fromVector3 public="1" set="method" line="11" static="1"><f a="v">
	<c path="kha.math.Vector3"/>
	<c path="kha.math.FastVector3"/>
</f></fromVector3>
		<x public="1"><t path="kha.FastFloat"/></x>
		<y public="1"><t path="kha.FastFloat"/></y>
		<z public="1"><t path="kha.FastFloat"/></z>
		<length public="1" get="accessor" set="accessor"><t path="kha.FastFloat"/></length>
		<setFrom public="1" get="inline" set="null" line="20">
			<f a="v">
				<c path="kha.math.FastVector3"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</setFrom>
		<get_length get="inline" set="null" line="26"><f a=""><t path="kha.FastFloat"/></f></get_length>
		<set_length set="method" line="30"><f a="length">
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
</f></set_length>
		<add public="1" get="inline" set="null" line="40">
			<f a="vec">
				<c path="kha.math.FastVector3"/>
				<c path="kha.math.FastVector3"/>
			</f>
			<meta><m n=":extern"/></meta>
		</add>
		<sub public="1" get="inline" set="null" line="44">
			<f a="vec">
				<c path="kha.math.FastVector3"/>
				<c path="kha.math.FastVector3"/>
			</f>
			<meta><m n=":extern"/></meta>
		</sub>
		<mult public="1" get="inline" set="null" line="48">
			<f a="value">
				<t path="kha.FastFloat"/>
				<c path="kha.math.FastVector3"/>
			</f>
			<meta><m n=":extern"/></meta>
		</mult>
		<dot public="1" get="inline" set="null" line="52">
			<f a="v">
				<c path="kha.math.FastVector3"/>
				<t path="kha.FastFloat"/>
			</f>
			<meta><m n=":extern"/></meta>
		</dot>
		<cross public="1" get="inline" set="null" line="56">
			<f a="v">
				<c path="kha.math.FastVector3"/>
				<c path="kha.math.FastVector3"/>
			</f>
			<meta><m n=":extern"/></meta>
		</cross>
		<normalize public="1" get="inline" set="null" line="64">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":deprecated"><e>"normalize() will be deprecated soon, use the immutable normalized() instead"</e></m>
				<m n=":extern"/>
			</meta>
		</normalize>
		<normalized public="1" get="inline" set="null" line="68">
			<f a=""><c path="kha.math.FastVector3"/></f>
			<meta><m n=":extern"/></meta>
		</normalized>
		<toString public="1" set="method" line="74"><f a=""><c path="String"/></f></toString>
		<new public="1" get="inline" set="null" line="5">
			<f a="?x:?y:?z" v="0:0:0">
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ z : 0, y : 0, x : 0 }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="kha.math.FastVector4" params="" file="C:\HaxeLibraries\Kha\Sources/kha/math/FastVector4.hx">
		<fromVector4 public="1" set="method" line="12" static="1"><f a="v">
	<c path="kha.math.Vector4"/>
	<c path="kha.math.FastVector4"/>
</f></fromVector4>
		<x public="1"><t path="kha.FastFloat"/></x>
		<y public="1"><t path="kha.FastFloat"/></y>
		<z public="1"><t path="kha.FastFloat"/></z>
		<w public="1"><t path="kha.FastFloat"/></w>
		<length public="1" get="accessor" set="accessor"><t path="kha.FastFloat"/></length>
		<setFrom public="1" get="inline" set="null" line="22">
			<f a="v">
				<c path="kha.math.FastVector4"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</setFrom>
		<get_length get="inline" set="null" line="29"><f a=""><t path="kha.FastFloat"/></f></get_length>
		<set_length set="method" line="33"><f a="length">
	<t path="kha.FastFloat"/>
	<t path="kha.FastFloat"/>
</f></set_length>
		<add public="1" get="inline" set="null" line="44">
			<f a="vec">
				<c path="kha.math.FastVector4"/>
				<c path="kha.math.FastVector4"/>
			</f>
			<meta><m n=":extern"/></meta>
		</add>
		<sub public="1" get="inline" set="null" line="48">
			<f a="vec">
				<c path="kha.math.FastVector4"/>
				<c path="kha.math.FastVector4"/>
			</f>
			<meta><m n=":extern"/></meta>
		</sub>
		<mult public="1" get="inline" set="null" line="52">
			<f a="value">
				<t path="kha.FastFloat"/>
				<c path="kha.math.FastVector4"/>
			</f>
			<meta><m n=":extern"/></meta>
		</mult>
		<normalize public="1" get="inline" set="null" line="57">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":deprecated"><e>"normalize() will be deprecated soon, use the immutable normalized() instead"</e></m>
				<m n=":extern"/>
			</meta>
		</normalize>
		<normalized public="1" get="inline" set="null" line="61">
			<f a=""><c path="kha.math.FastVector4"/></f>
			<meta><m n=":extern"/></meta>
		</normalized>
		<toString public="1" set="method" line="67"><f a=""><c path="String"/></f></toString>
		<new public="1" get="inline" set="null" line="5">
			<f a="?x:?y:?z:?w" v="0:0:0:1">
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 1, z : 0, y : 0, x : 0 }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="kha.math.Matrix3" params="" file="C:\HaxeLibraries\Kha\Sources/kha/math/Matrix3.hx">
		<width get="inline" set="null" expr="3" line="4" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</width>
		<height get="inline" set="null" expr="3" line="5" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</height>
		<fromFastMatrix3 public="1" get="inline" set="null" line="19" static="1"><f a="m">
	<c path="kha.math.FastMatrix3"/>
	<c path="kha.math.Matrix3"/>
</f></fromFastMatrix3>
		<translation public="1" get="inline" set="null" line="44" static="1">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<c path="kha.math.Matrix3"/>
			</f>
			<meta><m n=":extern"/></meta>
		</translation>
		<empty public="1" get="inline" set="null" line="52" static="1">
			<f a=""><c path="kha.math.Matrix3"/></f>
			<meta><m n=":extern"/></meta>
		</empty>
		<identity public="1" get="inline" set="null" line="60" static="1">
			<f a=""><c path="kha.math.Matrix3"/></f>
			<meta><m n=":extern"/></meta>
		</identity>
		<scale public="1" get="inline" set="null" line="68" static="1">
			<f a="x:y">
				<x path="Float"/>
				<x path="Float"/>
				<c path="kha.math.Matrix3"/>
			</f>
			<meta><m n=":extern"/></meta>
		</scale>
		<rotation public="1" get="inline" set="null" line="76" static="1">
			<f a="alpha">
				<x path="Float"/>
				<c path="kha.math.Matrix3"/>
			</f>
			<meta><m n=":extern"/></meta>
		</rotation>
		<_00 public="1"><x path="Float"/></_00>
		<_10 public="1"><x path="Float"/></_10>
		<_20 public="1"><x path="Float"/></_20>
		<_01 public="1"><x path="Float"/></_01>
		<_11 public="1"><x path="Float"/></_11>
		<_21 public="1"><x path="Float"/></_21>
		<_02 public="1"><x path="Float"/></_02>
		<_12 public="1"><x path="Float"/></_12>
		<_22 public="1"><x path="Float"/></_22>
		<setFrom public="1" get="inline" set="null" line="38">
			<f a="m">
				<c path="kha.math.Matrix3"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</setFrom>
		<add public="1" get="inline" set="null" line="84">
			<f a="m">
				<c path="kha.math.Matrix3"/>
				<c path="kha.math.Matrix3"/>
			</f>
			<meta><m n=":extern"/></meta>
		</add>
		<sub public="1" get="inline" set="null" line="92">
			<f a="m">
				<c path="kha.math.Matrix3"/>
				<c path="kha.math.Matrix3"/>
			</f>
			<meta><m n=":extern"/></meta>
		</sub>
		<mult public="1" get="inline" set="null" line="100">
			<f a="value">
				<x path="Float"/>
				<c path="kha.math.Matrix3"/>
			</f>
			<meta><m n=":extern"/></meta>
		</mult>
		<transpose public="1" get="inline" set="null" line="108">
			<f a=""><c path="kha.math.Matrix3"/></f>
			<meta><m n=":extern"/></meta>
		</transpose>
		<trace public="1" get="inline" set="null" line="116">
			<f a=""><x path="Float"/></f>
			<meta><m n=":extern"/></meta>
		</trace>
		<multmat public="1" get="inline" set="null" line="120">
			<f a="m">
				<c path="kha.math.Matrix3"/>
				<c path="kha.math.Matrix3"/>
			</f>
			<meta><m n=":extern"/></meta>
		</multmat>
		<multvec public="1" get="inline" set="null" line="128">
			<f a="value">
				<c path="kha.math.Vector2"/>
				<c path="kha.math.Vector2"/>
			</f>
			<meta><m n=":extern"/></meta>
		</multvec>
		<cofactor public="1" get="inline" set="null" line="136">
			<f a="m0:m1:m2:m3">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":extern"/></meta>
		</cofactor>
		<determinant public="1" get="inline" set="null" line="140">
			<f a=""><x path="Float"/></f>
			<meta><m n=":extern"/></meta>
		</determinant>
		<inverse public="1" get="inline" set="null" line="147">
			<f a=""><c path="kha.math.Matrix3"/></f>
			<meta><m n=":extern"/></meta>
		</inverse>
		<new public="1" get="inline" set="null" line="11"><f a="_00:_10:_20:_01:_11:_21:_02:_12:_22">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="kha.math.Matrix4" params="" file="C:\HaxeLibraries\Kha\Sources/kha/math/Matrix4.hx">
		<width get="inline" set="null" expr="4" line="4" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</width>
		<height get="inline" set="null" expr="4" line="5" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</height>
		<fromFastMatrix4 public="1" get="inline" set="null" line="22" static="1"><f a="m">
	<c path="kha.math.FastMatrix4"/>
	<c path="kha.math.Matrix4"/>
</f></fromFastMatrix4>
		<translation public="1" get="inline" set="null" line="36" static="1">
			<f a="x:y:z">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="kha.math.Matrix4"/>
			</f>
			<meta><m n=":extern"/></meta>
		</translation>
		<empty public="1" get="inline" set="null" line="45" static="1">
			<f a=""><c path="kha.math.Matrix4"/></f>
			<meta><m n=":extern"/></meta>
		</empty>
		<identity public="1" get="inline" set="null" line="54" static="1">
			<f a=""><c path="kha.math.Matrix4"/></f>
			<meta><m n=":extern"/></meta>
		</identity>
		<scale public="1" get="inline" set="null" line="63" static="1">
			<f a="x:y:z">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="kha.math.Matrix4"/>
			</f>
			<meta><m n=":extern"/></meta>
		</scale>
		<rotationX public="1" get="inline" set="null" line="72" static="1">
			<f a="alpha">
				<x path="Float"/>
				<c path="kha.math.Matrix4"/>
			</f>
			<meta><m n=":extern"/></meta>
		</rotationX>
		<rotationY public="1" get="inline" set="null" line="83" static="1">
			<f a="alpha">
				<x path="Float"/>
				<c path="kha.math.Matrix4"/>
			</f>
			<meta><m n=":extern"/></meta>
		</rotationY>
		<rotationZ public="1" get="inline" set="null" line="94" static="1">
			<f a="alpha">
				<x path="Float"/>
				<c path="kha.math.Matrix4"/>
			</f>
			<meta><m n=":extern"/></meta>
		</rotationZ>
		<rotation public="1" get="inline" set="null" line="105" static="1">
			<f a="yaw:pitch:roll">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="kha.math.Matrix4"/>
			</f>
			<meta><m n=":extern"/></meta>
		</rotation>
		<orthogonalProjection public="1" set="method" line="121" static="1"><f a="left:right:bottom:top:zn:zf">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="kha.math.Matrix4"/>
</f></orthogonalProjection>
		<perspectiveProjection public="1" set="method" line="133" static="1"><f a="fovY:aspect:zn:zf">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="kha.math.Matrix4"/>
</f></perspectiveProjection>
		<lookAt public="1" set="method" line="144" static="1"><f a="eye:at:up">
	<c path="kha.math.Vector3"/>
	<c path="kha.math.Vector3"/>
	<c path="kha.math.Vector3"/>
	<c path="kha.math.Matrix4"/>
</f></lookAt>
		<_00 public="1"><x path="Float"/></_00>
		<_10 public="1"><x path="Float"/></_10>
		<_20 public="1"><x path="Float"/></_20>
		<_30 public="1"><x path="Float"/></_30>
		<_01 public="1"><x path="Float"/></_01>
		<_11 public="1"><x path="Float"/></_11>
		<_21 public="1"><x path="Float"/></_21>
		<_31 public="1"><x path="Float"/></_31>
		<_02 public="1"><x path="Float"/></_02>
		<_12 public="1"><x path="Float"/></_12>
		<_22 public="1"><x path="Float"/></_22>
		<_32 public="1"><x path="Float"/></_32>
		<_03 public="1"><x path="Float"/></_03>
		<_13 public="1"><x path="Float"/></_13>
		<_23 public="1"><x path="Float"/></_23>
		<_33 public="1"><x path="Float"/></_33>
		<setFrom public="1" get="inline" set="null" line="29">
			<f a="m">
				<c path="kha.math.Matrix4"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</setFrom>
		<add public="1" get="inline" set="null" line="157">
			<f a="m">
				<c path="kha.math.Matrix4"/>
				<c path="kha.math.Matrix4"/>
			</f>
			<meta><m n=":extern"/></meta>
		</add>
		<sub public="1" get="inline" set="null" line="166">
			<f a="m">
				<c path="kha.math.Matrix4"/>
				<c path="kha.math.Matrix4"/>
			</f>
			<meta><m n=":extern"/></meta>
		</sub>
		<mult public="1" get="inline" set="null" line="175">
			<f a="value">
				<x path="Float"/>
				<c path="kha.math.Matrix4"/>
			</f>
			<meta><m n=":extern"/></meta>
		</mult>
		<transpose public="1" get="inline" set="null" line="184">
			<f a=""><c path="kha.math.Matrix4"/></f>
			<meta><m n=":extern"/></meta>
		</transpose>
		<transpose3x3 public="1" get="inline" set="null" line="193">
			<f a=""><c path="kha.math.Matrix4"/></f>
			<meta><m n=":extern"/></meta>
		</transpose3x3>
		<trace public="1" get="inline" set="null" line="202">
			<f a=""><x path="Float"/></f>
			<meta><m n=":extern"/></meta>
		</trace>
		<multmat public="1" get="inline" set="null" line="206">
			<f a="m">
				<c path="kha.math.Matrix4"/>
				<c path="kha.math.Matrix4"/>
			</f>
			<meta><m n=":extern"/></meta>
		</multmat>
		<multvec public="1" get="inline" set="null" line="215">
			<f a="value">
				<c path="kha.math.Vector4"/>
				<c path="kha.math.Vector4"/>
			</f>
			<meta><m n=":extern"/></meta>
		</multvec>
		<cofactor public="1" get="inline" set="null" line="224">
			<f a="m0:m1:m2:m3:m4:m5:m6:m7:m8">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":extern"/></meta>
		</cofactor>
		<determinant public="1" get="inline" set="null" line="230">
			<f a=""><x path="Float"/></f>
			<meta><m n=":extern"/></meta>
		</determinant>
		<inverse public="1" get="inline" set="null" line="238">
			<f a=""><c path="kha.math.Matrix4"/></f>
			<meta><m n=":extern"/></meta>
		</inverse>
		<new public="1" get="inline" set="null" line="12"><f a="_00:_10:_20:_30:_01:_11:_21:_31:_02:_12:_22:_32:_03:_13:_23:_33">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.math.Quaternion" params="" file="C:\HaxeLibraries\Kha\Sources/kha/math/Quaternion.hx">
		<fromAxisAngle public="1" get="inline" set="null" line="19" static="1"><f a="axis:radians">
	<c path="kha.math.Vector3"/>
	<x path="Float"/>
	<c path="kha.math.Quaternion"/>
</f></fromAxisAngle>
		<AXIS_X public="1" get="inline" set="null" expr="0" line="210" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</AXIS_X>
		<AXIS_Y public="1" get="inline" set="null" expr="1" line="211" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</AXIS_Y>
		<AXIS_Z public="1" get="inline" set="null" expr="2" line="212" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</AXIS_Z>
		<values><c path="Array"><x path="Float"/></c></values>
		<slerp public="1" set="method" line="29"><f a="t:q">
	<x path="Float"/>
	<c path="kha.math.Quaternion"/>
	<c path="kha.math.Quaternion"/>
</f></slerp>
		<rotated public="1" get="inline" set="null" line="56"><f a="b">
	<c path="kha.math.Quaternion"/>
	<c path="kha.math.Quaternion"/>
</f></rotated>
		<scaled public="1" get="inline" set="null" line="66"><f a="scale">
	<x path="Float"/>
	<c path="kha.math.Quaternion"/>
</f></scaled>
		<scale public="1" get="inline" set="null" line="70"><f a="scale">
	<x path="Float"/>
	<x path="Void"/>
</f></scale>
		<matrix public="1" get="inline" set="null" line="77"><f a=""><c path="kha.math.Matrix4"/></f></matrix>
		<get public="1" get="inline" set="null" line="101"><f a="index">
	<x path="Int"/>
	<x path="Float"/>
</f></get>
		<set public="1" get="inline" set="null" line="105"><f a="index:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></set>
		<x public="1" get="accessor" set="accessor"><x path="Float"/></x>
		<y public="1" get="accessor" set="accessor"><x path="Float"/></y>
		<z public="1" get="accessor" set="accessor"><x path="Float"/></z>
		<w public="1" get="accessor" set="accessor"><x path="Float"/></w>
		<length public="1" get="accessor" set="accessor"><x path="Float"/></length>
		<get_x public="1" set="method" line="115"><f a=""><x path="Float"/></f></get_x>
		<set_x public="1" set="method" line="119"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<get_y public="1" set="method" line="123"><f a=""><x path="Float"/></f></get_y>
		<set_y public="1" set="method" line="127"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<get_z public="1" set="method" line="131"><f a=""><x path="Float"/></f></get_z>
		<set_z public="1" set="method" line="135"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_z>
		<get_w public="1" set="method" line="139"><f a=""><x path="Float"/></f></get_w>
		<set_w public="1" set="method" line="143"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_w>
		<get_length set="method" line="148"><f a=""><x path="Float"/></f></get_length>
		<set_length set="method" line="152"><f a="length">
	<x path="Float"/>
	<x path="Float"/>
</f></set_length>
		<addVector public="1" get="inline" set="null" line="162"><f a="vec">
	<c path="kha.math.Vector3"/>
	<c path="kha.math.Quaternion"/>
</f></addVector>
		<add public="1" get="inline" set="null" line="175"><f a="q">
	<c path="kha.math.Quaternion"/>
	<c path="kha.math.Quaternion"/>
</f></add>
		<sub public="1" get="inline" set="null" line="179"><f a="q">
	<c path="kha.math.Quaternion"/>
	<c path="kha.math.Quaternion"/>
</f></sub>
		<mult public="1" get="inline" set="null" line="184"><f a="r">
	<c path="kha.math.Quaternion"/>
	<c path="kha.math.Quaternion"/>
</f></mult>
		<normalize public="1" get="inline" set="null" line="193"><f a=""><x path="Void"/></f></normalize>
		<dot public="1" get="inline" set="null" line="197"><f a="q">
	<c path="kha.math.Quaternion"/>
	<x path="Float"/>
</f></dot>
		<getEulerAngles public="1" set="method" line="214">
			<f a="A1:A2:A3:?S:?D" v=":::1:1">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="kha.math.Vector3"/>
			</f>
			<meta><m n=":value"><e>{ D : 1, S : 1 }</e></m></meta>
		</getEulerAngles>
		<new public="1" get="inline" set="null" line="10">
			<f a="?x:?y:?z:?w" v="0:0:0:1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 1, z : 0, y : 0, x : 0 }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="kha.math.Random" params="" file="C:\HaxeLibraries\Kha\Sources/kha/math/Random.hx">
		<Default public="1" static="1"><c path="kha.math.Random"/></Default>
		<init public="1" set="method" line="61" static="1"><f a="seed">
	<x path="Int"/>
	<x path="Void"/>
</f></init>
		<get public="1" set="method" line="65" static="1"><f a=""><x path="Int"/></f></get>
		<getFloat public="1" set="method" line="69" static="1"><f a=""><x path="Float"/></f></getFloat>
		<getUpTo public="1" set="method" line="73" static="1"><f a="max">
	<x path="Int"/>
	<x path="Int"/>
</f></getUpTo>
		<getIn public="1" set="method" line="77" static="1"><f a="min:max">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getIn>
		<getFloatIn public="1" set="method" line="81" static="1"><f a="min:max">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></getFloatIn>
		<Get public="1" set="method" line="19"><f a=""><x path="Int"/></f></Get>
		<GetFloat public="1" set="method" line="32"><f a=""><x path="Float"/></f></GetFloat>
		<GetUpTo public="1" set="method" line="36"><f a="max">
	<x path="Int"/>
	<x path="Int"/>
</f></GetUpTo>
		<GetIn public="1" set="method" line="40"><f a="min:max">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></GetIn>
		<GetFloatIn public="1" set="method" line="44"><f a="min:max">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></GetFloatIn>
		<MT><c path="Array"><x path="Int"/></c></MT>
		<index expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</index>
		<GenerateNumbers set="method" line="51"><f a=""><x path="Void"/></f></GenerateNumbers>
		<new public="1" set="method" line="12"><f a="seed">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="kha.math.Vector2" params="" file="C:\HaxeLibraries\Kha\Sources/kha/math/Vector2.hx">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<length public="1" get="accessor" set="accessor"><x path="Float"/></length>
		<setFrom public="1" get="inline" set="null" line="14">
			<f a="v">
				<c path="kha.math.Vector2"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</setFrom>
		<get_length get="inline" set="null" line="19"><f a=""><x path="Float"/></f></get_length>
		<set_length set="method" line="23"><f a="length">
	<x path="Float"/>
	<x path="Float"/>
</f></set_length>
		<add public="1" get="inline" set="null" line="32">
			<f a="vec">
				<c path="kha.math.Vector2"/>
				<c path="kha.math.Vector2"/>
			</f>
			<meta><m n=":extern"/></meta>
		</add>
		<sub public="1" get="inline" set="null" line="36">
			<f a="vec">
				<c path="kha.math.Vector2"/>
				<c path="kha.math.Vector2"/>
			</f>
			<meta><m n=":extern"/></meta>
		</sub>
		<mult public="1" get="inline" set="null" line="40">
			<f a="value">
				<x path="Float"/>
				<c path="kha.math.Vector2"/>
			</f>
			<meta><m n=":extern"/></meta>
		</mult>
		<div public="1" get="inline" set="null" line="44">
			<f a="value">
				<x path="Float"/>
				<c path="kha.math.Vector2"/>
			</f>
			<meta><m n=":extern"/></meta>
		</div>
		<dot public="1" get="inline" set="null" line="48">
			<f a="v">
				<c path="kha.math.Vector2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":extern"/></meta>
		</dot>
		<normalize public="1" get="inline" set="null" line="53">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":deprecated"><e>"normalize() will be deprecated soon, use the immutable normalized() instead"</e></m>
				<m n=":extern"/>
			</meta>
		</normalize>
		<normalized public="1" get="inline" set="null" line="57">
			<f a=""><c path="kha.math.Vector2"/></f>
			<meta><m n=":extern"/></meta>
		</normalized>
		<angle public="1" get="inline" set="null" line="63">
			<f a="v">
				<c path="kha.math.Vector2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":extern"/></meta>
		</angle>
		<fast public="1" get="inline" set="null" line="67">
			<f a=""><c path="kha.math.FastVector2"/></f>
			<meta><m n=":extern"/></meta>
		</fast>
		<new public="1" get="inline" set="null" line="5">
			<f a="?x:?y" v="0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ y : 0, x : 0 }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="kha.math.Vector3" params="" file="C:\HaxeLibraries\Kha\Sources/kha/math/Vector3.hx">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<z public="1"><x path="Float"/></z>
		<length public="1" get="accessor" set="accessor"><x path="Float"/></length>
		<setFrom public="1" get="inline" set="null" line="16">
			<f a="v">
				<c path="kha.math.Vector3"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</setFrom>
		<get_length get="inline" set="null" line="22"><f a=""><x path="Float"/></f></get_length>
		<set_length set="method" line="26"><f a="length">
	<x path="Float"/>
	<x path="Float"/>
</f></set_length>
		<add public="1" get="inline" set="null" line="36">
			<f a="vec">
				<c path="kha.math.Vector3"/>
				<c path="kha.math.Vector3"/>
			</f>
			<meta><m n=":extern"/></meta>
		</add>
		<sub public="1" get="inline" set="null" line="40">
			<f a="vec">
				<c path="kha.math.Vector3"/>
				<c path="kha.math.Vector3"/>
			</f>
			<meta><m n=":extern"/></meta>
		</sub>
		<mult public="1" get="inline" set="null" line="44">
			<f a="value">
				<x path="Float"/>
				<c path="kha.math.Vector3"/>
			</f>
			<meta><m n=":extern"/></meta>
		</mult>
		<dot public="1" get="inline" set="null" line="48">
			<f a="v">
				<c path="kha.math.Vector3"/>
				<x path="Float"/>
			</f>
			<meta><m n=":extern"/></meta>
		</dot>
		<cross public="1" get="inline" set="null" line="52">
			<f a="v">
				<c path="kha.math.Vector3"/>
				<c path="kha.math.Vector3"/>
			</f>
			<meta><m n=":extern"/></meta>
		</cross>
		<normalize public="1" get="inline" set="null" line="60">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":deprecated"><e>"normalize() will be deprecated soon, use the immutable normalized() instead"</e></m>
				<m n=":extern"/>
			</meta>
		</normalize>
		<normalized public="1" get="inline" set="null" line="64">
			<f a=""><c path="kha.math.Vector3"/></f>
			<meta><m n=":extern"/></meta>
		</normalized>
		<fast public="1" get="inline" set="null" line="70">
			<f a=""><c path="kha.math.FastVector3"/></f>
			<meta><m n=":extern"/></meta>
		</fast>
		<new public="1" get="inline" set="null" line="5">
			<f a="?x:?y:?z" v="0:0:0">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ z : 0, y : 0, x : 0 }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="kha.math.Vector4" params="" file="C:\HaxeLibraries\Kha\Sources/kha/math/Vector4.hx">
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<z public="1"><x path="Float"/></z>
		<w public="1"><x path="Float"/></w>
		<length public="1" get="accessor" set="accessor"><x path="Float"/></length>
		<setFrom public="1" get="inline" set="null" line="18">
			<f a="v">
				<c path="kha.math.Vector4"/>
				<x path="Void"/>
			</f>
			<meta><m n=":extern"/></meta>
		</setFrom>
		<get_length get="inline" set="null" line="25"><f a=""><x path="Float"/></f></get_length>
		<set_length set="method" line="29"><f a="length">
	<x path="Float"/>
	<x path="Float"/>
</f></set_length>
		<add public="1" get="inline" set="null" line="40">
			<f a="vec">
				<c path="kha.math.Vector4"/>
				<c path="kha.math.Vector4"/>
			</f>
			<meta><m n=":extern"/></meta>
		</add>
		<sub public="1" get="inline" set="null" line="44">
			<f a="vec">
				<c path="kha.math.Vector4"/>
				<c path="kha.math.Vector4"/>
			</f>
			<meta><m n=":extern"/></meta>
		</sub>
		<mult public="1" get="inline" set="null" line="48">
			<f a="value">
				<x path="Float"/>
				<c path="kha.math.Vector4"/>
			</f>
			<meta><m n=":extern"/></meta>
		</mult>
		<normalize public="1" get="inline" set="null" line="53">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":deprecated"><e>"normalize() will be deprecated soon, use the immutable normalized() instead"</e></m>
				<m n=":extern"/>
			</meta>
		</normalize>
		<normalized public="1" get="inline" set="null" line="57">
			<f a=""><c path="kha.math.Vector4"/></f>
			<meta><m n=":extern"/></meta>
		</normalized>
		<fast public="1" get="inline" set="null" line="63">
			<f a=""><c path="kha.math.FastVector4"/></f>
			<meta><m n=":extern"/></meta>
		</fast>
		<new public="1" get="inline" set="null" line="5">
			<f a="?x:?y:?z:?w" v="0:0:0:1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 1, z : 0, y : 0, x : 0 }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="kha.netsync.Client" params="" file="C:\HaxeLibraries\Kha\Sources/kha/netsync/Client.hx" interface="1">
		<get_id public="1" set="method">
			<f a=""><x path="Int"/></f>
			<meta><m n=":compilerGenerated"/></meta>
		</get_id>
		<id public="1" get="accessor" set="null"><x path="Int"/></id>
		<send public="1" set="method"><f a="bytes:mandatory">
	<c path="haxe.io.Bytes"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></send>
		<receive public="1" set="method"><f a="receiver">
	<f a="">
		<c path="haxe.io.Bytes"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></receive>
		<onClose public="1" set="method"><f a="close">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></onClose>
	</class>
	<class path="kha.netsync.ControllerBuilder" params="" file="C:\HaxeLibraries\Kha\Sources/kha/netsync/ControllerBuilder.hx">
		<nextId public="1" expr="0" line="7" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</nextId>
		<build public="1" set="method" static="1"><f a=""><d/></f></build>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.netsync.Entity" params="" file="C:\HaxeLibraries\Kha\Sources/kha/netsync/Entity.hx" interface="1">
		<_id public="1" set="method"><f a=""><x path="Int"/></f></_id>
		<_size public="1" set="method"><f a=""><x path="Int"/></f></_size>
		<_send public="1" set="method"><f a="offset:bytes">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></_send>
		<_receive public="1" set="method"><f a="offset:bytes">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></_receive>
		<meta><m n=":autoBuild"><e>kha.netsync.EntityBuilder.build()</e></m></meta>
	</class>
	<class path="kha.netsync.LocalClient" params="" file="C:\HaxeLibraries\Kha\Sources/kha/netsync/LocalClient.hx">
		<implements path="kha.netsync.Client"/>
		<myId><x path="Int"/></myId>
		<send public="1" set="method" line="12"><f a="bytes:mandatory">
	<c path="haxe.io.Bytes"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></send>
		<receive public="1" set="method" line="16"><f a="receiver">
	<f a="">
		<c path="haxe.io.Bytes"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></receive>
		<onClose public="1" set="method" line="20"><f a="close">
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></onClose>
		<controllers public="1" get="accessor" set="null"><c path="Array"><c path="kha.netsync.Controller"/></c></controllers>
		<get_controllers public="1" set="method" line="26"><f a=""><c path="Array"><c path="kha.netsync.Controller"/></c></f></get_controllers>
		<id public="1" get="accessor" set="null"><x path="Int"/></id>
		<get_id public="1" set="method" line="32"><f a=""><x path="Int"/></f></get_id>
		<new public="1" set="method" line="8"><f a="id">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.netsync.Network" params="" file="C:\HaxeLibraries\Kha\Backends\Kore/kha/netsync/Network.hx">
		<url><c path="String"/></url>
		<port><x path="Int"/></port>
		<bufferPos><x path="Int"/></bufferPos>
		<buffer><c path="haxe.io.Bytes"/></buffer>
		<tempBuffer><c path="haxe.io.Bytes"/></tempBuffer>
		<listener><f a="">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></listener>
		<init public="1" set="method" line="34">
			<f a="url:port">
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tsocket = new Kore::Socket();\r\n\t\tsocket->open(port);\r\n\t"]]></e></m></meta>
		</init>
		<send public="1" set="method" line="42">
			<f a="bytes:mandatory">
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\t// TODO: mandatory\r\n\t\tsocket->send(url, port, (const unsigned char*)bytes->b->getBase(), bytes->length);\r\n\t"]]></e></m></meta>
		</send>
		<listen public="1" set="method" line="46"><f a="listener">
	<f a="">
		<c path="haxe.io.Bytes"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></listen>
		<update set="method" line="50"><f a=""><x path="Void"/></f></update>
		<getBytesFromSocket set="method" line="76">
			<f a="inBuffer">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
			</f>
			<meta><m n=":functionCode"><e><![CDATA["\r\n\t\tunsigned int recAddr;\r\n\t\tunsigned int recPort;\r\n\t\tint size = socket->receive((unsigned char*)inBuffer->b->getBase(), inBuffer->length, recAddr, recPort);\r\n\t\tif (size >= 0) {\r\n\t\t\treturn size;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t"]]></e></m></meta>
		</getBytesFromSocket>
		<new public="1" set="method" line="20"><f a="url:port:errorCallback:closeCallback">
	<c path="String"/>
	<x path="Int"/>
	<f a=""><x path="Void"/></f>
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":headerCode"><e><![CDATA["\r\n#include <Kore/Network/Socket.h>\r\n"]]></e></m>
			<m n=":headerClassCode"><e>"\r\n\tKore::Socket *socket;\r\n"</e></m>
		</meta>
	</class>
	<class path="kha.netsync.State" params="" file="C:\HaxeLibraries\Kha\Sources/kha/netsync/Session.hx" module="kha.netsync.Session">
		<time public="1"><x path="Float"/></time>
		<data public="1"><c path="haxe.io.Bytes"/></data>
		<new public="1" set="method" line="19"><f a="time:data">
	<x path="Float"/>
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="kha.netsync.Session" params="" file="C:\HaxeLibraries\Kha\Sources/kha/netsync/Session.hx">
		<START public="1" get="inline" set="null" expr="0" line="26" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</START>
		<ENTITY_UPDATES public="1" get="inline" set="null" expr="1" line="27" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ENTITY_UPDATES>
		<CONTROLLER_UPDATES public="1" get="inline" set="null" expr="2" line="28" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</CONTROLLER_UPDATES>
		<REMOTE_CALL public="1" get="inline" set="null" expr="3" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</REMOTE_CALL>
		<PING public="1" get="inline" set="null" expr="4" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</PING>
		<SESSION_ERROR public="1" get="inline" set="null" expr="5" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5</e></m></meta>
		</SESSION_ERROR>
		<PLAYER_UPDATES public="1" get="inline" set="null" expr="6" line="32" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>6</e></m></meta>
		</PLAYER_UPDATES>
		<RPC_SERVER public="1" get="inline" set="null" expr="0" line="34" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</RPC_SERVER>
		<RPC_ALL public="1" get="inline" set="null" expr="1" line="35" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</RPC_ALL>
		<instance expr="null" line="37" static="1">
			<c path="kha.netsync.Session"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</instance>
		<the public="1" set="method" line="79" static="1"><f a=""><c path="kha.netsync.Session"/></f></the>
		<entities expr="new Map()">
			<t path="Map">
				<x path="Int"/>
				<c path="kha.netsync.Entity"/>
			</t>
			<meta><m n=":value"><e>new Map()</e></m></meta>
		</entities>
		<controllers expr="new Map()">
			<t path="Map">
				<x path="Int"/>
				<c path="kha.netsync.Controller"/>
			</t>
			<meta><m n=":value"><e>new Map()</e></m></meta>
		</controllers>
		<maxPlayers public="1"><x path="Int"/></maxPlayers>
		<currentPlayers public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</currentPlayers>
		<ping public="1" expr="1">
			<x path="Float"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</ping>
		<address><c path="String"/></address>
		<port><x path="Int"/></port>
		<startCallback><f a=""><x path="Void"/></f></startCallback>
		<refusedCallback><f a=""><x path="Void"/></f></refusedCallback>
		<resetCallback><f a=""><x path="Void"/></f></resetCallback>
		<localClient><c path="kha.netsync.Client"/></localClient>
		<network public="1"><c path="kha.netsync.Network"/></network>
		<updateTaskId><x path="Int"/></updateTaskId>
		<pingTaskId><x path="Int"/></pingTaskId>
		<me public="1" get="accessor" set="null"><c path="kha.netsync.Client"/></me>
		<get_me set="method" line="64"><f a=""><c path="kha.netsync.Client"/></f></get_me>
		<addEntity public="1" set="method" line="83"><f a="entity">
	<c path="kha.netsync.Entity"/>
	<x path="Void"/>
</f></addEntity>
		<addController public="1" set="method" line="87"><f a="controller">
	<c path="kha.netsync.Controller"/>
	<x path="Void"/>
</f></addController>
		<sendControllerUpdate public="1" set="method" line="119"><f a="id:bytes">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></sendControllerUpdate>
		<sendPing set="method" line="135"><f a=""><x path="Void"/></f></sendPing>
		<sendPlayerUpdate set="method" line="145"><f a=""><x path="Void"/></f></sendPlayerUpdate>
		<receive public="1" set="method" line="156">
			<f a="bytes:?client" v=":null">
				<c path="haxe.io.Bytes"/>
				<c path="kha.netsync.Client"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ client : null }</e></m></meta>
		</receive>
		<executeRPC set="method" line="267"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></executeRPC>
		<waitForStart public="1" set="method" line="329"><f a="callback:refuseCallback:errorCallback:closeCallback:resCallback">
	<f a=""><x path="Void"/></f>
	<f a=""><x path="Void"/></f>
	<f a=""><x path="Void"/></f>
	<f a=""><x path="Void"/></f>
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></waitForStart>
		<reset set="method" line="397"><f a=""><x path="Void"/></f></reset>
		<update public="1" set="method" line="412"><f a=""><x path="Void"/></f></update>
		<sendToServer public="1" set="method" line="445"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></sendToServer>
		<new public="1" set="method" line="72"><f a="maxPlayers:address:port">
	<x path="Int"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.netsync.SyncBuilder" params="" file="C:\HaxeLibraries\Kha\Sources/kha/netsync/SyncBuilder.hx">
		<nextId public="1" expr="0" line="8" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</nextId>
		<objects public="1" expr="new Array&lt;Dynamic&gt;()" line="9" static="1">
			<c path="Array"><d/></c>
			<meta><m n=":value"><e><![CDATA[new Array<Dynamic>()]]></e></m></meta>
		</objects>
		<build public="1" set="method" static="1"><f a=""><d/></f></build>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.simd.Float32x4" params="" file="C:\HaxeLibraries\Kha\Sources/kha/simd/Float32x4.hx" extern="1">
		<create public="1" set="method" static="1">
			<f a=""><c path="kha.simd.Float32x4"/></f>
			<meta><m n=":native"><e>"Kore::float32x4"</e></m></meta>
		</create>
		<loadAllFast public="1" set="method" static="1">
			<f a="t">
				<t path="kha.FastFloat"/>
				<c path="kha.simd.Float32x4"/>
			</f>
			<meta><m n=":native"><e>"Kore::loadAll"</e></m></meta>
		</loadAllFast>
		<load public="1" set="method" static="1">
			<f a="a:b:c:d">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="kha.simd.Float32x4"/>
			</f>
			<meta><m n=":native"><e>"Kore::load"</e></m></meta>
		</load>
		<loadFast public="1" set="method" static="1">
			<f a="a:b:c:d">
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<t path="kha.FastFloat"/>
				<c path="kha.simd.Float32x4"/>
			</f>
			<meta><m n=":native"><e>"Kore::load"</e></m></meta>
		</loadFast>
		<get public="1" set="method" static="1">
			<f a="t:index">
				<c path="kha.simd.Float32x4"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":native"><e>"Kore::get"</e></m></meta>
		</get>
		<getFast public="1" set="method" static="1">
			<f a="t:index">
				<c path="kha.simd.Float32x4"/>
				<x path="Int"/>
				<t path="kha.FastFloat"/>
			</f>
			<meta><m n=":native"><e>"Kore::get"</e></m></meta>
		</getFast>
		<abs public="1" set="method" static="1">
			<f a="t">
				<c path="kha.simd.Float32x4"/>
				<c path="kha.simd.Float32x4"/>
			</f>
			<meta><m n=":native"><e>"Kore::abs"</e></m></meta>
		</abs>
		<add public="1" set="method" static="1">
			<f a="a:b">
				<c path="kha.simd.Float32x4"/>
				<c path="kha.simd.Float32x4"/>
				<c path="kha.simd.Float32x4"/>
			</f>
			<meta><m n=":native"><e>"Kore::add"</e></m></meta>
		</add>
		<div public="1" set="method" static="1">
			<f a="a:b">
				<c path="kha.simd.Float32x4"/>
				<c path="kha.simd.Float32x4"/>
				<c path="kha.simd.Float32x4"/>
			</f>
			<meta><m n=":native"><e>"Kore::div"</e></m></meta>
		</div>
		<mul public="1" set="method" static="1">
			<f a="a:b">
				<c path="kha.simd.Float32x4"/>
				<c path="kha.simd.Float32x4"/>
				<c path="kha.simd.Float32x4"/>
			</f>
			<meta><m n=":native"><e>"Kore::mul"</e></m></meta>
		</mul>
		<neg public="1" set="method" static="1">
			<f a="t">
				<c path="kha.simd.Float32x4"/>
				<c path="kha.simd.Float32x4"/>
			</f>
			<meta><m n=":native"><e>"Kore::neg"</e></m></meta>
		</neg>
		<reciprocalApproximation public="1" set="method" static="1">
			<f a="t">
				<c path="kha.simd.Float32x4"/>
				<c path="kha.simd.Float32x4"/>
			</f>
			<meta><m n=":native"><e>"Kore::reciprocalApproximation"</e></m></meta>
		</reciprocalApproximation>
		<reciprocalSqrtApproximation public="1" set="method" static="1">
			<f a="t">
				<c path="kha.simd.Float32x4"/>
				<c path="kha.simd.Float32x4"/>
			</f>
			<meta><m n=":native"><e>"Kore::reciprocalSqrtApproximation"</e></m></meta>
		</reciprocalSqrtApproximation>
		<sub public="1" set="method" static="1">
			<f a="a:b">
				<c path="kha.simd.Float32x4"/>
				<c path="kha.simd.Float32x4"/>
				<c path="kha.simd.Float32x4"/>
			</f>
			<meta><m n=":native"><e>"Kore::sub"</e></m></meta>
		</sub>
		<sqrt public="1" set="method" static="1">
			<f a="t">
				<c path="kha.simd.Float32x4"/>
				<c path="kha.simd.Float32x4"/>
			</f>
			<meta><m n=":native"><e>"Kore::sqrt"</e></m></meta>
		</sqrt>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":unreflective"/>
			<m n=":structAccess"/>
			<m n=":include"><e>"Kore/Simd/float32x4.h"</e></m>
			<m n=":native"><e>"Kore::float32x4"</e></m>
		</meta>
	</class>
	<class path="kha.vr.Pose" params="" file="C:\HaxeLibraries\Kha\Sources/kha/vr/Pose.hx">
		<Orientation public="1"><c path="kha.math.Quaternion"/></Orientation>
		<Position public="1"><c path="kha.math.Vector3"/></Position>
		<new public="1" set="method" line="11"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.vr.PoseState" params="" file="C:\HaxeLibraries\Kha\Sources/kha/vr/PoseState.hx">
		<Pose public="1"><c path="kha.vr.Pose"/></Pose>
		<AngularVelocity public="1"><c path="kha.math.Vector3"/></AngularVelocity>
		<LinearVelocity public="1"><c path="kha.math.Vector3"/></LinearVelocity>
		<AngularAcceleration public="1"><c path="kha.math.Vector3"/></AngularAcceleration>
		<LinearAcceleration public="1"><c path="kha.math.Vector3"/></LinearAcceleration>
		<TimeInSeconds public="1"><x path="Float"/></TimeInSeconds>
		<new public="1" set="method" line="16"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.vr.SensorState" params="" file="C:\HaxeLibraries\Kha\Sources/kha/vr/SensorState.hx">
		<Predicted public="1"><c path="kha.vr.PoseState"/></Predicted>
		<Recorded public="1"><c path="kha.vr.PoseState"/></Recorded>
		<Temperature public="1"><x path="Float"/></Temperature>
		<Status public="1"><x path="Int"/></Status>
		<new public="1" set="method" line="19"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="kha.vr.TimeWarpImage" params="" file="C:\HaxeLibraries\Kha\Sources/kha/vr/TimeWarpImage.hx">
		<Image public="1"><c path="kha.Image"/></Image>
		<TexCoordsFromTanAngles public="1"><c path="kha.math.Matrix4"/></TexCoordsFromTanAngles>
		<Pose public="1"><c path="kha.vr.PoseState"/></Pose>
		<new public="1" set="method" line="40"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="kha.vr.TimeWarpParms" params="" file="C:\HaxeLibraries\Kha\Sources/kha/vr/TimeWarpParms.hx">
		<LeftImage public="1"><c path="kha.vr.TimeWarpImage"/></LeftImage>
		<RightImage public="1"><c path="kha.vr.TimeWarpImage"/></RightImage>
		<LeftOverlay public="1"><c path="kha.vr.TimeWarpImage"/></LeftOverlay>
		<RightOverlay public="1"><c path="kha.vr.TimeWarpImage"/></RightOverlay>
		<new public="1" set="method" line="53"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="kha.vr.VrInterface" params="" file="C:\HaxeLibraries\Kha\Sources/kha/vr/VrInterface.hx">
		<instance public="1" static="1"><c path="kha.vr.VrInterface"/></instance>
		<GetSensorState public="1" set="method" line="10"><f a=""><c path="kha.vr.SensorState"/></f></GetSensorState>
		<GetPredictedSensorState public="1" set="method" line="15"><f a="time">
	<x path="Float"/>
	<c path="kha.vr.SensorState"/>
</f></GetPredictedSensorState>
		<WarpSwapBlack public="1" set="method" line="20"><f a=""><x path="Void"/></f></WarpSwapBlack>
		<WarpSwapLoadingIcon public="1" set="method" line="24"><f a=""><x path="Void"/></f></WarpSwapLoadingIcon>
		<WarpSwap public="1" set="method" line="28"><f a="parms">
	<c path="kha.vr.TimeWarpParms"/>
	<x path="Void"/>
</f></WarpSwap>
		<IsPresenting public="1" set="method" line="32"><f a=""><x path="Bool"/></f></IsPresenting>
		<IsVrEnabled public="1" set="method" line="37"><f a=""><x path="Bool"/></f></IsVrEnabled>
		<GetTimeInSeconds public="1" set="method" line="43"><f a=""><x path="Float"/></f></GetTimeInSeconds>
		<GetProjectionMatrix public="1" set="method" line="48"><f a="eye">
	<x path="Int"/>
	<c path="kha.math.FastMatrix4"/>
</f></GetProjectionMatrix>
		<GetViewMatrix public="1" set="method" line="53"><f a="eye">
	<x path="Int"/>
	<c path="kha.math.FastMatrix4"/>
</f></GetViewMatrix>
		<onVRRequestPresent public="1" set="method" line="58"><f a=""><x path="Void"/></f></onVRRequestPresent>
		<onVRExitPresent public="1" set="method" line="62"><f a=""><x path="Void"/></f></onVRExitPresent>
		<onResetPose public="1" set="method" line="66"><f a=""><x path="Void"/></f></onResetPose>
		<new set="method" line="69"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="kha.vr.VrInterfaceEmulated" params="" file="C:\HaxeLibraries\Kha\Sources/kha/vr/VrInterfaceEmulated.hx">
		<extends path="kha.vr.VrInterface"/>
		<keyboardSpeed get="inline" set="null" expr="2.0" line="46" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>2.0</e></m></meta>
		</keyboardSpeed>
		<mouseSpeed get="inline" set="null" expr="0.1" line="48" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>0.1</e></m></meta>
		</mouseSpeed>
		<minPitchDegrees get="inline" set="null" expr="-80" line="50" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>-80</e></m></meta>
		</minPitchDegrees>
		<maxPitchDegrees get="inline" set="null" expr="80" line="51" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>80</e></m></meta>
		</maxPitchDegrees>
		<framebuffer public="1"><c path="kha.Framebuffer"/></framebuffer>
		<orientation><c path="kha.math.Quaternion"/></orientation>
		<pitchDegrees expr="0.0">
			<x path="Float"/>
			<meta><m n=":value"><e>0.0</e></m></meta>
		</pitchDegrees>
		<yawDegrees expr="0.0">
			<x path="Float"/>
			<meta><m n=":value"><e>0.0</e></m></meta>
		</yawDegrees>
		<pitchDelta expr="0.0">
			<x path="Float"/>
			<meta><m n=":value"><e>0.0</e></m></meta>
		</pitchDelta>
		<yawDelta expr="0.0">
			<x path="Float"/>
			<meta><m n=":value"><e>0.0</e></m></meta>
		</yawDelta>
		<degreesToRadians set="method" line="53"><f a="degrees">
	<x path="Float"/>
	<x path="Float"/>
</f></degreesToRadians>
		<updateOrientation set="method" line="58"><f a=""><x path="Void"/></f></updateOrientation>
		<buttonEvent set="method" line="78"><f a="button:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></buttonEvent>
		<axisEvent set="method" line="82"><f a="axis:value">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></axisEvent>
		<keyDownEvent set="method" line="86"><f a="code">
	<x path="kha.input.KeyCode"/>
	<x path="Void"/>
</f></keyDownEvent>
		<keyUpEvent set="method" line="107"><f a="code">
	<x path="kha.input.KeyCode"/>
	<x path="Void"/>
</f></keyUpEvent>
		<oldMouseX expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</oldMouseX>
		<oldMouseY expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</oldMouseY>
		<mouseMoveEvent set="method" line="130"><f a="x:y:movementX:movementY">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></mouseMoveEvent>
		<mouseButtonDown expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</mouseButtonDown>
		<mouseButtonDownEvent set="method" line="150"><f a="button:x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></mouseButtonDownEvent>
		<mouseButtonUpEvent set="method" line="158"><f a="button:x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></mouseButtonUpEvent>
		<GetSensorState public="1" set="method" line="168" override="1"><f a=""><c path="kha.vr.SensorState"/></f></GetSensorState>
		<GetPredictedSensorState public="1" set="method" line="174" override="1"><f a="time">
	<x path="Float"/>
	<c path="kha.vr.SensorState"/>
</f></GetPredictedSensorState>
		<WarpSwapBlack public="1" set="method" line="201" override="1"><f a=""><x path="Void"/></f></WarpSwapBlack>
		<WarpSwapLoadingIcon public="1" set="method" line="207" override="1"><f a=""><x path="Void"/></f></WarpSwapLoadingIcon>
		<WarpSwap public="1" set="method" line="212" override="1"><f a="parms">
	<c path="kha.vr.TimeWarpParms"/>
	<x path="Void"/>
</f></WarpSwap>
		<GetTimeInSeconds public="1" set="method" line="239" override="1"><f a=""><x path="Float"/></f></GetTimeInSeconds>
		<vb><c path="kha.graphics4.VertexBuffer"/></vb>
		<ib><c path="kha.graphics4.IndexBuffer"/></ib>
		<pipeline><c path="kha.graphics4.PipelineState"/></pipeline>
		<setVertex set="method" line="250"><f a="a:index:pos:uv:color">
	<x path="kha.arrays.Float32Array"/>
	<x path="Int"/>
	<c path="kha.math.Vector3"/>
	<c path="kha.math.Vector2"/>
	<c path="kha.math.Vector4"/>
	<x path="Void"/>
</f></setVertex>
		<new public="1" set="method" line="265"><f a=""><x path="Void"/></f></new>
	</class>
	<typedef path="sys.FileStat" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/sys/FileStat.hx">
		<a>
			<uid>
				<x path="Int"/>
				<haxe_doc>The user id for the file owner.</haxe_doc>
			</uid>
			<size>
				<x path="Int"/>
				<haxe_doc>The size of the file, in bytes.</haxe_doc>
			</size>
			<rdev>
				<x path="Int"/>
				<haxe_doc>The device type on which stat resides (special files only).</haxe_doc>
			</rdev>
			<nlink>
				<x path="Int"/>
				<haxe_doc>The number of hard links to stat.</haxe_doc>
			</nlink>
			<mtime>
				<c path="Date"/>
				<haxe_doc>The last modification time for the file.</haxe_doc>
			</mtime>
			<mode>
				<x path="Int"/>
				<haxe_doc>The permission bits of stat. The meaning of the bits is platform dependent.</haxe_doc>
			</mode>
			<ino>
				<x path="Int"/>
				<haxe_doc>The inode number for stat.</haxe_doc>
			</ino>
			<gid>
				<x path="Int"/>
				<haxe_doc>The user group id for the file owner.</haxe_doc>
			</gid>
			<dev>
				<x path="Int"/>
				<haxe_doc>The device on which stat resides.</haxe_doc>
			</dev>
			<ctime>
				<c path="Date"/>
				<haxe_doc>The creation time for the file (not all file systems support this).</haxe_doc>
			</ctime>
			<atime>
				<c path="Date"/>
				<haxe_doc>The last access time for the file (when enabled by the file system).</haxe_doc>
			</atime>
		</a>
		<haxe_doc>File information, as given by `sys.FileSystem.stat`.</haxe_doc>
	</typedef>
	<class path="sys.FileSystem" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/_std/sys/FileSystem.hx">
		<stat public="1" set="method" line="38" static="1">
			<f a="path">
				<c path="String"/>
				<t path="sys.FileStat"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns `FileStat` information for the file or directory specified by
		`path`.</haxe_doc>
		</stat>
		<haxe_doc>This class provides information about files and directories.

	If `null` is passed as a file path to any function in this class, the
	result is unspecified, and may differ from target to target.

	See `sys.io.File` for the complementary file API.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":buildXml"><e><![CDATA["<include name=\"${HXCPP}/src/hx/libs/std/Build.xml\"/>"]]></e></m>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.io.File" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/_std/sys/io/File.hx">
		<read public="1" set="method" line="50" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileInput"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ binary : true }</e></m>
			</meta>
			<haxe_doc>Returns an `FileInput` handle to the file specified by `path`.

		If `binary` is true, the file is opened in binary mode. Otherwise it is
		opened in non-binary mode.

		If the file does not exist or can not be read, an exception is thrown.

		Operations on the returned `FileInput` handle read on the opened file.

		File handles should be closed via `FileInput.close` once the operation
		is complete.

		If `path` is null, the result is unspecified.</haxe_doc>
		</read>
		<haxe_doc>API for reading and writing files.

	See `sys.FileSystem` for the complementary file system API.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.io.FileInput" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/_std/sys/io/FileInput.hx">
		<extends path="haxe.io.Input"/>
		<__f><d/></__f>
		<readByte public="1" set="method" line="36" override="1">
			<f a=""><x path="Int"/></f>
			<meta><m n=":has_untyped"/></meta>
		</readByte>
		<readBytes public="1" set="method" line="47" override="1">
			<f a="s:p:l">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</readBytes>
		<seek public="1" set="method" line="63"><f a="p:pos">
	<x path="Int"/>
	<e path="sys.io.FileSeek"/>
	<x path="Void"/>
</f></seek>
		<new set="method" line="32"><f a="f">
	<d/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Use `sys.io.File.read` to create a `FileInput`.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<enum path="sys.io.FileSeek" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/sys/io/FileSeek.hx">
		<SeekBegin/>
		<SeekCur/>
		<SeekEnd/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="sys.thread.Mutex" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/_std/sys/thread/Mutex.hx">
		<m><d/></m>
		<acquire public="1" set="method" line="33">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>The current thread acquire the mutex or wait if not available.
		The same thread can acquire several times the same mutex but
		must release it as many times it has been acquired.</haxe_doc>
		</acquire>
		<release public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Release a mutex that has been acquired by the current thread.
		The behavior is undefined if the current thread does not own
		the mutex.</haxe_doc>
		</release>
		<new public="1" set="method" line="29">
			<f a=""><x path="Void"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Creates a mutex.</haxe_doc>
		</new>
		<haxe_doc>Creates a mutex, which can be used to acquire a temporary lock
	to access some ressource. The main difference with a lock is
	that a mutex must always be released by the owner thread.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="sys.thread._Thread.ThreadHandle" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/_std/sys/thread/Thread.hx" private="1" module="sys.thread.Thread">
		<this><x path="sys.thread._Thread.ThreadHandle"/></this>
		<meta>
			<m n=":callable"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="sys.thread.Thread" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/_std/sys/thread/Thread.hx">
		<this><x path="sys.thread._Thread.ThreadHandle"/></this>
		<impl><class path="sys.thread._Thread.Thread_Impl_" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/_std/sys/thread/Thread.hx" private="1" module="sys.thread.Thread">
	<readMessage public="1" set="method" line="46" static="1">
		<f a="block">
			<x path="Bool"/>
			<d/>
		</f>
		<meta><m n=":has_untyped"/></meta>
	</readMessage>
	<meta>
		<m n=":keep"/>
		<m n=":directlyUsed"/>
	</meta>
</class></impl>
	</abstract>
	<class path="sys.thread._Thread.Thread_Impl_" params="" file="C:\HaxeLibraries\Kha\Tools\haxe\std/cpp/_std/sys/thread/Thread.hx" private="1" module="sys.thread.Thread">
		<readMessage public="1" set="method" line="46" static="1">
			<f a="block">
				<x path="Bool"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</readMessage>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
</haxe>